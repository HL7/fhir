<div xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/1999/xhtml ../../schema/fhir-xhtml.xsd" xmlns="http://www.w3.org/1999/xhtml">

	<h3>Using Coded Values</h3>
	<p>
The AuditEvent resource and the ATNA Audit record are used in many contexts throughout healthcare. 
The coded values defined in the "extensible" bindings above are those widely used and/or defined by
DICOM, IHE or ISO, who defined these codes to meet very specific use cases. These codes should be 
used when they are suitable.  When needed, other codes can be defined. 
	</p>
	<p>
Note: When using codes from a vocabulary, the <code>display</code> element for the code can be left off to keep the 
AuditEvent size small and minimize impact of a large audit log of similar entries.
	</p>
	<p>
The set of codes defined for this resource is expected to grow over time, and 
additional codes may be proposed / requested using the "Propose a change" link above below.
	</p>

	<h3>Event codes for Common Scenarios</h3>

	<p>
This table summarizes common event scenarios, and the codes that should be used for each case.
	</p>
	<table class="grid">
		<tr>
			<td>
				<b>Scenario</b>
			</td>
			<td>
				<b>type</b>
			</td>
			<td>
				<b>subtype</b>
			</td>
			<td>
				<b>action</b>
			</td>
			<td>
				<b/>Other</td>
		</tr>
		<tr>
			<td>User Login (<a href="auditevent-examples.html">example</a>)</td>
			<td>
				<a href="codesystem-dicom-dcim.html#110114">110114</a> User Authentication</td>
			<td>
				<a href="codesystem-dicom-dcim.html#110122">110122</a> User Authentication</td>
			<td>
				<a href="valueset-audit-event-action.html">E</a> Execute</td>
			<td>One agent which contains the details of the logged-in user.</td>
		</tr>
		<tr>
			<td>User Logout (<a href="auditevent-examples.html">example</a>)</td>
			<td>
				<a href="codesystem-dicom-dcim.html#110114">110114</a> User Authentication</td>
			<td>
				<a href="codesystem-dicom-dcim.html#110123">110123</a> User Logout</td>
			<td>
				<a href="valueset-audit-event-action.html">E</a> Execute</td>
			<td>One agent which contains the details of the logged-out user.</td>
		</tr>
		<tr>
			<td>REST operation logged on server (<a href="audit-event-example-vread.html">example</a>)</td>
			<td>
				<a href="valueset-audit-event-type.html">rest</a> RESTful Operation</td>
			<td>
				<a href="valueset-type-restful-interaction.html">[code]</a> defined for operation</td>
			<td>
				<a href="valueset-audit-event-action.html">*</a> (see below)</td>
			<td>Agent for logged in user, if available.</td>
		</tr>
		<tr>
			<td>Search operation logged on server (<a href="audit-event-example-search.html">example</a>)</td>
			<td>
				<a href="valueset-audit-event-type.html">rest</a> RESTful Operation</td>
			<td>
				<a href="valueset-type-restful-interaction.html">[code]</a> defined for operation</td>
			<td>
				<a href="valueset-audit-event-action.html">E</a> Execute</td>
			<td>Agent for logged in user, if available, and one object with a query element.  The Execute action is used as the server must execute the search parameters to get the results, whereas a Read action identifies a specific object.</td>
		</tr>
		<tr>
			<td>Break-Glass started (<a href="auditevent-example-breakglass-start.html">example</a>)</td>
			<td>
				<a href="codesystem-dicom-dcim.html#110114">110113</a> Security Alert</td>
			<td>
				<a href="codesystem-dicom-dcim.html#110122">110127</a> Emergency Override Started</td>
			<td>
				<a href="valueset-audit-event-action.html">E</a> Execute</td>
			<td>Agent is the user who is authorized to break-glass and has declared an emergency override. Note there is an Emergency Override Stopped subtype that can be used to indicate the closing of the break-glass event, when it is known.</td>
		</tr>
	</table>
	<p>
Audit Event Actions for RESTful operations:
	</p>
	<table class="grid">
		<tr>
			<td>
				<b>Operation</b>
			</td>
			<td>
				<b>Action</b>
			</td>
		</tr>
		<tr>
			<td>create</td>
			<td>C</td>
		</tr>
		<tr>
			<td>read, vread, history-instance, history-type, history-system</td>
			<td>R</td>
		</tr>
		<tr>
			<td>update</td>
			<td>U</td>
		</tr>
		<tr>
			<td>delete</td>
			<td>D</td>
		</tr>
		<tr>
			<td>transaction, operation, conformance, validate, search, search-type, search-system</td>
			<td>E</td>
		</tr>
	</table>

	<a name="operationoutcome"/>
	<h3>Encoding a FHIR operation outcome</h3>
	<p>FHIR interactions can result in a rich description of the outcome using 
the <a href="operationoutcome.html">OperationOutcome</a>. 
The <a href="operationoutcome.html">OperationOutcome</a> Resource is a collection of error, warning 
or information messages that result from a system action.
This describes in detail the outcome of some operation, such as when 
a <a href="http.html#operations">RESTful operation</a> fails.</p>
	<p>When recording into an AuditEvent that some FHIR interaction has happened, the AuditEvent should include 
the <a href="operationoutcome.html">OperationOutcome</a> from that FHIR interaction. 
This is done by placing the OperationOutcome into an AuditEvent.entity. 
Likely as a <a href="references.html#contained">contained</a> resource, given that OperationOutcome resources often are not persisted.</p>
	<p>
		<code>entity.who</code> is the OperationOutcome -- Likely <a href="references.html#contained">contained</a>
	</p>
	<p>
		<code>entity.type</code> is code <code>
			<a href="codesystem-resource-types.html#resource-types-OperationOutcome">OperationOutcome</a>
		</code>
	</p>
	<p>
		<code>entity.description</code> explains why this OperationOutcome was included.</p>
	<p>See <a href="auditevent-example-error.html">transaction failure example</a>: When a client attempts to post (create) an <code>Observation</code> Resource, 
using a server <code>Patient</code> endpoint; 
this would result in an error with an OperationOutcome.</p>
<a name="PoU" />
	<h3>PurposeOfEvent and PurposeOfUse </h3>
	<p>
The AuditEvent provides the element <code>purposeOfEvent</code> to convey the purpose of the event and <code>purposeOfUse</code>
to convey the reason that a particular actor (machine, person, software) was involved in the event. 
	</p>
	<p>
		<code>purposeOfEvent</code> is an element at the level of AuditEvent and can convey the purpose of the activity 
that resulted in the event.  This will occur when the system that is reporting the event is aware 
of the purpose of the event.  A specific example would be a radiology reporting system where a 
radiologist has created and is sending a finished report.  This system likely knows the purpose, 
e.g., "treatment".  It is multi-valued because the one event may be related to multiple purposes. 
	</p>
	<p>
It is also commonplace that the reporting system does not have information about the purpose of 
the event.  In these cases, the event report would not have a purposeOfEvent.   
	</p>
	<p>
It is also likely that the same event will be reported from different perspectives, e.g., by both the 
sender and recipient of a communication.  These two different perspectives can have different 
knowledge regarding the <code>purposeOfEvent</code>.
	</p>
	<p>
		<code>purposeOfUse</code> is an element at the level of <code>agent</code> within AuditEvent.  This describes the reason that this 
person, machine, or software is participating in the activity that resulted in the event.  For 
example, an individual person participating in the event may assert a purpose of use from their perspective.   
It is also possible that they are participating for multiple reasons and report multiple purposeOfUse.
	</p>
	<p>
The reporting system might not have knowledge regarding why a particular machine or person was involved 
and would omit this element in those cases. 
	</p>
	<p>
When the same event is reported from multiple perspectives, the reports can have different knowledge regarding the purpose. 
	</p>
<a name="patient" />
<h3>Patient as subject reference in AuditEvent.entity</h3>
<p>
It is a best practice to include a reference to the Patient/Subject affected by any auditable event, in order to enable Privacy Accounting of Disclosures and Access Logs, and to enable privacy office and security office audit log analysis. Reasonable efforts should be taken to assure the Patient/Subject is recorded, but it is recognized that there are times when this is not reasonable.
</p>
<p>
The Patient/Subject of an activity is indicated in an .entity element; with the .entity.who indicating the Patient reference, and the .entity.type indicating “1” Person, and the .entity.role indicating “1” patient. No other elements in this .entity need to be filled out. The indicator of the .entity.who, .entity.type, and .entity.role are enough to indicate that this AuditEvent activity has a subject as indicated.
</p>
<p>
Where an activity impacts more than one Patient/Subject; multiple AuditEvent resources should be recorded, one for each Patient/Subject. This best enables segmentation of the AuditEvent details so as to limit the Privacy impact. The use of multiple AuditEvent is a best-practice and should be driven by a Policy.  There will be cases where the use of multiple AuditEvent resources are not necessary, such as public health reporting.
</p>
<p>
To record a REST interaction or $operation, it is often necessary to complete the transaction in order to determine the Patient/Subject. Inspection of the potential returned results may be necessary. Some REST and $operations include parameters limiting the results to a specific Patient, in these cases this parameter informs the inclusion of the Patient reference.
</p>
<p>
Implementation Guides may make the AuditEvent requirements more clear given the workflow or security context mandated by the Implementation Guide.
</p>

</div>
