<div xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/1999/xhtml ../../schema/fhir-xhtml.xsd" xmlns="http://www.w3.org/1999/xhtml">

<a name="interpretation"></a>
<h2>Interpretation Notes:</h2>

<ul>

<li>A structure is represented as a flat list of elements. The <code>element.path</code> provides the overall structure.</li>
<li>Differentials in constraints need only specify elements that they are making rules about. Other elements can be inferred as defined in the base resource</li>
<li>Elements specified in the differential (and all elements in the snapshot) must be ordered as such:<ul>
  <li>Elements from the baseDefinition appear before new elements in a StructureDefinition with derivation 'specialization'</li>
  <li>Elements must be in the same order as the baseDefinition, and child elements appear in depth-first order.</li>
  <li>Unsliced descendants of sliced elements appear before slices</li></ul>
 </li>
<li><code>element.short</code>, <code>element.formal</code>, <code>element.comments</code> and <code>element.mapping</code> provide the specific definition for the field in a specific context.</li>
<li><code>element.type</code> is used to specify which types may be used for this element. If there is more than one type, the element offers a choice of types and must have a name that terminates in "[x]". (Note: when substituting [x] with a specific data type, always capitalize the first letter. Choice types are always camel-case. Ex: "effectiveDateTime" is correct, "effectivedateTime" is NOT correct.)
When profiling a resource and only one type is specified, the name of the element is changed to include the type instead of '[x]'.</li>
<li>When using XPath to define constraints about the relationship between the contents of the narrative and the contents of the data elements, the element against which the rule is expressed is the one against which the error or warning will be reported by a validator.</li>
<li>When expression constraints are placed on elements that offer a choice of types, the expression has to select the type to which it applies using the <a href="fhirpath.html">FHIRPath <code>is</code> operator</a>.</li>
<li>For XPath constraints, the prefix "f" should be used for "http://hl7.org/fhir", and "h" for "http://www.w3.org/1999/xhtml". XPath constraints are written against the XML representation</li>
<li>The condition element is used to assert that a constraint defined on another element affects the allowed cardinality of this element.</li>
</ul>

<a name="root"> </a>
<h3>StructureDefinition Root Elements</h3>

<p>
The very first element in a snapshot (the one with an element id of just the type name) 
defines characteristics that apply to the type as a whole.  Some of these characteristics
affect the constraints that can hold on an element that references the type.  For example, 
if the root element cardinality is <code>0..1</code>, then an element declared to be of that type 
cannot have a maximum cardinality greater than 1. (This is often used when defining 
extensions to indicate that multiple extension repetitions of that type are not allowed 
within a single element.)
</p>
<p>
In some cases, there can be redundancy between content defined on the root element and 
that defined on the StructureDefinition itself.  For example, ElementDefinition has
'definition' while StructureDefinition has 'description'.  These may have the same 
content put both places, though technically the 'definition' is text that describes 
what the type 'means', while 'description' is broader and may talk a bit about what 
the resource/data type/profile is for, in addition to its meaning.
</p>

<a name="uses"></a>
<h3>Different Uses for StructureDefinition</h3>
<p>
The base structure definition is used in a number of different ways to support
the FHIR specification. The various uses of the StructureDefinition are
controlled by the elements <code>kind</code>, <code>type</code>, <code>base</code>, and <code>url</code>,
using this basic pattern:
</p>
<pre class="json">
{
  "url": the identity of this structure definition,
  "kind": (primitive-type | complex-type | resource | logical),
  "type": the type being constrained (if it's a constraint)
  "abstract" : {true | false},
  "baseDefinition": the structure definition from which this is derived
}
</pre>
<p>
This list shows a number of examples, with links to real examples for each:
</p>
<ol>
 <li>Base definition of a data type (example: <a href="datatypes.html#Quantity">Quantity</a> - <a href="quantity.profile.xml.html">XML</a>, <a href="quantity.profile.json.html">JSON</a>):<br/>
<pre class="json" fragment="StructureDefinition">
{
  "resourceType": "StructureDefinition",
  "url": "http://hl7.org/fhir/StructureDefinition/Quantity",
  "name": "Quantity",
  "kind": "complex-type",
  "abstract" : false,
  "baseDefinition": "http://hl7.org/fhir/StructureDefinition/Element"
}
</pre>
 </li>

 <li>A constrained data type (example: <a href="datatypes.html#Money">Money</a>  - <a href="money.profile.xml.html">XML</a>, <a href="money.profile.json.html">JSON</a>):<br/>
<pre class="json" fragment="StructureDefinition">
{
  "resourceType": "StructureDefinition",
  "url": "http://hl7.org/fhir/StructureDefinition/Money",
  "name": "Money",
  "kind": "complex-type",
  "type": "Quantity",
  "abstract" : false,
  "baseDefinition": "http://hl7.org/fhir/StructureDefinition/Quantity"
}
</pre>
	</li>

 <li>Base definition of a resource (example: <a href="patient.html">Patient</a> - <a href="patient.profile.xml.html">XML</a>, <a href="patient.profile.json.html">JSON</a>): <br/>
<pre class="json" fragment="StructureDefinition">
{
  "resourceType": "StructureDefinition",
  "url": "http://hl7.org/fhir/StructureDefinition/Patient",
  "name": "Patient",
  "kind": "resource",
  "abstract" : false,
  "baseDefinition": "http://hl7.org/fhir/StructureDefinition/DomainResource"
}
</pre>
 </li>

 <li>Constraint on a resource (example: <a href="clinicaldocument.html">Clinical Document Profile for Composition</a> - <a href="clinicaldocument.profile.xml.html">XML</a>, <a href="clinicaldocument.profile.json.html">JSON</a>): <br/>
<pre class="json" fragment="StructureDefinition">
{
  "resourceType": "StructureDefinition",
  "url": "http://hl7.org/fhir/StructureDefinition/clinicaldocument",
  "name": "Clinical Document Profile for Composition",
  "kind": "resource",
  "type": "Composition",
  "abstract" : false,
  "baseDefinition": "http://hl7.org/fhir/StructureDefinition/Composition"
}
</pre>
 </li>

 <li>Base Extension (a standard data type) (example: <a href="extensibility.html#Extension">Extension</a> - <a href="extension.profile.xml.html">XML</a>, <a href="extension.profile.json.html">JSON</a>): <br/>
<pre class="json" fragment="StructureDefinition">
{
  "resourceType": "StructureDefinition",
  "url": "http://hl7.org/fhir/StructureDefinition/Extension",
  "name": "Extension",
  "kind": "complex-type",
  "abstract" : false,
  "baseDefinition": "http://hl7.org/fhir/StructureDefinition/Element"
}
</pre>
 </li>

 <li>A defined Extension  (example: <a href="extension-data-absent-reason.html">Extension Data Absent Reason</a>  - <a href="extension-data-absent-reason.xml.html">XML</a>, <a href="extension-data-absent-reason.json.html">JSON</a>): <br/>
<pre class="json" fragment="StructureDefinition">
{
  "resourceType": "StructureDefinition",
  "url": "http://hl7.org/fhir/StructureDefinition/data-absent-reason",
  "name": "Data Absent Reason",
  "kind": "complex-type",
  "type": "Extension",
  "abstract" : false,
  "baseDefinition": "http://hl7.org/fhir/StructureDefinition/Extension"
}
</pre>
 </li>

 <li>A constraint on a defined extension (no examples currently defined): <br/>
<pre class="json" fragment="StructureDefinition">
{
  "resourceType": "StructureDefinition",
  "url": "http://example.org/fhir/StructureDefinition/race",
  "name": "Race codes used by institution (a subset of meaningful use codes)",
  "kind": "complex-type",
  "type": "Extension",
  "abstract" : false,
  "abstract" : false,
  "baseDefinition": "http://hl7.org/fhir/us/core/StructureDefinition/us-core-race"
}
</pre>
 </li>


 <li>A base abstract Resource (see e.g. <a href="resource.html">Resource</a>): <br/>
<pre class="json" fragment="StructureDefinition">
{
  "resourceType": "StructureDefinition",
  "url": "http://hl7.org/fhir/StructureDefinition/Resource",
  "name": "Resource",
  "kind": "resource",
  "type": "Resource",
  "abstract" : true,
  "baseDefinition": "http://hl7.org/fhir/us/core/StructureDefinition/Base"
}
</pre>
 </li>
 <li>An interface defined in the base specification (see e.g. <a href="canonicalresource.html">CanonicalResource</a>): <br/>
<pre class="json" fragment="StructureDefinition">
{
  "resourceType": "StructureDefinition",
  "url": "http://hl7.org/fhir/StructureDefinition/CanonicalResource",
  "name": "CanonicalResource",
  "kind": "resource",
  "type": "CanonicalResource",
  "abstract" : true,
  "baseDefinition": "http://hl7.org/fhir/us/core/StructureDefinition/DomainResource"
}
</pre>
 </li>
<li>A logical model (see e.g. <a href="definition.html">Definition</a>): <br/>
<pre class="json" fragment="StructureDefinition">
{
  "resourceType": "StructureDefinition",
  "url": "http://hl7.org/fhir/StructureDefinition/Definition",
  "name": "Definition",
  "kind": "logical",
  "type": "Definition",
  "abstract" : false,
  "baseDefinition": "http://hl7.org/fhir/us/core/StructureDefinition/Base"
}
</pre>
 </li> 
</ol>

<p>
On this list, structure definitions of type 1, 3, 5 and 8 - 9 can only be defined by the FHIR specification itself. The other kinds of structure definitions
are (or may be) created by the specification but can also be defined by other implementers.
</p>

<a name="rules"></a>
<h3>Rules for Constrained Types</h3>
<p>
When the structure is a constraint (<code>derivation</code> = <code>constraint</code>), see <a href="profiling.html#resources">Extending and Restricting Resources</a> for the rules that apply.
</p>

<a name="mappings"></a>
<h3>Common Mapping Targets</h3>
<p>
Structures are able to map elements to concepts in other definition systems. Generally, these are used to
map the elements to local implementation models, data paths, and concepts. However they are also used to map
to other standards and published terminologies. These are the standard URIs used for common targets of the
mapping:
</p>

[%mappings-table%]

<a name="logical"></a>
<h3>Logical Models</h3>
<p>
StructureDefinitions are used to define the basic structures of FHIR: data types, resources, extensions, and profiles.
The same definition structure can also be used to define any arbitrary structures that are a directed acyclic graph
with typed nodes, where the primitive types are those defined by the FHIR specification.
</p>
<p>
This technique has many uses:
</p>
<ul>
 <li>Describing any arbitrary content model</li>
 <li>Describing existing HL7 content models (e.g. v2, CDA) using FHIR</li>
 <li>Describing common design patterns used in FHIR</li>
 <li>Defining a content model to support the mapping language</li>
</ul>
<!--
<h2>Profiled FHIR</h2>
<p>
If a profile is unambiguous, then the FHIR profile tooling (ref to be provided when the tooling exists)
is able to generate reference implementation based object models that express
the profiled model natively, where the object interface does not include
prohibited elements, treats declared extensions as primary properties and
slices lists according to the profile. This eases the burden on an implementer,
though this object model can only be used with a sub-set of the possible resources. <!-.-only if it enforces maxOccurs.  Extra elements can be mapped into extensions -!->
</p>
<p>
The tooling is also able to generate bi-directional transforms between the
<a href="xml.html">normal XML format</a> and an XML representation of this
profiled object model and schema for this profiled XML representation.
This XML form has extensions promoted into the primary XML form by using the
extension code as the XML name and sliced lists are renamed to use the
Profile.resource.element.name as the XML element name. Profiles are only suitable
for this use if they ensure that there are no clashing extension names when
the extension definition spaces are ignored and that the sliced list names are
appropriate.<!-.- Any reason we limit this to only XML? - because transforms are XML things -!->
</p>

<p>
Implementations are allowed to exchange this profiled XML format. Implementations
that do so are not fully conformant to FHIR; instead they can claim to be conformant
to "Profiled FHIR". Implementations should consider carefully before adopting this
approach; while it will reduce the amount of work required to initially implement
particular profiles, it will increase the amount of work required to exchange this
data with other communities or to re-use tooling and applications that are also
used in other contexts. This cost should particularly be considered in light of the
fact that the previously discussed tooling allows applications to be written as
though they are dealing with "Profiled FHIR" instances when they are in fact sending
and receiving fully conformant FHIR instances.
</p>
-->

</div>
