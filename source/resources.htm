<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
       "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <title>Resource Definitions - FHIR v[%version%]</title>
    <link rel="Stylesheet" href="fhir.css" type="text/css"/>
    <link rel="Stylesheet" href="fhir-print.css" type="text/css" media="print" />
</head>

<body>
[%header%]
[%sidebar%]

[%maindiv%]
[%resourcesheader%]

[%onthispage Resource Definitions#root|Resource Content#content|Bundles#bundles|Conformance#conformance|Resource References#references|Contained Resources#contained|Versioning#version%]

<a name="root"> </a>
<h1>Resource Definitions</h1>

<p>
A resource is an entity that:
</p>
<ul>
 <li>has a known identity by which it can be addressed</li>
 <li>identifies itself as one of the resource types defined in this specification</li>
 <li>contains a set of structured data items as described by the resource definition</li>
 <li>contains a human readable XHTML representation of the content of the resource</li>
 <li>may change over time</li>
</ul>
<p>
Resources have multiple representations. A resource is valid if it meets the above rules, and is represented in 
either XML or JSON according to the rules defined in this specification. Other representations are allowed, but 
are not described by this specification.
</p>

<p>
This specification defines a series of different resource types that can be used to exchange and/or store data 
in order to solve a wide range of healthcare related problems, both clinical and administrative. In addition,
this specification defines several different ways of exchanging the resources.
</p>

<a name="content"> </a>
<h2>Contents of a Resource</h2>
<p>
All resources have the following aspects:
</p>
<ul>
 <li>A base set of defined data elements</li>
 <li>Extensions (optional) - additional data elements added by implementations (see <a href="extensibility.htm">"Extensibility"</a>)</li>
 <li>A human readable narrative description of the contents of the resource (see <a href="formats.htm#Narrative">"Narrative"</a>)</li>
 <li>Contained resources - additional resources that are part of the identification and transaction space of this resource (see <a href="#contained">below</a>)</li>
 <li>Metadata - important information about the resource that is not part of the content model of the resource</li>
 <li>Tags - labels affixed to the resources that may be used to define additional operational behaviour such as security, workflow, etc.</li>
</ul>
<p>
The contents of the base resource from which all other resources derive are:
</p>
<pre class="spec">
&lt;<a href="#content" title="A Resource Definition for FHIR" class="dict"><b>[Name]</b></a> xmlns="http://hl7.org/fhir"&gt;
 &lt;<a href="extensibility.htm" title="See Extensions" class="dict"><b>extension</b></a>&gt;<font color="Gray">&lt;!-- <font color="brown"><b>0..*</b></font> </font> <font color="darkgreen"><a href="extensibility.htm">Extension</a></font>   <a href="extensibility.htm"><font color="navy">See Extensions</font></a> <font color="Gray"> --&gt;</font>&lt;/extension&gt;
 &lt;<a title="The base human language of the resource content. The value can be any valid value following BCP 47" class="dict" href="resources-definitions.htm#Resource.language"><b>language</b></a> value="[<span style="color: darkgreen"><a href="datatypes.htm#code">code</a></span>]"/&gt;<span style="color: Gray">&lt;!--</span> <span style="color: brown"><b>0..1</b></span> <span style="color: navy">Human language of the content (BCP-47)</span><span style="color: Gray"> --&gt;</span>
 &lt;<a href="formats.htm#Narrative" title="Text summary of resource content, for human interpretation" class="dict"><b>text</b></a>&gt;<font color="Gray">&lt;!--</font> <font color="brown"><b>1..1</b></font> <font color="darkgreen"><a href="formats.htm#Narrative">Narrative</a></font> <font color="navy">Text summary of resource content, for human interpretation</font><font color="Gray"> --&gt;</font>&lt;/text&gt;
 &lt;<a href="#contained" title="See Contained Resources" class="dict"><b>contained</b></a>&gt;<font color="Gray">&lt;!-- <font color="brown"><b>0..*</b></font> </font> <font color="darkgreen"><a href="#contained">Resource</a></font>   <a href="#contained"><font color="navy">Contained Resources</font></a> <font color="Gray"> --&gt;</font>&lt;/contained&gt;
 <font color="Gray">&lt;!-- Defined Data Elements for Resource --&gt;</font>
&lt;/[Name]&gt;
</pre>
<p>
These elements must always appear in this order. These basic elements shared by all resources come first
in order to support consistent definitions for schema and UML derived code. 
</p>
<p>
The optional language element specifies the base language of the resource using the <a href="http://tools.ietf.org/html/bcp47">codes defined in BCP 47</a>.
Note that not all the content of the resource has to be in the language. 
If a language is specified, it should also be specified on the <a href="formats.htm#Narrative">Narrative Text</a>.
</p>
<p>
The language element is provided to support indexing and accessibility (e.g. text-to-speech use the language tag). 
The html language tag in the narrative is used when processing the narrative. The language tag on the resource is provided 
for use to specify the language of alternate presentations generated from the data in the resource
</p>

<a name="metadata"> </a>
<h2>Resource Metadata</h2>
<p>
The metadata properties are key aspects of the resource and how it behaves. For implementation reasons, these are represented outside the resource:
</p>

<table class="grid">
  <tr><th>Metadata Item</th><th>Type</th><th>Usage</th></tr>
  
  <tr><td>Logical Id</td> <td><a href="datatypes.htm#id">id</a></td> <td>The identity of the resource. 
    Resources always have a known identity and it is constant for the entire lifetime of the resource. Resource identification is <a href="#Identification">discussed further below</a></td></tr>
	
  <tr><td>Version Id</td><td><a href="datatypes.htm#id">id</a></td><td>Changes each time the content of the resource changes. 
    Can be referenced in a resource reference (<a href="#Resource">see below</a>). Can be used to ensure that updates are based on the latest version of the resource. 
  <br/>The version can be globally unique, or scoped by the Logical Id. Since version ids must be unique within the scope of a single resource, they are generally either a serially incrementing id 
     scoped by the logical id, or a uuid, though neither of these approaches is required</td></tr>
	 
  <tr><td>Last Modified Date</td><td><a href="datatypes.htm#instant">instant</a></td><td>Changes each time the content of the resource 
    changes. Can be used by a system or a human to judge the currency of the resource content.   </td></tr>
	
</table>
<p>
Note that the version id changes any time the resource changes, and so does the last modified date. The Version Id is more useful for managing
concurrency issues and version specific references because of the inherent uncertainties and precision limits associated with date times. The Last Modified Date 
is useful for a human to ascertain the logical currency of the information in the resource.
</p>
<p>
In any environment where the resources are used, the technical details of how these metadata elements 
are represented will need to be resolved. For further details, see <a href="implementation.htm">Implementation 
Details</a>, which also contains a discussion of how resource identity is maintained.
</p>
<p>
Resource ids are case sensitive. Ids are always opaque, and systems need not and should not attempt to determine their internal structure. 
However the id is represented, it must always be represented in the same way in resource references and URLs. Ids can be up to 36 characters 
long, and contain any combination of ASCII letters, numerals, "-" and ".".
</p>

<a name="tags"> </a>
<h3>Tags</h3>
<p>
In addition to the basic contents of Resources, and their metadata, each resource can be labelled
with one or more "Tags". These tags can be used to associate additional operational information 
with the Resources, including defining security labels used in access control policies, workflow
management, and other uses. Tags are attached to resources, and exchanged with their resource.
Tags are never used to keep information that needs to be understood when interpreting the content
of a resource; their function is limited to finding and controlling access to the resource.
</p>
<p>
Each tag has two properties:
</p>
<table class="grid">
 <tr><td>URI : uri</td><td>A term that defines the meaning of the tag</td></tr>
 <tr><td>Label : string</td><td>(Optional) A human-readable label for the tag for use when displaying in end-user applications</td></tr>
</table>
<p>
The URI may be a reference to a healthcare vocabulary, including ones defined in this specification,
such as the basic <a href="security.htm#labels">security label set</a>, or vocabularies such as 
those defined by HL7 (v2 and v3/CDA), LOINC, or SNOMED-CT. Alternatively, the URI may be one
defined by the implementation in the local context. Literal references that refer directly 
to a description of the tag (typically just an HTML page) are preferred over symbolic references 
but this is not required.
</p>
<p>
If the end user application provides functionality to the user that allows the user to 
affix arbitrary text tags to the resource for their own purpose, the application can 
automatically construct a URI by appending the mime encoding of the Label to the base
URL "http://hl7.org/fhir/tags/text/". When applications processing resources see this
base URL, they can automatically know that this is a pure text label with no formal
meaning.
</p>

<a name="compartments"> </a>
<h3>Compartments</h3>
<p>
Each resource may belong to one or more logical compartments. A compartment is a logical 
grouping of resources which share a common property. Compartments have two principal roles:
</p>
<ul>
 <li>Function as an access mechanism for finding a set of related resources quickly</li>
 <li>Provide a definitional basis for applying access control to resources quickly</li>
</ul>
<p>
Compartments define how particular instances of the compartment are defined and identified,
and how systems know whether resources are in the compartment or not. Here is a list of 
the compartments defined by this specification:
</p>
<%compartmentlist%>
<p>
As an example of compartment usage, to retrieve a list of a patient's conditions, use the URL:
</p>
<pre>
  GET [baseurl]/patient/@[id]/condition
</pre>
<p>
The details of this usage are <a href="query.htm#compartments">described under the search operation</a>.
</p>
<p>
Compartments may be used explicitly, like this, but can also be used implicitly. For instance,
if a FHIR server is providing a patient view of a record, the authorised user associated
with use of the FHIR RESTful api may be limited to accessing records from the
compartment instance(s) logically associated with their identity.
</p>
<p>
Note that resources may cross between compartments, or interlink them. Examples of 
this would be where a <a href="diagnosticreport.htm">Diagnostic Report</a> identifies  
a subject, but an <a href="observation.htm">Observation</a> it references identifies
a different subject, or where a <a href="list.htm">List</a> resource references
items that identify different subjects. Such cross-linking may arise for 
many valid reasons, including:
</p>
<ul>
 <li>Cases where subject records are inter-linked - Transplants, Perinatal care, family therapy etc.</li>
 <li>Workflow management where action lists link multiple patients and/or practitioners</li>
</ul>
<p>
Given the wide variety of use cases and contexts in which FHIR is used, compartments 
do not define how cross-linking is handled. Systems may reject resources, remove them 
from both compartments, or place them in both, or act in some other fashion.
</p>

<hr/>
<a name="bundles"></a> 
<a name="bundle"></a> 
<h2>Resource Bundles</h2>
<p>
One common operation performed with resources is to gather a collection of resources into a single instance.
In FHIR this is referred to as "bundling" the resources together. The resource bundle is not just a list of 
references to resources, but includes their whole content. These resource bundles are useful for a variety of 
different reasons, including:
</p>
<ul>
  <li>Returning a set of resources that meet some criteria as part of a server operation</li>
  <li>Returning a set of versions of resources as part of the history operation on a server</li>
  <li>Storing a collection of resources</li>
  <li>Exchanging a set of resources as part of a message transaction</li>
  <li>Grouping a self-contained set of resources to act as an exchangeable and persistable group with clinical integrity (i.e. a clinical document)</li>
</ul>
<p>
Conceptually, a bundle has an identifier (url) and a date updated, and a list of resources. 
For each resource in the list, the bundle has the resource and also its metadata as listed above.
Each entry in the bundle retains its original identifier. This means that applications reading
the bundle should always look for a resource by its identity (after converting relative URLs
absolute URL) in the bundle first before trying to access it by its URL.
</p>


<hr/>
<a name="conformance"> </a>
<h2>Conformance</h2>
<p>
The contents of the resource and the formats used to represent it must conform to the rules described in this specification.
Because of its general nature and wide applicability, the rules made in this specification are generally loose compared 
to the rules suitable for particular use cases. This specification provides a conformance layer that implementers and 
national/regional programs can use to provide a computable statement about how the resources and their exchange 
paradigms are used to solve particular use cases. This conformance layer is delivered through use of the 
<a href="conformance.htm">Conformance</a> and <a href="profile.htm">Profile</a> resources.
</p>
<p>
The specification also provides a number of technical resources that can assist with enforcing conformance 
to this base specification:
</p>
<ul>
 <li><a href="fhir-all-xsd.zip">Schema &amp; Schematron</a></li>
 <li><a href="validation.zip">Validator Package</a></li>
 <li><a href="implementation.htm#Use">Reference Platforms</a></li>
</ul> 
<p>
Note that none of these are able to check complete conformance to this specification.
</p>
<p>
The data elements defined resources and data types have 4 properties that are 
directly related to conformance: Cardinality, Is-Modifier, Must-Support, and Cardinality.
These interact to place conformance requirements on implementations. 
</p>

<a name="cardinality"> </a>
<h3>Cardinality</h3>
<p>
All elements defined in FHIR have a cardinality as part of their definition - a minimum number 
of required appearances, and a maximum number. This number specifies the number of times
the element may appear in any instance of the resource type. This specification
only defines the following cardinalities: 0..1, 0..*, 1..1, and 1..*. Profiles 
that describe specific use cases may use other values for cardinality within the limits 
of the cardinality defined by the resource. 
</p>
<p>
Note that when present, elements cannot be empty - they must have either a value attribute, child elements, or extensions. 
</p>
<p>
In this specification, very few elements have a minimum cardinality of 1. 
Resources are used in many contexts, often quite removed from their primary
use case, and sometimes even basic information is sometimes very incomplete. For this reason,
the only elements that have a minimum cardinality of 1 are those where they
are necessary to any understanding of the element that contains them. 
The minimum cardinalities should not be taken as a guide to which elements
are expected to be present in any particular use of the resource.
</p>
<p>
For elements that have cardinality &gt; 1, the order in which they appear may have meaning.
Unless the element definition (either in this specification or the extension) defines a meaning 
to the order explicitly, the meaning of the order is not defined, and implementations are allowed 
to reorder the elements. Note that you cannot define a meaning for the order of the elements in 
a profile. When there is no definition of the meaning of the order, implementations that need 
to choose a single element from a list of elements for some use must do so based on the semantics 
of the content of the elements that repeats. Profiles and Implementation guides may often make 
rules about this selection process.
</p>


<a name="mustUnderstand"> </a>
<a name="ismodifier"> </a>
<h3>Is-modifier</h3>
<p>
Is-Modifier is a boolean property that is assigned when an element is defined, either as part of 
the base resource contents in this specification, or when profiles declare extensions. 
An element is labelled "Is-Modifier = true" if the value it contains may change the 
interpretation of other elements or the resource as a whole. Typical examples of 
elements that are labelled "Is-Modifier" are elements such as "status", "active", or "certainty". 
The value of Is-Modifier cannot be changed when element usage is described in a 
<a href="profile.htm">Resource Profile</a>.
When an element is labelled as Is-Modifier, the documentation  must be clear about why 
it is a modifier, and/or which elements the element may modify.
</p>
<p>
Generally, elements labelled "Is-Modifier = true" also have a minimum cardinality of 1, to introduce
certainty in their handling. If the value of such an element is not explicit in the instance, or known 
by the context, the resource cannot be safely understood. Irrespective of the minimum cardinality, 
implementations producing resources SHALL ensure that appropriate values for isModifier 
elements are provided. Is-Modifier elements SHALL be represented in the narrative summary 
of the resource.
</p>
<p>
Implementations processing resources SHALL understand the impact of the element when they process 
the resource. Implementations are not required to "support" the element in any meaningful way - they 
may achieve this by rejecting instances that contain values outside those they support (for instance,
an application may refuse to accept observations with a reliability != "ok"). Alternatively,
implementations may be able to be sure, due to their implementation environment, that such values 
will never occur. However applications SHOULD always check the value irrespective of this.
</p>
<p>
Servers and background processes that move resources around are not "processing the data
of the resource", and these applications are not required to check for unknown extensions. Any
process that copies data out of a resource for use in another context (display to a human,
decision support, exchange in another format that doesn't support extensions) is processing
the data.
</p>

<a name="mustSupport"> </a>
<h3>Must-Support</h3>
<p>
Labelling an element Must-Support means that implementations that produce or consume resources must 
provide "support" for the element in some meaningful way. Exactly what this means is impossible
to describe or clarify as part of the FHIR specification.
</p>
<p>
For this reason, the specification itself never labels any elements as must-support. 
This is done in <a href="profile.htm">Resource Profiles</a>, where the profile 
labels an element as mustSupport=true. When a profile does this, it must also make clear
exactly what kind of "support" is required, as this can mean many things.
</p>

<p>
Note that an element that has the property IsModifier is not necessarily a "key" element (e.g. one of 
the important elements to make use of the resource), nor is it automatically mustSupport - however both 
of these things are more likely to be true for IsModifier elements than for other elements.
</p>


<a name="ResourceReference"> </a>
<a name="Resource"> </a>
<a name="references"> </a>
<a name="Identification"> </a>
<h2>References between resources</h2>
<p>
The defined elements in a resource includes many references to other resources. 
The resources combine to build a web of information about healthcare. 
</p>
<p>
References are always defined in one particular direction - from one resource (source) to another (target).
The corresponding reverse relationship from the target to the source exists in a logical sense, but is 
not represented explicitly in the resource. Navigating these reverse relationships requires some 
external infrastructure to track the relationship between resources.
</p>
<p>
Because resources are processed independently, relationships are not considered to be transitive. 
For example, if a <a href="condition.htm">Condition</a> resource references a particular 
<a href="patient.htm">Patient</a> as its subject, and it links to a <a href="procedure.htm">Procedure</a>
resource as its cause, there is no automatic rule or implication that the procedure 
has the same patient as its subject. Instead, the subject of the procedure must be established 
directly in the procedure itself. Another way to state this is that the context of the subject
is not "inherited" and it does not "conduct" along the relationship to procedure. 
The only exception to this in the case of contained resources (see below). Note that in
practice, the relationships do need to describe a logical and coherent record.
</p>

<p>
In a resource, 
references are represented with a type, a reference, and a text description.
The key property of the reference is the <i>reference</i> - resources are identified and addressed by their URL.
The actual reference looks like this (see <a href="formats.htm#syntax">"XML Format"</a>
for details of the way resource contents are described):
</p>

[%dt ResourceReference%]

<p>&nbsp;</p>

<p>Notes:</p>
<ul>
 <li>The <i>type</i> must specify the resource type, whether or not the type of the resource reference is fixed for the element in the resource definition</li>
 <li>The <i>reference</i> element contains a url that is either an absolute URL, or a relative URL that is relative to the <a href="http.htm#root">Service Base URL</a>, or an internal fragment reference (see below)</li>
 <li>Using absolute URLs provides a stable scalable approach suitable for a cloud/web context, while using relative/logical references provides a 
   flexible approach suitable for use when trading across closed ecosystem boundaries. (see <a href="implementation.htm#identity">implementation issues for further discussion</a>)</li>
 <li>Absolute URLs do not need to point to a <a href="http.htm">FHIR RESTful server</a>, though this is the preferred approach. If the tail of the url 
   conforms to the structure "/[type]/@[id]" or "/[type]/@[id]/history/@[id]" then it should be assumed that the reference is to a <a href="http.htm">FHIR RESTful server</a>. 
   Whether or not the reference is to a FHIR RESTful server, the reference must point to a Resource as defined by this specification</li>
 <li>URLs are always considered to be case-sensitive and lowercase is preferred</li>
 <li>The <i>display</i> is generally not the same content as the Resource.text of the referenced resource.  The purpose is to 
   identify what's being referenced, not to more fully describe it</li>
</ul>

<div class="use">
<p><b>Constraints</b></p>
<p>
[%dt.constraints ResourceReference%]
</p>
</div>

<div class="example">
<p>A relative reference to the <a href="patient.htm">patient</a> "034AB16" in an element named "context" on a FHIR RESTful server:</p>
<pre class="xml" fragment="ResourceReference">
  &lt;context&gt;
    &lt;type value="Patient" /&gt;
    &lt;reference value="patient/@034AB16" /&gt;
  &lt;/context&gt;
</pre>
<p>An absolute reference to a <a href="profile.htm">resource profile</a> in an element named "profile":</p>
<pre class="xml" fragment="ResourceReference">
  &lt;profile&gt;
    &lt;type value="Profile" /&gt;
    &lt;reference value="http://fhir.hl7.org/svc/profile/@c8973a22-2b5b-4e76-9c66-00639c99e61b" /&gt;
  &lt;/profile&gt;
</pre>
<p><i>Note that HL7 has not yet actually created a profile registry, nor decided on a URL for it</i>.</p>
<p>
A short display text that provides a human readable identification of the resource may be provided:
</p>
<pre class="xml" fragment="ResourceReference">
  &lt;custodian&gt;
    &lt;type value="Organization" /&gt;
    &lt;reference value="organization/@123" /&gt;
    &lt;display value="HL7, Inc" /&gt;
  &lt;/custodian&gt;
</pre>
<p>
This text can be used by a system that is unable to resolve the reference to an actual resource.
</p>
</div>

<a name="contained"> </a>
<h3>Contained Resources</h3>
<p>
In some circumstances, the content referred to in the resource reference does not have an independent 
existence apart from the resource that contains it - it cannot be identified independently, and nor 
can it have its own independent transaction scope. Typically, such circumstances arise where the resource
is being assembled by a secondary user of the source data, such as a middleware engine. If the data available
when the resource is constructed does not include record keys or absolute identification information, then
a properly identified resource cannot be assembled, and even if an arbitrary identification was associated
with it, the resource could never be the subject of a transaction outside the context of the resource that
refers to it.
</p>
<p>
In these circumstances, the resource is placed directly in line in the reference. <b>This should never be 
done when the content can be identified properly, as once identification is lost, it is extremely difficult 
(and context dependent) to restore it again.</b>
</p>
<div class="example">
<p>
An example of a contained resource:
</p>
<pre class="xml"> <!-- Can't fragment test this - too incomplete -->
 &lt;Document xmlns="http://hl7.org/fhir"&gt;
  &lt;extension&gt;...&lt;/extension&gt;
  &lt;text&gt;...&lt;/text&gt;
  &lt;contained&gt;
    &lt;Organization id=&quot;org1&quot;&gt;
      &lt;!-- whatever information is available --&gt;
    &lt;/Organization&gt;
  &lt;/contained&gt;
  &lt;information&gt;
    &lt;!-- other attributes --&gt;
    &lt;custodian&gt;
      &lt;type value="Organization" /&gt;
      &lt;reference value="#org1" /&gt;
    &lt;/custodian&gt;
    &lt;!-- other attributes --&gt;
  &lt;information&gt;
 &lt;/Document&gt;
</pre>
<p>
The same example in JSON:
</p>
<pre class="json"> 
{ "Document" : {
  "extension" : { ... },
  "text" : { .. },
  "contained: [
    {"Organization" : {
      "_id" : "org1",
      .. whatever information is available ...
	}}
  ]
  "information: {
    ... other attributes ...
    "custodian" : {
      "type" : { "value" : "Organization" },
      "url" : { "value" : "#org1" }
	}
    ... other attributes ...
  }
}}
</pre>
</div>

<p>
The type and url are always required, even though somewhat redundant in this case, to ensure that a
single approach to resolving resource references can be used - simply by resolving the URL, and accessing
accordingly.
</p>
<p>
Some notes about use and interpretation of contained resources:
</p>

<ul>
  <li>Contained resources share the same internal id resolution space as the parent resource</li>
  <li>Contained resources do not contain additional contained resources</li>
  <li>Resources that are contained inline also "inherit" context from their parent resource. For instance, if 
    the parent resource contains a "subject", and the contained resource also has a subject element defined, 
    but does not specify any subject, a processing application may infer that the subject is the same. Note,
    however, that such inferences are specific to a particular circumstance. There is no rule, for instance, 
	that the meaning of the "subject" element is the same in both parent and contained resources</li>
  <li>Contained resources do not need to contain any narrative</li>
</ul>

<a name="version"> </a>
<h2>Inter-version Compatibility</h2>
<blockquote>
<p>
The following rules will apply once the specification becomes a full normative 
specification. These rules ensure that implementations may process the content 
of the resources safely while exchanging data between applications using different
versions of FHIR. However during the period of trial use of the specification, HL7
may make changes outside the limitations described here in response to discovered 
issues in the specification. Applications may wish to use <a href="#tags">resource tags</a> to help
manage this during the period of trial use.
</p>
</blockquote>
<p>
There is no explicit version marker in the resource content. Once normative, subsequent versions of 
this specification may introduce new elements and/or content at any point in the 
resource contents, but the path and meaning of existing data elements will not be changed. Any value
set or code list may be revised to include additional cods
</p>
<p>
Each binding to a value set or code system indicates whether the value list automatically 
grows as new codes are defined, whether the list may be extended
in future versions of the specification, or whether the list cannot be changed at all in future versions.
</p>
<p>
The conformance layer (<a href="conformance.htm">Conformance</a> and <a href="profile.htm">Profile</a>)
have mandatory properties declaring the FHIR specification version, and these may be used to determine
which version of FHIR an implementation is using. 
</p>
<p>
In a typical scenario, mixed versions may need to exist, so applications SHOULD ignore elements 
that they do not recognize unless they are extensions with a isModifier element with value="true". 
However, in a healthcare context, many application vendors are unwilling to 
consider this approach because of concerns about clinical risk or 
technical limitations in their software (i.e. schema based processing). 
Applications are not required to ignore unknown elements, but must
declare whether they will do so in their conformance statements using the <i>acceptUnknown</i> element.
</p>
<p>
Additional discussion on interversioning issues can be found here: 
<a href="http://wiki.hl7.org/index.php?title=FHIR_interversion_compatibility">http://wiki.hl7.org/index.php?title=FHIR_interversion_compatibility</a>.
</p>

[%footer%]


[%/maindiv%]    
</body>
</html>