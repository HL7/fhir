<div xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/1999/xhtml ../../schema/fhir-xhtml.xsd" xmlns="http://www.w3.org/1999/xhtml">

<h3>Applying a PlanDefinition</h3>

<p>The following diagram illustrates the relationship between the PlanDefinition and ActivityDefinition resources, as well as a typical application to CarePlan, RequestGroup, and Request resources. The resources depicted on the left side of the arrow are <i>definition</i> resources, while the ones on the right side of the arrow are <i>request</i> resources, with the arrow representing the <code>$apply</code> operation:</p>

<img src="action-and-activity-definition.png" alt="relationship-between-action-and-activity-definition"/>

<p>The PlanDefinition and ActivityDefinition resources support the representation of a broad range of use cases including order sets, flow sheets, event-condition-action rules, clinical protocols, and research trials. To support this range of use cases, as well as the variability in capabilities of systems that use these types of artifacts, this specification is not prescriptive about exactly how these definitions are applied to produce request and event resources. However, the approach depicted above provides a general framework for the process, and the following steps provide more detail on the potential approach:</p>

<ol>
	<li>Create a CarePlan resource focused on the Patient in context and linked to the PlanDefinition using the <code>instantiates</code> element</li>
	<li>Create <code>goal</code> elements in the CarePlan based on the <code>goal</code> definitions in the plan</li>
	<li>Create a RequestGroup resource focused on the Patient in context and linked to the PlanDefinition using the <code>instantiatesCanonical</code> element</li>
	<li>Create an <code>activity</code> in the CarePlan to <code>reference</code> the RequestGroup</li>
	<li>Process each <code>action</code> element of the PlanDefinition</li>
</ol>

<p>Processing for each action proceeds according to the following steps:</p>

<ol>
	<li>Determine applicability by evaluating the <i>applicability</i> conditions defined for the element</li>
	<li>If the action is applicable, determine whether the action is a group or a single, atomic activity (does the action have child actions?)</li>
	<li>If the action is atomic, process according to the following steps:
	    <ul>
			<li>Create an <code>action</code> element in the RequestGroup with the same <code>id</code> as the action being processed</li>
			<li>Apply the elements of the <code>action</code> to the corresponding elements of the newly created <code>action</code> in the RequestGroup such as <code>title</code>, <code>description</code>, <code>textEquivalent</code>, <code>timing</code>, and so on</li>
			<li>Carry any <i>start</i> and <i>stop</i> conditions defined in the plan action forward to the request group action.</li>
			<li>There are three possibilities for the <code>definition</code> element:
				<ul>
					<li>ActivityDefinition:
						<ol>
							<li>Create the target resource as described in the Applying an ActivityDefinition topic</li>
							<li>Reference the resulting resource in the <code>resource</code> element of the action. Note that the target resource can be set as a <code>contained</code> resource in the RequestGroup, or it can be persisted independently, as appropriate for the environment</li>
							<li>Set the <code>status</code> of the target resource to <i>option</i> so that it is clearly indicated as part of a RequestGroup. Note that the ActivityDefinition/$apply operation will not necessarily produce resource with this status, so this is an important step.</li>
							<li>Apply any overrides based on the elements of the <code>action</code> (see the section on Overlap below for details)</li>
						</ol>
					</li>
					<li>PlanDefinition:
						<ol>
							<li>Create a CarePlan by applying the target PlanDefinition</li>
							<li>Reference the resulting resource in the <code>resource</code> element of the action. Note that the resulting CarePlan can be set as a <code>contained</code> resource in the RequestGroup, but doing so would require expanding any potentially contained resources.</li>
							<li>Set the <code>status</code> of the CarePlan to <i>option</i> so that it is clearly indicated as part of a RequestGroup.</li>
							<li>Apply any overrides based on the elements of the <code>action</code> such as <code>title</code>, <code>description</code>, and <code>dynamicValue</code>.</li>
						</ol>
					</li>
					<li>Questionnaire: Set the <code>resource</code> element of the action to the Questionnaire, indicating that the activity to be performed is filling out the given questionnaire.</li>
				</ul>

			</li>
		</ul>
	</li>
	<li>If the action is a group, determine which actions to process based on the behaviors specified in the group. Note that this aspect of the process may require input from a user. In these cases, either the choices made by the user can be provided as input to the process, or the process can be performed as part of a user-entry workflow that enables user input to be provided as necessary.</li>
</ol>

<p>The parameters to the $apply operation are available within dynamicValue CQL and FHIRPath expressions as context variables, accessible by the name of the parameter prefixed with a percent (%) symbol. For example, to access the subject given to the apply, use the expression <code>%subject</code>. The value of the %subject context variable in a dynamicValue expression is determined using the current <i>subject</i>, as specified by the <code>subject</code> element on the PlanDefinition, current PlanDefinition.action, or ActivityDefinition.</p>

<p>In addition to the $apply operation parameters, the context variable %action can be used within the path element of a dynamicValue to specify the current action target. For example, to specify the path to the description element of the current action, use <code>%action.description</code>.</p>

<p>Note that result of this operation is transient (i.e. none of the resources created by the operation are persisted in the server, they are all returned as contained resources in the result). The result effectively represents a proposed set of activities, and it is up to the caller to determine whether and how those activities are actually carried out.</p>

<h3>Overlap with ActivityDefinition</h3>

<p>As noted in the Boundaries section, there is some overlap between the content that can be represented within the <code>action</code> element of a PlanDefinition, and the elements of the ActivityDefinition resource. This overlap allows for both resources to be used independently, as well as in combination. For example, a PlanDefinition may be used without any supporting ActivityDefinitions to describe a particular workflow, where it is sufficient to describe the actions simply as textual descriptions of what needs to take place. On the other hand, the PlanDefinition may be used together with ActivityDefinition to provide a detailed structural representation of the activities to be performed.</p>

<p>In general, where there is overlap, the elements from the PlanDefinition provide overriding behavior. Specifically, the following elements of <code>action</code> overlap with ActivityDefinition:</p>

<table>
    <thead>
		<tr>
			<th><b>Element</b></th>
			<th><b>Behavior</b></th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>title</td>
			<td>The <code>title</code> element in ActivityDefinition is the title of the activity "as defined", where the <code>title</code> element in PlanDefinition reflects the title in the scope of the plan.</td>
		</tr>
		<tr>
			<td>description</td>
			<td>The <code>description</code> element in ActivityDefinition is the description of the activity "as defined", where the <code>description</code> element in PlanDefinition reflects the description in the scope of the plan.</td>
		</tr>
		<tr>
			<td>code</td>
			<td>The <code>code</code> element in ActivityDefinition represents the meaning of the activity "as defined", where the <code>code</code> element in PlanDefinition represents the meaning in the scope of the plan.</td>
		</tr>
		<tr>
			<td>documentation</td>
			<td>The <code>documentation</code> element in PlanDefinition represents additional documentation for the action specific to the scope of the plan, where the <code>relatedArtifact</code> element in ActivityDefinition provides documentation specific to the activity itself.</td>
		</tr>
		<tr>
			<td>timing</td>
			<td>The <code>timing</code> element in ActivityDefinition represents timings associated within the activity itself, where the <code>timing</code> element in PlanDefinition represents the timing of the activity with respect to the plan and its other actions. When a timing is provided on both, the timing defined in the plan generally takes precedence.</td>
		</tr>
		<tr>
			<td>participant</td>
			<td>The <code>participant</code> element in ActivityDefinition represents what type of actor is expected to perform the activity generally, where the <code>participant</code> element in PlanDefinition represents the type of actor that is expected to perform the activity in the context of the plan.</td>
		</tr>
		<tr>
			<td>transform</td>
			<td>The <code>transform</code> element in ActivityDefinition describes the transformation of the definition to a request or event resource in general, where the <code>transform</code> element in PlanDefinition describes the transformation within the scope of the plan. When a transform is present in both, the transform in the plan takes precedence.</td>
		</tr>
		<tr>
			<td>dynamicValue</td>
			<td>The <code>dynamicValue</code> element in ActivityDefinition defines values for elements of the target request or event resource in general, where the <code>dynamicValue</code> element in PlanDefinition defines values within the scope of the plan. When dynamic values are present in both, the dynamic values from the ActivityDefinition are applied first (in the order in which they appear on the ActivityDefinition), followed by the dynamic values from the PlanDefinition (in the order in which they appear on the PlanDefinition).</td>
		</tr>
	</tbody>
</table>

</div>
