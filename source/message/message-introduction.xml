<div xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/1999/xhtml ../../schema/xhtml1-strict.xsd" xmlns="http://www.w3.org/1999/xhtml">

<p>
This page describes how FHIR Resources can be used in a traditional messaging context, 
much like HL7 v2. Applications asserting conformance to this framework claim to be 
conformant to "FHIR messaging". 
</p>
<p>
In FHIR messaging, a "request message" is sent from a source application to a destination
application when an event happens. Events mostly correspond to things that happen in the 
real world. The request message consists of a <a href="extras.html#bundle">bundle</a>
<a href="extras.html#tags">identified by the tag</a> "http://hl7.org/fhir/tag/message", 
with the first resource in the bundle being this <i>Message</i> resource. The 
Message resource has a code - the message event - that identifies the nature of the 
request message and carries additional request metadata. The other resources in the 
bundle depend on the type of the request.
</p>
<p>
The events supported in FHIR, along with the resources that are included in them, are defined below. 
</p>
<p>
The destination application processes the request and returns one or more response messages 
which are also a <a href="extras.html#bundle">bundle</a> of resources
<a href="extras.html#tags">identified by the tag</a> "http://hl7.org/fhir/tag/message", with the first 
resource in the bundle being a <a href="#resource">Message</a> resource with a response
section that reports the outcome of processing the message and any additional response 
resources required. 
</p>

<h2>Basic Messaging Assumptions</h2>

<p>
This specification assumes that content will be delivered from one application
to another by some delivery mechanism, and then a response will be returned 
to the source application. The exact mechanism of transfer is irrelevant to
this specification, but may include file transfer, http based transfer, MLLP
(HL7 minimal lower layer protocol), MQ series messaging or anything else. 
The only requirement for the transfer layer is that requests are sent to 
a known location and responses are returned to the source of the request. 
This specification considers the source and destination applications as logical
entities, and the mapping from logical source and destination to implementation
specific addresses is outside the scope of this specification.
</p>

<p>
In principle, source applications are not required to wait for a response to 
a transaction before issuing a new transaction. However in many cases, the 
messages in a given stream are dependent on each other, and must be sent and 
processed in order. In addition, some transfer methods may require sequential 
delivery of messages.
</p>

<p>
This specification assumes that content will be delivered from one application to 
another by some delivery mechanism, and then one or more responses will be returned 
to the source application. The agreements around the content of the messages and
the behavior of the two applications the "contract" that describes the exchange.
The contract will add regional and local agreements to the rules defined in this 
specification.
</p>
<p>
This specification ignores the existence of interface engines and message 
transfer agents that exist between the <i>source</i> and <i>destination</i>. 
Either they are transparent to the message/transaction content and irrelevant 
to this specification, or they are actively involved in manipulating the message 
content (in particular, the source and destination headers are often changed). 
If these middleware agents are modifying the message content, then they become
responsible for honoring the contract that applies (including applicable profiles) 
in both directions.
</p>

<h3>Message Identifiers</h3>
<p>
An incoming message contains two identifiers: the envelope id 
(<a href="extras.html#bundles">feed</a>.id) and the <a href="message.html">message</a>.identifier. 
Each time a new message is created, it SHALL be assigned an identifier that is 
unique within that message stream. Note that since message streams are often 
merged with other streams, it is recommended that the identifier should be globally 
unique. This can be achieved by using a UUID or an OID or appropriately 
chosen URI with a serially incrementing number. Each time a message is sent, 
the bundle identifier (feed.id) should be changed to a new value. 
</p>
<p>
When a receiver receives and processes the message, it responds with a 
new message with a new identifier, wrapped in a bundle which also has a new id. 
The response message also quotes the request message identifier so that the source
system can relate the response to its request.
</p>

<a name="reliable"> </a>
<h3>Absence of Reliable Messaging</h3>
<p>
Some of the message delivery mechanisms mentioned above are reliable delivery
systems - the message is always delivered, or an appropriate error is returned
to the source. However most implementations use methods which do not provide
reliable messaging, and either the request or the response can get lost in transit.
FHIR messaging describes a simple approach that receivers should conform to in 
order to handle the absence of reliable messaging that maintains predictable 
functionality.
</p>
<p>
When considering the issue of reliable messaging, the source application 
should consider whether the message is a message of consequence, or 
a message of currency. A message of consequence is one where the message
requests a change that should not be processed more than once, and where
the sender needs the response that results from processing the message.
A message of currency is where the correct response is the very latest 
information available. Typically, this is status information. Some 
messages fit into neither category - the response does not particularly
matter. Usually these are notification messages.
</p>
<p>
In order to enable these processing rules, and to benefit from them, the 
original sender of the message SHALL do the following when it receives
no response to a message within a configured timeout period:
</p>
<table class="grid">
 <tr><td>Consequence</td><td>Resend the same message (including with the same identifier) with the same envelope id</td></tr>
 <tr><td>Currency</td><td>Resend the same message (including with the same identifier) with a different envelope id</td></tr>
 <tr><td>Neither</td><td>Resend the same message (including with the same identifier) with a different envelope id</td></tr>
</table>
<p>
When a receiver declares that it implements reliable answers, it SHALL check the 
incoming envelope id and message identifier against a cache of previously received messages. 
The correct action to take depends on what is received:
</p>
<table class="grid">
 <tr><td>Both the envelope id and message identifier have not been received</td><td>This is the normal case, and the message should be processed</td></tr>
 <tr><td>Both envelope and message already received</td><td>The original response has been lost (failed to return to the request issuer), and the original response SHALL be resent</td></tr>
 <tr><td>The message identifier has already been received, but the envelope id is new</td><td>A previously seen message has been resubmitted for processing again. The server may either reprocess the message, or reject the message</td></tr>
 <tr><td>The envelope id has already been received, but the message identifier is new</td><td>This is an error - envelope ids should never be reused</td></tr>
</table>
<p>
The duration period for caching does generally not need to be very long. At a minimum, it 
could be 1 minute longer than the timeout of the sending system, though it may need to 
be longer depending on the re-sending policies of the sending system. 
</p>


<pre>
TODO: describe some use cases
</pre>

<h2>Conformance Statement</h2>
<p>
Applications may only assert conformance to "FHIR messaging" if they 
publish a conformance statement so the claim may be verified. A 
conformance statement lists all the message events supported (either 
as sender or receiver) and for each event, a 
profile that states which resources are bundled (sender), or 
are required to be bundled (receiver), and any rules about the 
information content of the individual resources. The conformance 
statement is a <a href="conformance.html">resource with the name 
"Conformance"</a>. 
</p>

<a name="endpoints"></a>
<h2>Relationship between Messaging and REST</h2>

<p>
As well as this messaging framework documented here, FHIR also defines a 
<a href="http.html">RESTful API</a>. The messaging and RESTful frameworks
are related in that both share the same set of resources on which the operate.
In fact, the basic <i>Message</i> resource (defined below) on which the 
messaging framework is implemented is, itself, a resource that can treated 
in a RESTful approach. 
</p>
<p>
The kinds of functionality that the RESTful API and the messaging framework
offer are very similar; their primary difference is architectural in nature. 
</p>
<p>
For instance, the messaging framework defines an event for notifying that
a administration resource has been created or updated, as does the REST API.
On the other hand, there are differences in the capabilities offered - while
a patient merge can be implemented as a series of RESTful operations performed
by the client that update all resources linked to the patient, when a message 
command to merge patient records are all is processed, the server will do all
the work, and is able to merge in areas not exposed on the RESTful API.
The REST API, however, provides a set of basic operations on all resources
that would need special definitions in the messaging framework - ones that
are not provided.
</p>
<p>
There is no expectation that RESTful systems will need to offer messaging
support, or vice versa, though systems may find it useful to support both 
sets of functionality in order to satisfy a wider range of implementers. 
</p>
<p>
As a resource that can be used with the RESTful framework, the messaging
resource has the normal resource end-point ([base-url]/Message), which is
used to manage a set of static messages resources. This could be used to 
make an archive of past messages available. <b>Creating or updating Message resources
in this fashion does not represent the actual occurrence of any event, nor can it trigger
any logic associated with the actual event.</b> It is just for managing a set of message resources.
</p>
<p>
In, addition, this specification defines the a mailbox ([base-url]/mailbox). This
is a standard named end-point to which messages as <a href="extras.html#bundle">bundles</a>, 
can be sent to a server to indicate that the event identified by the code has occurred - if
that server is also running a REST API. In this case, the end-point returns an HTTP
response with a message response as defined for the particular event, or an error 
indicating that the attempt to process the message was unsuccessful. 
The functionality of this end-point <a href="#mailbox">is described below</a>.
</p>
<p>
Alternatively, messages can be transported between systems using any other method by which 
a stream of bytes (the message bundle) can be moved from one place to 
another. There is no requirement to use HTTP.
</p>


<a name="resource"></a>
</div>
