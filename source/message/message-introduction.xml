<div xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/1999/xhtml ../../schema/xhtml1-strict.xsd" xmlns="http://www.w3.org/1999/xhtml">

<p>
This page describes how FHIR Resources can be used in a traditional messaging context, 
much like HL7 v2. Applications claiming conformance to this framework claim to be 
conformant to "FHIR messaging". 
</p>
<p>
In FHIR messaging, a "request message" is sent from a source application to a destination
application when an event happens. Events mostly correspond to things that happen in the 
real world. The request message consists of a <a href="extras.htm#bundle">bundle</a>
of resources, with the first resource in the bundle being this <i>Message</i> resource. The 
Message resource has a code - the message event - that identifies the nature of the 
request message and carries additional request metadata. The other resources in the 
bundle depend on the type of the request.
</p>
<p>
The events supported in FHIR, along with the resources that are included in them, are defined below. 
</p>
<p>
The destination application processes the request and returns one or more response messages 
which are also a <a href="extras.htm#bundle">bundle</a> of resources, with the first 
resource in the bundle being a <a href="#resource">Message</a> resource with a response
section that reports the outcome of processing the message and any additional response 
resources required. 
</p>

<h2>Basic Messaging Assumptions</h2>

<p>
This specification assumes that content will be delivered from one application
to another by some delivery mechanism, and then a response will be returned 
to the source application. The exact mechanism of transfer is irrelevant to
this specification, but may include file transfer, http based transfer, MLLP
(HL7 minimal lower layer protocol), MQ series messaging or anything else. 
The only requirement for the transfer layer is that requests are sent to 
a known location and responses are returned to the source of the request. 
This specification considers the source and destination applications as logical
entities, and the mapping from logical source and destination to implementation
specific addresses is outside the scope of this specification.
</p>

<p>
In principle, source applications are not required to wait for a response to 
a transaction before issuing a new transaction. However in many cases, the 
messages in a given stream are dependent on each other, and must be sent and 
processed in order. In addition, some transfer methods may require sequential 
delivery of messages.
</p>

<p>
This specification ignores the existence of interface engines and message 
transfer agents that exist between the <i>source</i> and <i>destination</i>. 
Either they are transparent to the message/transaction content and irrelevant 
to this specification, or they are actively involved in manipulating the message 
content. If these middleware agents are modifying the message content, then they become
responsible for honoring the contract that applies (including applicable profiles) 
in both directions.
</p>

<h3>Message Identifiers</h3>
<p>
An incoming message contains two identifiers: the envelope id 
(<a href="extras.htm#bundles">feed</a>.id) and the <a href="message.htm">message</a>.identifier. 
Each time a new message is created, it must be assigned an identifier that is 
unique within that message stream. Note that since message streams are often 
merged with other streams, it is recommended that the identifier should be globally 
unique. This can be achieved by using a UUID or an OID or appropriately 
chosen URI with a serially incrementing number. Each time a message is sent, 
the bundle identifier (feed.id) should be changed to a new value. 
</p>
<p>
When a receiver receives and processes the message, it responds with a 
new message with a new identifier, wrapped in a bundle which also has a new id. 
The response message also quotes the request message identifier so that the source
system can relate the response to its request.
</p>

<a name="reliable"> </a>
<h3>Absence of Reliable Messaging</h3>
<p>
Some of the message delivery mechanisms mentioned above are reliable delivery
systems - the message is always delivered, or an appropriate error is returned
to the source. However most implementations use methods which do not provide
reliable messaging, and either the request or the response can get lost in transit.
FHIR messaging describes a simple approach to handle this that receivers
should conform to in order to maintain predictable functionality even when 
messaging is not reliable.
</p>
<p>
When considering the issue of reliable messaging, the source application 
should consider whether the message is a message of consequence, or 
a message of currency. A message of consequence is one where the message
requests a change that should not be processed more than once, and where
the sender needs the response that results from processing the message.
A message of currency is where the correct response is the very latest 
information available. Typically, this is status information. Some 
messages fit into neither category - the response does not particularly
matter. Usually these are notification messages.
</p>
<p>
In order to enable these processing rules, and to benefit from them, the 
original sender of the message SHALL do the following when it receives
no response to a message within a configured timeout period:
</p>
<table class="grid">
 <tr><td>Consequence</td><td>Resend the same message (including with the same identifier) with the same envelope id</td></tr>
 <tr><td>Currency</td><td>Resend the same message (including with the same identifier) with a different envelope id</td></tr>
 <tr><td>Neither</td><td>Resend the same message (including with the same identifier) with a different envelope id</td></tr>
</table>
<p>
When a receiver declares that it implements reliable answers, it SHALL check the 
incoming envelope id and message identifier against a cache of previously received messages. 
The correct action to take depends on what is received:
</p>
<table class="grid">
 <tr><td>Both the envelope id and message identifier have not been received</td><td>This is the normal case, and the message should be processed</td></tr>
 <tr><td>Both envelope and message already received</td><td>The original response has been lost (failed to return to the request issuer), and the original response must be resent</td></tr>
 <tr><td>The message identifier has already been received, but the envelope id is new</td><td>A previously seen message has been resubmitted for processing again. The server may either reprocess the message, or reject the message</td></tr>
 <tr><td>The envelope id has already been received, but the message identifier is new</td><td>This is an error - envelope ids should never be reused</td></tr>
</table>
<p>
The duration period for caching does generally not need to be very long. At a minimum, it 
could be 1 minute longer than the timeout of the sending system, though it may need to 
be longer depending on the re-sending policies of the sending system. 
</p>


<pre>
TODO: describe some use cases
</pre>

<h2>Conformance Statement</h2>
<p>
Applications may only claim to be conformant to "FHIR messaging" if they
publish a conformance statement so the claim may be verified. A conformance
statement lists all the message events 
they support (either as sender or receiver) and for each event, a 
profile that states which resources are bundled (sender), or 
are required to be bundled (receiver), and any rules about the 
information content of the individual resources. The conformance 
statement is a <a href="conformance.htm">resource with the name 
"Conformance"</a>. 
</p>

<a name="endpoints"></a>
<h2>Messaging End-points</h2>

<p>There are two end-points defined for a RESTful server that supports Messages:</p>

<ul>
 <li>[baseurl]/message/: a normal RESTful end point for message resources</li> 
 <li>[baseurl]/mailbox: an address at which messages can be delivered</li> 
</ul>
<p>
The first end-point ([baseurl]/message/) is used for working within the message contents, for instance, for building 
messages piecemeal or for auditing received messages. <b>Creating or updating Message resources
to this end point does not represent the actual occurrence of any event, nor can it trigger
any logic associated with the actual event.</b> It is just for managing message resources.
</p>
<p>
The second end-point ([baseurl]/mailbox) is used for actually sending messages as <a href="extras.htm#bundle">bundles</a>, to indicate 
that the event identified by the code has occurred. The end-point responds with a message
response as defined for the particular event, or an error indicating that the attempt to 
process the message was unsuccessful. The functionality of this end-point <a href="#mailbox">is described below</a>.
</p>
<p>
Note: While the end-points above are defined for use with message resources and for delivering
messages to a RESTful server, it is not necessary to use them; messages may be transported 
between systems using any method desired.
</p>

<a name="resource"></a>
</div>
