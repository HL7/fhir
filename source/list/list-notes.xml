<div xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/1999/xhtml ../../schema/fhir-xhtml.xsd" xmlns="http://www.w3.org/1999/xhtml">

<a name="query"></a>
<h2>Querying Lists vs. the underlying resources</h2>
<p>
When a client system is interested in a patient's medications, allergies, problems, 
family history or other information typically handled via <b>List</b>, they have three options:
</p>
<ul>
  <li>They can query for List instances of the appropriate type; or </li>
  <li>They can query against the resource endpoint for the resources that make up the list
    (e.g. <a href="allergyintolerance.html">AllergyIntolerance</a>, <a href="condition.html">Condition</a>
    <a href="medicationusage.html">MedicationUsage</a>, etc.), possibly filtering by time, etc.</li>
  <li>They can query against the resource endpoint, requesting one of the 
  <a href="http://build.fhir.org/lifecycle.html#current">Current</a> resource lists</li>
</ul>
<p>
Querying directly against the clinical resource endpoints will provide an un-curated view of information.  
A server may contain records that were part of various clinical documents, referrals and other submission
sources that might not necessarily be considered wholly accurate or current, but which must be retained "as is"
to provide a record of what data was received or seen by a clinician at a particular point in time.  
</p>
<p>
On the 
other hand, lists are almost always curated.  They will include only those records deemed by the author of
the list to be both current and accurate.  This can be both an advantage and a disadvantage.  Lists are
less likely to include irrelevant content, but there's a risk that they won't be completely up-to-date
(new content may have been added that's more recent than when a given list was last updated).  It's also possible
that the list author's notion of "current" or "relevant" may differ from the perspective of the user performing
the query.  Also, there's the challenge that multiple lists may exist, with different author and different perspectives
</p>
<p>
The <a href="http://build.fhir.org/lifecycle.html#current">Current</a> resource lists get around the problem
of multiple lists and make it clear which list is considered authoritative, but not all systems will necessarily
support this capability, and there's still the possibility that the list won't be completely up-to-date or will
exclude information that is of interest to the querying system.
</p>
<p>
There's no right and wrong way to retrieve allergy, medication and other such information.  Sometimes retrieving
the "current" medication list will provide the best results, sometimes querying the raw records will provide
better results.  Sometimes providing the contents of the list plus a filtered view of the raw records may give
the most useful information.  Determining the most appropriate approach will depend on the needs of the user as well
as the types of data sources for information held on the server and patterns of list maintenance.  Client systems may
well need to adapt their behavior in different environments if they can't count on consistent server behavior.
</p>

<a name="order"></a>
<h2>List Order</h2>
<p>
All lists are considered ordered - the order in which items literally 
appear in the list may be an important part of the meaning of the list. 
Reordering the items in a list may change the meaning of the list. 
</p>
<p>
While a list always contains an ordered set of items, the significance
of the order may be unknown, or it may be insignificant. As an 
example, consider a list of patients for a practitioner to visit.
The list may be in the order in which the patients are to be visited, 
or it may be an unsorted list of patients to be visited
in any order.
</p>
<p>
The List resource has an <code>orderedBy</code> element that, if
present, specifies the meaning of the item order. Note, however,
that the meaning of the order may be known implicitly rather 
than specified in the <code>orderedBy</code> element.
</p>
<p>
Applications SHOULD NOT reorder the elements in a list unless they
understand the impact of this on the meaning of the list.
</p>

<a name="status"></a>
<h2>List Mode &amp; Item Deleted</h2>

<p>
There are several different kinds of uses for a List resource:
</p>
[%codelist http://hl7.org/fhir/list-mode%]

<p>
The most common mode is "snapshot" - a list that is accurate 
within the context it is used in but not current or maintained
after that; e.g., medications on discharge in a discharge summary.
Note that these lists usually have a status of 'current' - they
were current when they were prepared. Some kinds of lists may 
be explicitly retired (particularly if mode = working), but most 
will not be maintained after creation. 
</p>
<p>
A change list may include deleted items. Some examples of change lists are 
a reconciled list of allergies, a discharge medication list and a list 
with new, updated and deleted items in it - though these might not be lists that 
include changes (this is an implementation decision). In order to ensure that 
the list is safe to process, any item where the flag implies that the 
item has actually been deleted SHALL have the deleted element set to true. 
</p>
<p>
Note that there is no implication about the status of a resource that has been deleted.
The only statement that is made is that the resource has been dropped from the list. 
However, applications should ensure that the implication of adding or deleting items
from the list is consistent with the logical status of the resource and its contents.
</p>
<p>
A proper use of List.mode = "changes" with a deleted resource is in a medications list 
section of a discharge summary. See Example "med-list". An improper use would be if the list 
was a working list of patient medications in a clinical tracking system, and list item
flags were used to implement version tracking history within the resource.
</p>

<a name="size"></a>
<h2>Efficiency and size issues</h2>
<p>
Some kinds of <code>List</code> resources may grow to a considerable size, and 
handling them may require more care than typical resources. Some approaches 
to consider include: 
</p>
<ul>
 <li><a href="graphql.html#list">Reading portions of the list</a> resource using GraphQL</li>
 <li>Using the <a href="search.html#list">_list</a> parameter rather than retrieving the list</li>
 <li>Changing the resource using <a href="http.html#patch">the PATCH interaction</a> rather than PUTting the whole resource</li>
</ul>

<a name="narrative"></a>
<h2>Narrative Content</h2>

<p>
The narrative portion of the List resource should contain a summary 
of the items in the list, their key information, along with a human-readable 
summary of their flags (if present). The narrative may be generated
from the data content and/or narrative of the resources referred to in
the list, or it may be a narrative written by a human, which is partially or
completely matched by structured data in the linked resources. The human
written narrative may be the only content if the list has no entries
(which would equate to a narrative only section in a document).
</p>
<p>
An HTML table is the recommended approach, though this is not required.
Each List.item should appear in the narrative for the resource; i.e. it 
SHALL NOT be necessary to retrieve the list items in order to have a 
human-readable rendering of the content. In addition, if the List.text.status is 
"generated", then the narrative should not suggest the list 
contains items for which there are no corresponding List.item elements. 
If the list has flags, the representation should make clear use of visual 
hints (borders, lines, bullet marks, etc.) to ensure that human readers 
do not get confused about which flags belong with which item on space-poor 
displays (e.g. to prevent wrapping from separating the flags from the items).
</p>

<p>
Note that when a List resource is used in a <a href="documents.html">Document</a>,
the narrative of the list is part of the attested content of the document.
</p>

<p>
In a dynamic environment, the narrative content of a list will be limited to the
version of the linked resources at the time the list was last updated. It may be
even earlier if the narrative isn't updated to reflect the most recent version
of all referenced resources at each update.  Best practice for 'working' lists is to update 
the narrative to reflect the most recent content of all list elements each time the list
is revised.  Lists should therefore not be
relied on as a real-time view of the referenced content.  There are a few
possible approaches to work around this issue:
</p>
<ul>
 <li>Provide minimal information about the listed resources, possibly limited to only a link.  
 (Not recommended as this severely limits the usefulness of the narrative and is particularly
 problematic for things like documents where the only attested content might be the List
 narrative.)</li>
 <li>Include only "generated" narrative, so the retriever can easily generate their own "current"
 view of the list by retrieving the referenced resources, ignoring the fixed narrative.</li>
 <li>The server hosting the list can subscribe to all referenced resources and auto-update the
 narrative each time one of the referenced resources changes (or at least on a semi-frequent basis).</li>
</ul>

<a name="emptyReason"></a>
<h2>Empty Reason</h2>

<p>
If a list is empty, there could be several different reasons why this is so. For example:
</p>
<ul>
 <li>There are no appropriate entries for the list (i.e. the patient has no known medications/allergies/history)</li>
 <li>The sender (human or system) deemed that these were not related to this context of patient care (usually for privacy related reasons)</li>
 <li>The source system doesn't support these types of entries</li>
 <li>The information to populate the list wasn't gathered - i.e. "Not asked"</li>
</ul>
<p>
Given these possibilities - especially the common and significant first case - for many kinds of lists, source systems SHOULD 
provide an empty reason if the list is empty. Because of the importance of the first case, the 
<a href="valueset-list-empty-reason.html">special value "nil-known"</a> should be used when 
there are no (significant) entries in this context of care. Note that this concept is 
sometimes described differently, such as "patient denies taking medications", or 
"patient was unable to identify any relevant medical history".
</p>
<p>
When receiving a list, systems should not assume that the list is complete (some entries may 
have been withheld for a variety of reasons), unless there are specific trading partner
arrangements in place or, if the list is empty, that there are actually nil known, 
unless the "nil-known" code is present.
</p>
<p>
If a list is empty, the narrative should contain text equivalent to the empty reason.
</p>
<p>
Note that there are also many kinds of lists that can be empty with no need for an 
empty reason (<a href="list-example-simple-empty.html">example</a>)
</p>

</div>
