

A simple CD representing a code:

<Coding>
  <code>784.0</code>
  <system>oid:2.16.840.1.113883.6.42</system>
  <display>Headache</display>
</Coding>

--

In a codeableConcept with no translation to SNOMED CT:

<valueCodeableConcept>
  <coding>
   <code>784.0</code> 
   <system>2.16.840.1.113883.6.42</system>
   <display>Headache</display>
  </coding>
  <coding> 
    <system>http://snomed.info/sct</system>
  </coding>
</CodeableConcept>

--

An attachment that  contains the plain text "this is binary content":
<Attachment>
  <mimeType>text/plain; charset=UTF-8</mimeType>
  <data>dGhpcyBpcyBiaW5hcnkgY29udGVudA==</data>
</Attachment>

--

A reference to a jpeg image on the web:
<Attachment>
  <mimeType>image/jpg</mimeType>
  <url>http://www.tempuri.org/XXXXXXXXXXX</url>
</Attachment>

--

XML content with unknown character set:
<Attachment>
  <mimeType>text/xml</mimeType>
  <data>PHBhcmVudD4NCiAgPGNoaWxkPlRoaXMgaXMgc29tZSB0ZXh0IGluI
     HRoZSBjaGlsZDwvY2hpbGQ+
     DQogIFRoaXMgaXMgc29tZSB0ZXh0IGluIHRoZSBwYXJlbnQNCjwvcG
     FyZW50Pg==</data>
</Attachment>

--

A home (H) phone number for a person who works at home (WP) that is capable of receiving both voice and 
fax calls. 

<Contact>
 <system>phone</system>
 <value>+1 (555) 675 5745</value>
 <use>home</use>
</Contact>
<Contact>
 <system>fax</system>
 <value>+1 (555) 675 5745</value>
 <use>work</use>
</Contact>

ISO 21090 allows you to more directly combine these notions:

<example xsi:type="TEL" value="tel:+15556755745" use="H WP" capabilities="voice fax"/>

FHIR does not allow these uses to combined, since this is not how systems generally work. An ISO 21090 extension for this:

<Contact id="a1">
 <system>phone</system>
 <value>+1 (555) 675 5745</value>
 <use>home</use>
</Contact>

--

7.6.2.8.3  Unknown home phone number 
<example xsi:type="TEL" nullFlavor="UNK" value="tel:" use="H"/>
An unknown home (H) phone number.
7.6.2.8.4  Work phone with extension 
<example xsi:type="TEL" value="tel:+1(555)6755745;postd=545" use="WP"/>
A work phone with an extension specified. Note that extensions are not the only use for the post-dial 
sequence. Consult RFC 2806  [http://www.ietf.org/rfc/rfc2806.txt]  for further details. The canonical form of this 
example is:
<tel value="tel:+15556755745;postd=545" use="WP"/> 
7.6.3  TEL.URL
7.6.3.1  Description
A flavour that constrains TEL
TEL.URL constrains TEL so that it SHALL point to a locatable resource that returns binary content. 
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  45
7.6.3.2  Invariants
no use codes;
the URL scheme SHALL be file, nfs, ftp, cid (for SOAP attachments), http, or https.
OCL for Invariants:
inv "no use": use->isEmpty
inv "schemes": (scheme("file") or scheme("ftp") or 
scheme("cid") or scheme("http") or scheme("https") 
or scheme("nfs"))
7.6.4  TEL.PERSON
7.6.4.1  Description
A flavour that constrains TEL.
TEL.PERSON constrains TEL so that it SHALL refer to a method of communication with a person.
7.6.4.2  Invariants
the URL scheme SHALL be tel, x-text-fax, x-text-tel or mailto.
OCL for Invariants:
inv "Personal Address": scheme("tel") or 
scheme("x-text-fax")or scheme("x-text-tel") or 
scheme("mailto")
7.6.5  TEL.PHONE
7.6.5.1  Description
A flavour that constrains TEL.PERSON
TEL.PHONE  constrains TEL.PERSON so it SHALL refer to some telephone based communication system with 
a person.
7.6.5.2  Invariants
the URL scheme SHALL be tel, x-text-fax, or x-text-tel.
OCL for Invariants:
inv "Phone": scheme("tel") or scheme("x-text-fax") or 
scheme("x-text-tel")
7.6.6  TEL.EMAIL
7.6.6.1  Description
A flavour that constrains TEL.PERSON
TEL.EMAIL constrains the TEL.PERSON type to be an email address. 
ISO/FDIS 21090:2009(E)
46  © ISO 2009 – All rights reserved
7.6.6.2  Invariants
the URL scheme SHALL be mailto.
OCL for Invariants:
inv "email only": scheme("mailto")
7.6.7  II (Instance Identifier)
7.6.7.1  Description
Specializes ANY.
An identifier that uniquely identifies a thing or object.
EXAMPLES:  object identifier for HL7 RIM objects, medical record number, order id, service catalogue  item  id,  vehicle 
identification number (VIN), etc. Instance identifiers are usually defined based on ISO object identifiers.
An identifier allows someone to select one record, object or thing from a set of candidates. Usually an 
identifier alone without any context is not usable. Identifiers are distinguished from concept descriptors as 
concept descriptors never identify an individual thing, although there may sometimes be an individual record 
or object that represents the concept.
Information  processing entities claiming direct or indirect conformance  shall  never assume that receiving 
applications can infer the identity of issuing authority or the type of the identifier from the identifier or 
components thereof.
7.6.7.2  ISO/IEC 11404 syntax
type II = class (
validTimeLow : characterstring,
validTimeHigh : characterstring,
controlInformationRoot : characterstring,
controlInformationExtension : characterstring,
nullFlavor : NullFlavor,
updateMode : UpdateMode,
flavorId : Set(characterstring),
root : characterstring,
extension : characterstring,
identifierName : characterstring,
displayable : boolean,
scope: IdentifierScope,
reliability : IdentifierReliability
)
7.6.7.3  Attributes
7.6.7.3.1  root : Uid: A unique identifier that guarantees the global uniqueness of the instance identifier.
If root is populated, and there is no nullFlavor or extension, then the root is a globally unique identifier in its 
own right. In the presence of a non-null extension, the root is the unique identifier for the "namespace" of the 
identifier in the extension.  This does  not necessarily correlate with the organization that manages the issuing 
of the identifiers. A given organization may manage multiple identifier namespaces, and control over a given 
namespace may transfer from organization to organization over time while the root remains the same.
This field can be either a DCE UUID, an Object Identifier (OID), or a special identifier taken from lists that may 
be published by ISO or HL7.  
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  47
Comparison of root values is always case sensitive. UUIDs shall be represented in upper case, so UUID case 
should always be preserved.
The root shall not be used to carry semantic meaning – all it does is ensure global computational uniqueness.
7.6.7.3.2  extension: String: A character string as a unique identifier within the scope of the identifier root.
The root and extension scheme means that the concatenation of root and extension shall be a globally unique 
identifier for the item that this II value identifies.
Some identifier schemes define certain style options to their code values. For example, the U.S. Social 
Security Number (SSN) is normally written with dashes that group the digits into a pattern "123-12-1234". 
However, the dashes are not meaningful and an  SSN can also be represented as "123121234" without the 
dashes. In the case where identifier schemes provide for multiple representations, HL7 or ISO may make a 
ruling about which is the preferred form and document that ruling where that respective external identifier 
scheme is recognized.
If no extension attribute is provided in a non-null II, then the root is the complete unique identifier. If the root is 
not a complete unique identifier, and the extension is not known, then the  II shall have a nullFlavor even if the 
root is populated.
7.6.7.3.3  identifierName : String: This is a human-readable name for the namespace represented in the 
root.
NOTE  It is a descriptive name for the actual namespace. e.g. "California, U.S. Driver's License Number, 1970 -".
IdentifierName does  not  refer to the organization which  issued the identifier (e.g. California Dept. of Motor 
Vehicles). It is intended for use as a human-readable label when an identifier  is to  be displayed to a human 
user where an OID would not be meaningful.
The  identifier name has no computational value. IdentifierName can never modify the meaning of the root 
attribute. The purpose of the identifer name is to assist an unaided human interpreter of an II value to interpret 
the authority. Applications  shall not  attempt to perform any decision-making, matching, filtering or other 
processing based on the presence or value of this property. It is for display and development assistance only. 
All decision logic  shall  be based solely on the root and extension properties. Information  processing entities 
claiming direct or indirect conformance  may  choose not to implement  identifierName  but  shall not  reject 
instances because identifierName is present.
NOTE  In general, it should only be used when an extension is present, allowing for a display such as "California, U.S. 
Driver's License Number, 1970-: 123456789". There are absolutely no guidelines for the contents of this text other than it 
should be completely descriptive of the namespace. E.g. "Driver's License" or even "California Driver's License" would not 
be ideal. However, formatting, capitalization, whitepace, language, etc. are completely up to the sender.
7.6.7.3.4  displayable : Boolean: If the identifier is intended for human display and data entry (displayable 
= true) as opposed to pure machine interoperation (displayable = false).
Information  processing entities claiming direct or indirect conformance  may  choose not to implement 
displayable but shall not reject instances because displayable is present. 
ISO/FDIS 21090:2009(E)
48  © ISO 2009 – All rights reserved
7.6.7.3.5  scope: IdentifierScope : The scope in which the identifier applies to the object with which it is 
associated.
If populated, the value of this attribute  shall  be taken from the HL7 IdentifierScope code system. The current 
values are:
IdentifierScope Enumeration. OID: [not yet assigned]
1   BUSN
Business 
identifier
An identifier whose scope is defined by business practices 
associated with the object. In contrast to the other scope 
identifiers, the scope of the use of the id is not necessarily 
restricted to a single object, but may be re-used for other 
objects closely associated with the object due to business 
practice.
1   OBJ  Object identifier
The identifier associated with a particular object. It remains 
consistent as the object undergoes state transitions.
1   VER  Version identifier
An identifier that references a particular object as it existed 
at a given point in time.
The identifier shall change with each state transition on the 
object. I.e. The version identifier of an object prior to a 
"suspend" state transition is distinct from the identifier of 
the object after the state transition. Each version identifier 
can be tied to exactly one ControlAct event which brought 
that version into being (though the control act may never be 
instantiated). Applications that do not support versioning of 
objects shall ignore and not persist these ids to avoid 
confusion resulting from leaving the same identifier on an
object that undergoes changes.
1   VW
View specific 
identifier
An identifier for a particular snapshot of a version of the 
object.
This identifies a view of the business object at a particular 
point in time, and as such identifies a set of data items that 
can be digitally signed and/or attested. This is in contrast to 
the version identifier which identifies the object at a specific 
time, but not the amount of information being asserted 
about the object. This identifier would be changed when a 
transformation of the information is performed (e.g. to add 
code translations, to provide a simplified textual rendering, 
or to provide additional information about the object as it 
existed at the specific point in time) 
ISO/IEC 11404 syntax for identifierScope attribute
type IdentifierScope = enumeration (BUSN, OBJ, VER, VW)
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  49
7.6.7.3.6  reliability: IdentifierReliability : The reliability with which this identifier is known. This attribute 
may be used to assist with identifier matching algorithms.
If populated, the value of this attribute SHALL be taken from the HL7 IdentifierReliability code system. The 
current values are:
IdentifierReliability Enumeration. OID: [not yet assigned]
1   ISS  Issued by system
The identifier was issued by the system responsible for 
constructing the instance.
1   VRF
Verified by 
system
The identifier was not issued by the system responsible for 
constructing the instance, but the system that captured the id 
has verified the identifier with the issuing authority, or with 
another system that has verified the identifier.
1   UNV
Unverified by 
system
The identifier was provided to the system that constructed the 
instance, but has not been verified. e.g. a driving licence 
entered manually into a system by a user.
ISO/IEC 11404 syntax for identifierReliability attribute 
type IdentifierReliability = enumeration (ISS, VRF, UNV)
7.6.7.4  Equality
Two instance identifiers are equal if and only if they are not nullFlavored, their root is equal, and their 
extensions are both null or equal. The displayable, identifierName, scope and reliability properties are ignored, 
though the scope and reliability properties may be used to determine whether the equality is significant in a 
given context.
7.6.7.5  Invariants
a root shall be present if the II is not nullFlavored.
OCL for Invariants:
inv "root is required": isNotNull implies root.oclIsDefined
7.6.7.6  ISO 22220 Comments
ISO 22220 defines four fields for subject of care identifiers: designation, geographic, is suer, and type. Only the 
first, the designation, matches the scope of the II type. The designation is defined as :
a  number or code assigned to a person by an organization, establishment, agency or domain in order 
to uniquely identify that person as a subject of health care within that health care organization, 
establishment, agency or domain.
II fulfills this role by providing a unique identifier. When an II is used to identify a subject of care, the context of 
use should provide support for the scope, issuer and type properties.
NOTE  The II provides a field called "IdentifierName" but this field does not provide formal support for identifying the 
issuer of the identifier.  
ISO/FDIS 21090:2009(E)
50  © ISO 2009 – All rights reserved
7.6.7.7  Examples
7.6.7.7.1  Driver's license
<example xsi:type="II" root="2.16.840.1.113883.12.333" extension="45634353344" 
reliability="UNV" scope="BUSN"/>
The OID 2.16.840.1.113883.12.333 has been issued by HL7 as a generic driver's license authority. The 
extension contains the actual driver's license number. The reliability is UNV –  the value has been entered into 
the system, but the system cannot verify the number. The scope of the driver's license is BUSN, because the 
driver's license number may be used to identify several different objects associated with the same patient. 
This example uses the generic  OID  for a driver's license authority, but it is recommended not to use this in 
practice if possible because there are many driver's license authorities, and their issuing numbers will clash.
7.6.7.7.2  US SSN
<example xsi:type="II" root="2.16.840.1.113883.4.1" extension="123456789" 
reliability="UNV" scope="BUSN"/>
Though the identifier is often formatted as 123-45-6789, the "-" should be removed so the right format is 
123456789.
7.6.7.7.3  NHS Number
<example xsi:type="II" root="2.16.840.1.113883.2.1.4.1" extension="9999999484" 
reliability="VRF" scope="BUSN"/>
This is an example of an NHS number from England/Wales. The NHS root OID is 2.16.840.1.113883.2.1.4.1. 
Because the NHS number is reused in multiple instances of a clinical document for the same patient, and for 
many other records, it will generally not have scope = OBJ  –  except on the NHS master repository itself. 
Usually the scope will be BUSN. Most NHS systems maintain patient information interfaces with the master 
NHS patient registry, or with other systems that do, so the reliability in these cases is ?VRF?.
7.6.7.7.4  Australian Medicare Number 
<example xsi:type="II" root="1.2.36.174030967" extension="1234567892" 
reliability="VRF" scope="OBJ"/>
This is an  example of an  Australian medicare number. The root is the business root oid for the  issuing 
authority HIC. (This should be a further qualified oid, but they have not, as yet, published their own scheme for 
their oid space.) The reliability is "VRF" because the sending system has checked that this is the correct 
identity for  the patient with HIC itself using one of their electronic interfaces, and the scope is OBJ because 
this number is only used for identifying the account associated with this patient's family by the HIC.
7.6.7.7.5  Record identifier 
<example xsi:type="II" root="D6A7AB37-4220-4D80-9052-8A4959A203E3" 
reliability="ISS" scope="VER"/>
A UUID issued by the sending system associated with the particular version of the record being represented 
in the instance.
7.6.7.7.6  Lab number 
<example xsi:type="II" root="2.16.840.1.113883.19.5.34" extension="2345344" 
reliability="ISS" scope="OBJ"/> 
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  51
A laboratory  identifier that identifies the report. This has scope=?OBJ? and will be retained throughout the lab 
workflow as the sample is received, processed, reported and signed. This lab number is reported by the 
laboratory system itself which issued the identifier.
7.6.7.7.7  ISO 13606 record component id 
<example xsi:type="II" root="2.16.840.1.113883.19.5.462" extension="976295765" 
reliability="VRF" scope="VER"/>
ISO 13606-1 rc_id (record component id),  which is persisted across EHR repositories but not re-used across 
different versions of the record, and not  re-used between workflow state changes. Hence the scope is "VER". 
The reliability is VRF; in the context of  ISO 13606 the use of ISS is not recommended as it can only be used 
by the primary issuing system, and this makes it unfeasible to attest to the record.
The primary use of ISS is in patient management etc, where it can be used to help build 
linking/unlinking/merging workflows.
7.6.7.7.8  Message snapshot 
<example xsi:type="DSET_II">
<item root="2.16.840.1.113883.19.5.971" extension="763491" 
reliability="VRF" scope="OBJ"/>
<item root="2.16.840.1.113883.19.5.972" extension="351324" 
reliability="VRF" scope="VER"/>
<item root="0282CA34-2E4E-4B9D-82A5-BD2BF8497940"
reliability="ISS" scope="VW"/>
</example>
This example shows the full use of a DSET(II) in a message. The message carries a snapshot of an object in 
a class in the message, and the class has an attribute id : DSET(II). The information in in the class that carries 
the DSET(II) attribute is based on the object 763491 in the OID space 2.16.840.1.113883.19.5.971. The 
version the snapshot is based on is identified by the identifier 351324 in the OID space 
2.16.840.1.113883.19.5.972.  Finally, the snapshot is given its own UUID identifier 0282CA34-2E4E-4B9D-82A5-BD2BF8497940, which may be used if a system wished to record that particular snapshot it its audit trail.
7.7  Name and address datatypes
7.7.1  Overview
These datatypes provide support for names and addresses. See Figure 6. 
ISO/FDIS 21090:2009(E)
52  © ISO 2009 – All rights reserved
Figure 6 — Name and address datatypes
7.7.2  XP (name or address part)
Abstract private type
7.7.2.1  Description
A part of a name or address. Each part is a character string that may be coded, and that also may have a 
nullFlavor. The string content shall always be provided whether a code is provided or not. 
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  53
7.7.2.2  ISO/IEC 11404 syntax
type XP = class (
nullFlavor : NullFlavor,
value : characterstring,
code : characterstring,
codeSystem : characterstring,
codeSystemVersion : characterstring,
language : characterstring,
)
7.7.2.3  Attributes
7.7.2.3.1  nullFlavor : NullFlavor: If the part is not a proper value, indicates the reason.
For further information concerning nullFlavor, see 7.3.3.3.1.
7.7.2.3.2  value : String: The actual string value of the part. If no nullFlavor is provided, some content SHALL 
be present in this attribute.
7.7.2.3.3  code : String: A code assigned to the part by some coding system, if appropriate.
7.7.2.3.4  codeSystem : String: The code system from which the code is taken.
The choice of coding system depends on the part type defined in the concrete specializations. The 
codeSystem shall be populated if a code is populated.
7.7.2.3.5  codeSystemVersion : String: The version of the coding system, if required.
The codeSystem shall be populated if a codeSystemVersion is populated.
7.7.2.3.6  language: Code:  The human language of the content. Valid codes are taken from the IETF 
RFC 3066. If this attribute is null, the language may be inferred from elsewhere, either from the context or 
from unicode language tags, for example.
While parts may be assigned a language, the meaning of the part  is not dependent on the language, and 
applications shall not be required to indicate the linguistic origin of any name or address part.
7.7.2.4  Equality
There is no definition of equality for values of type XP.
7.7.2.5  Invariants
if code has a value then codeSystem shall have a value;
codeSystemVersion can only have a value if codeSystem has a value.
OCL for Invariants:
def: let isNull : Boolean = nullFlavor.oclIsDefined
def: let isNotNull : Boolean = not isNull
inv "code requires codeSystem": code.oclIsDefined implies 
codeSystem.oclIsDefined
inv "codeSystemVersion only if codeSystem": 
codeSystemVersion.oclIsDefined implies 
codeSystem.oclIsDefined
ISO/FDIS 21090:2009(E)
54  © ISO 2009 – All rights reserved
7.7.3  ADXP (address part)
7.7.3.1  Description
Specializes XP.
A part that may have a type-tag signifying its role in the address. Typical parts that exist in about every 
address are street, house number or post box, postal code, city, country but other roles may be defined 
regionally, nationally, or on an enterprise level (e.g. in military addresses).
Addresses are usually broken up into lines, which may be indicated by special line-breaking delimiter 
elements (e.g., DEL).
7.7.3.2  ISO/IEC 11404 Syntax
type ADXP = class (
nullFlavor : NullFlavor,
value : characterstring,
code : characterstring,
codeSystem : characterstring,
codeSystemVersion : characterstring,
language : characterstring,
type : AddressPartType,
)
7.7.3.3  Attributes
7.7.3.3.1  type : AddressPartType: Whether an address part names the street, city, country, postal code, 
post box, etc.
If the type is NULL the address part is unclassified and would simply appear on an address label as is.
If populated, the value of this attribute shall be taken from the HL7 AddressPartType code system. The current 
values are:
AddressPartType Enumeration. OID: 2.16.840.1.113883.5.16
1   AL  Address line
An address line is for either an additional locator, a delivery 
address or a street address. An address generally has only a 
delivery address line or a street address line, but not both.
2    ADL
Additional 
locator
This can be a unit designator, such as apartment number, 
suite number or floor. There may be several unit designators 
in an address (e.g., "3rd floor, Appt. 342"). This can also be a 
designator pointing away from the location, rather than 
specifying a smaller location within some larger one 
(e.g., Dutch "t.o." means "opposite to" for house boats located 
across the street facing houses).
3    UNID  Unit identifier
The number or name of a specific unit contained within a 
building or complex, as assigned by that building or complex.
3    UNIT
Unit 
designator
Indicates the type of specific unit contained within a building or 
complex, e.g. apartment, floor.
2    DAL
Delivery 
address line
A delivery address line is frequently used instead of breaking 
out delivery mode, delivery installation, etc. An address 
generally has only a delivery address line or a street address 
line, but not both. 
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  55
3    DINST
Delivery 
installation 
type
Indicates the type of delivery installation (the facility to which 
the mail will be delivered prior to final shipping via the delivery 
mode) e.g., post office, letter carrier depot, community mail 
centre, station, etc.
3    DINSTA
Delivery 
installation 
area
The location of the delivery installation, usually a town or city, 
and only required if the area is different from the municipality. 
Area to which mail delivery service is provided from any postal 
facility or service such as an individual letter carrier, rural route 
or postal route.
3    DINSTQ
Delivery 
installation 
qualifier
A number, letter or name identifying a delivery installation,
e.g., for Station A, the delivery installation qualifier would be 
"A".
3    DMOD  Delivery mode
Indicates the type of service offered, method of delivery, e.g., 
post office box, rural route, general delivery, etc.
3      DMODID
Delivery mode 
identifier
Represents the routing information such as a letter carrier 
route number. It is the identifying number of the designator 
(the box number or rural route number).
2    SAL
Street address 
line
A street address line is frequently used instead of breaking out 
building number, street name, street type, etc. An address 
generally has only a delivery address line or a street address 
line, but not both.
3    BNR
Building 
number
The number of a building, house or lot alongside the street. 
Also known as "primary street number". This does not number 
the street but rather the building.
4    BNN
Building 
number 
numeric
The numeric portion of a building number.
4    BNS
Building 
number suffix
Any alphabetic character, fraction or other text that may 
appear after the numeric portion of a building number.
3    STR  Street name  The name of the street, including the type.
4    STB
Street name 
base
The base name of a roadway or artery recognized by a 
municipality (excluding street type and direction).
4    STTYP  Street type
The designation given to the street. (e.g. Street, Avenue, 
Crescent, etc.).
3    DIR  Direction  Direction (e.g., N, S, W, E).
2    INT  Intersection
Denotes that the actual address is located at or close to the 
intersection of two or more streets.
1   CAR  Care of 
The name of the party who will take receipt at the specified 
address, and will take on responsibility for ensuring delivery to 
the target recipient.
NOTE  This is included only to support the convention of writing 
c/-  address lines. This item is not appropriate for use when 
information is entrusted to one party on behalf of another in some 
significant way.
1   CEN  Census tract  A geographic sub-unit delineated for demographic purposes.
1   CNT  Country  Country.
1   CPA
County or 
parish
A sub-unit of a state or province. (49 of the United States of 
America use the term "county;" Louisiana uses the term 
"parish"). 
ISO/FDIS 21090:2009(E)
56  © ISO 2009 – All rights reserved
1   CTY  Municipality
The name of the city, town, village, or other community or 
delivery centre.
1   DEL  Delimiter
Delimiters are printed without framing white space. If no value 
component is provided, the delimiter appears as a line break.
1   POB  Post box  A numbered box located in a post station.
1   PRE  Precinct  A subsection of a municipality.
1   STA
State or 
province
A sub-unit of a country with limited sovereignty in a federally 
organized country.
1   ZIP  Postal code
A postal code designating a region defined by the postal 
service.
1   DPID
Delivery point 
identifier
A value that uniquely identifies the postal address.
NOTE  The hierarchical nature of this code system shows composition rather than subsumption,
e.g. "Street Name" is part of "Street Address Line".
ISO/IEC 11404 Syntax for type Attribute
type AddressPartType = enumeration (AL, ADL, UNID, UNIT, DAL, DINST, 
DINSTA, DINSTQ, DMOD, DMODID, SAL, BNR, BNN, BNS, STR, STB, STTYP, 
DIR, INT, CAR, CEN, CNT, CPA, CTY, DEL, POB, PRE, STA, ZIP)
7.7.3.4  Equality
Two ADXP values are equal if their type and value attributes are equal. The code attributes and language are 
ignored.
NOTE  Clarification: two type attributes of null are considered equal.
7.7.3.5  Invariants
If the part is nonNull, the value cannot be empty unless the part type is DEL .
OCL for Invariants:
inv "value is required": isNotNull implies value.size > 0
7.7.3.6  Binding
For the code codeSystem properties inherited from XP, the part type CNT (country) is bound to the codes 
defined in ISO 3166, either the 2- or 3-letter alphabetic codes or the numeric codes. Conformance statements 
may specify bindings for other part types or restrict the choice of codes for country.
7.7.4  AD (address)
7.7.4.1  Description
Specializes ANY.
Mailing and home or office addresses. AD is primarily used to communicate data that will allow printing mail 
labels, or that will allow a pers on to physically visit that address. The postal address datatype is not supposed 
to be a container for additional information that might be useful for finding geographic locations (e.g., GPS 
coordinates) or for performing epidemiological studies. Such additional information should be captured by 
other, more appropriate data structures. 
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  57
Addresses are essentially sequences of address parts, but add a "use" code and a valid time range for 
information about if and when the address can be used for a given purpos e.
7.7.4.2  ISO/IEC 11404 Syntax
type AD = class (
validTimeLow : characterstring,
validTimeHigh : characterstring,
controlInformationRoot : characterstring,
controlInformationExtension : characterstring,
nullFlavor : NullFlavor,
updateMode : UpdateMode,
flavorId : Set(characterstring),
part : Sequence(ADXP),
use : Set(PostalAddressUse),
useablePeriod : QSET(TS),
isNotOrdered : boolean
)
7.7.4.3  Attributes
7.7.4.3.1  part : Sequence(ADXP): A sequence of address parts, such as street or post office box, city, 
postal code, country, etc.
7.7.4.3.2  use : Set(PostalAddressUse): A set of codes advising a system or user which address in a set 
of like addresses to select for a given purpose.
An address without specific use code might be a default address useful for any purpose, but an address with a 
specific use code would be preferred for that respective purpose.
If populated, the values contained in this attribute  shall be taken from the HL7 PostalAddressUse code system. 
The current values are:
PostalAddressUse Enumeration. OID: 2.16.840.1.113883.5.1012
1  AddressUse
2    H  Home address
A communication address at a home; attempted contacts for 
business purposes might intrude privacy and chances are one 
will contact family or other household members instead of the 
person one wishes to call. Typically used with urgent cases, or 
if no other contacts are available.
3    HP  Primary home  The primary home, to reach a person after business hours.
3    HV  Vacation home  A vacation home, to reach a person while on vacation.
2    WP  Work place
An office address. First choice for business related contacts 
during business hours.
3    DIR  Direct
Indicates a work place address or telecommunication address 
that reaches the individual or organization directly without 
intermediaries. For 'telephones, often referred to as a =private 
line‘.
3    PUB  Public
Indicates a work place address or telecommunication address 
that is a "standard" address which may reach a reception 
service, mail-room, or other intermediary prior to the target 
entity.
2    BAD  Bad address  A flag indicating that the address is bad, in fact, useless. 
ISO/FDIS 21090:2009(E)
58  © ISO 2009 – All rights reserved
2    PHYS
Physical visit 
address
Used primarily to visit an address.
2    PST  Postal address  Used to send mail.
2    TMP
Temporary 
address
A temporary address, may be good for visit or mailing. An 
address history can provide more detailed information.
1
AddressRepresentationUse. Identifies the different representations of the address. The 
representation may affect how the address is used ( e.g. use of ideographic for formal 
communications).
2    ABC  Alphabetic  Alphabetic transcription of name (Japanese: romaji).
2    IDE  Ideographic
Ideographic representation of name (e.g., Japanese kanji, 
Chinese characters).
2    SYL  Syllabic
Syllabic transcription of name (e.g., Japanese kana, Korean 
hangul).
1   SRCH  Search type uses  A name intended for use in searching or matching.
2    SNDX  Soundex  An address spelled according to the SoundEx algorithm.
2    PHON  Phonetic
The address as understood by the data enterer, i.e. a close 
approximation of a phonetic spelling of the address, not based 
on a phonetic algorithm.
ISO/IEC 11404 Syntax for the postalAddressUse attribute
type PostalAddressUse = enumeration (H, HP, HV, WP, DIR, PUB, BAD, 
TMP, ABC, IDE, SYL, PHYS, PST, SRCH, SNDX, PHON)
7.7.4.3.3  useablePeriod : QSET(TS):  A General Timing Specification (GTS) specifying the periods of time 
during which the address can be used. This is used to specify different addresses for different times of the 
week or year.
7.7.4.3.4  isNotOrdered : Boolean:  A boolean value specifying whether the order of the address parts is 
known or not. While the address parts are always a sequence, the order in which they are presented may or 
may not be known to be true or important. Where this matters, the isNotOrdered property can be used to 
convey this information. The default value for isNotOrdered is false.
7.7.4.4  Equality
Two address values are considered equal if  they  contain the same address parts, independent of ordering. 
Use code, useablePeriod and isNotOrdered are excluded from the equality test.
NOTE 1  Even if isNotOrdered is false – it is known that the order of the address parts is representationally significant  –
the order of the parts is irrelevant for checking equality of addresses.
NOTE 2  Two values that refer  to the same address but that are encoded using different address parts (perhaps to 
different levels of detail) would not be considered equal.
7.7.4.5  Invariants
either the AD is nullFlavored or it has at least one part.
OCL for Invariants:
inv "null or parts": isNull xor part->notEmpty
inv "no updateMode or History on AD attributes":
noUpdateOrHistory(useablePeriod) 
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  59
7.7.4.6  ISO 22220 comments
The various address parts defined by ISO 22220,  map to address part types, and the address type maps to 
the use attribute. The  start and end date accuracy indicators are partially supported by the precision of the 
dates provided.
7.7.4.7  Examples
7.7.4.7.1  Address with layout
<example xsi:type="AD" use="WP">
<part value="1050 W Wishard Blvd" />
<part type="DEL"/>
<part value="RG 5th floor"/>
<part type="DEL"/>
<part value="Indianapolis, IN 46240"/>
</example>
This work address consists of 3 unknown parts with 2 line delimiters. None of the parts is labeled with regard 
to their semantic significance. 
7.7.4.7.2  Address with types 
<example xsi:type="AD" use="WP">
<part type="AL" value="1050 W Wishard Blvd"/>
<part type="AL" value="RG 5th floor"/>
<part type="CTY" value="Indianapolis"/>
<part type="STA" value="IN"/>
<part type="ZIP" value="46240"/>
</example>
This is the same address using standard typing rather than a presentation focus. This is probably the most 
common form of presentation for addresses – a series of address lines followed by city, state, zip and possibly 
country.
NOTE  Although this presentation of the address  suggests that lines are required after the two address lines, this is 
not implied by this example. See 7.7.4.8.
7.7.4.7.3  Line types
<example xsi:type="AD" use="WP">
<part type="SAL" value="1050 W Wishard Blvd"/>
<part type="ADL" value="RG 5th floor"/>
<part type="CTY" value="Indianapolis"/>
<part type="STA" value="IN"/>
<part type="ZIP" value="46240"/>
</example>
This is the same address from a system that differentiates between different line types.
7.7.4.7.4  Fully typed addresses
<example xsi:type="AD" use="WP">
<part type="BNR" value="1050"/>
<part type="DIR" value="W"/>
<part type="STB" value="Wishard"/>
<part type="STTYP" value="Blvd"/>
<part type="ADL" value="RG 5th floor"/>
<part type="CTY" value="Indianapolis"/>
<part type="STA" value="IN"/>
<part type="ZIP" value="46240"/>
</example> 
ISO/FDIS 21090:2009(E)
60  © ISO 2009 – All rights reserved
The same address fully broken down; the form above is not used in the USA. However, it is useful in Germany, 
where many systems keep house number as a distinct field.
<example xsi:type="AD" use="HP">
<part type="STR" value="Windsteiner Weg"/>
<part type="BNR" value="54a"/>
<part type="CNT" code="DEU" codeSystem=" 1.0.3166.1.2" 
value="D"/>
<part type="ZIP" value="14165"/>
<part type="CTY" value="Berlin"/>
</example>
This is a home address in a standard German format. The country has been coded in ISO 3166 to assist with 
interoperability.
7.7.4.7.5  Unknown addresses
<example xsi:type="AD" use="WP" nullFlavor="UNK"/>
The work address is unknown.
7.7.4.8  Presenting addresses
The primary purpose of an address is to be presented on a delivery label affixed to  an  envelope. A fully 
specified address  –  one that includes specified line breaks  –  can be presented directly by simply presenting 
the text of the various parts with  whitespace separating them, and following the explicit line breaks. If the 
elements are moved into the xhtml namespace, the AD content can be treated as html directly.
For this reason, the address should always be generated with appropriate line breaks included in the address. 
This enables applications that do not understand the semantics of the address to reproduce it correctly.
However because there is no single presentation model for addresses, applications may ignore the explicitly 
specified line breaks in addresses – they are not bound to follow the presentation as specified in any particular 
address.
7.7.5  ENXP (Entity Name Part)
7.7.5.1  Description 
Specializes XP.
A part that may have a type code signifying the role of the part in the whole entity name, and qualifier codes 
for more detail about the name part type. (Typical name parts for person names are given names, and family 
names, titles, etc..)
7.7.5.2  ISO/IEC 11404 syntax
type ENXP = class (
nullFlavor : NullFlavor,
value : characterstring,
code : characterstring,
codeSystem : characterstring,
codeSystemVersion : characterstring,
language : characterstring,
type : EntityNamePartType,
qualifier : Set(EntityNamePartQualifier)
) 
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  61
7.7.5.3  Attributes
7.7.5.3.1  type : EntityNamePartType: Indicates whether the name part is a given name, family name, 
prefix, suffix, etc.
Not every name part SHALL  have a type code, if the type code is unknown, not applicable, or simply undefined 
this is expressed by a null value (type.isNull). For example, a name may be "Rogan Sulma" and   it might  not 
be clear which one is a given name or which is a last name, or whether Rogan is a title.
If populated, the value of this attribute  shall  be taken from the HL7 EntityNamePartType2 code system. The 
current values are:
EntityNamePartType Enumeration. OID: 2.16.840.1.113883.5.1121 
1   FAM  Family
Family name, this is the name that links to the genealogy. In 
some cultures (e.g. Eritrea) the family name of a son is the 
first name of his father.
1   GIV  Given
Given name.
NOTE  Not to be called  "first  name" since given names do not 
always come first.
1   TITLE  Title
Part of the name that is acquired as a title due to academic, 
legal, employment or nobility status etc.
NOTE  Title name parts include name parts that come after the 
name, such as qualifications.
1   DEL  Delimiter
A delimiter has no meaning other than being literally printed 
in this name representation. A delimiter has no implicit 
leading and trailing white space.
ISO/IEC 11404 Syntax for the entityNamePartType attribute
type EntityNamePartType = enumeration (FAM, GIV, TITLE, DEL)
When a name is hyphenated, such as Mary-Ann, it may be ambigious whether to use a delimiter separating 
two name parts, or a single name part with a hyphen in it. As a rule of thumb, if each name part should 
contribute an initial when the name is presented as initials, then a delimiter should be used to separate two 
parts.
7.7.5.3.2  qualifier : Set(EntityNamePartQualifier): The qualifier is a set of codes each of which specifies 
a certain subcategory of the name part in addition to the main name part type.
EXAMPLE:  A given name can be flagged as a nickname (CL), a family name might be a name acquired by marriage 
(SP) or a name from birth (BR). 
ISO/FDIS 21090:2009(E)
62  © ISO 2009 – All rights reserved
If populated, the values contained in this attribute  shall be taken from the HL7 EntityNamePartQualifier2 code 
system. The current values are: 
EntityNamePartQualifier Enumeration. OID: 2.16.840.1.113883.5.1122 
1   LS  Legal status
For organizations a suffix indicating the legal status, e.g., 
"Inc.", "Co.", "AG", "GmbH", "B.V." "S.A.", "Ltd." Etc.
1  TitleStyles: Extra information about the style of a title
2    AC  Academic
Indicates that a prefix like "Dr." or a suffix like "M.D." or "Ph.D." 
is an academic title.
2    NB  Nobility
In Europe and Asia, there are still people with nobility t itles 
(aristocrats). German "von" is generally a nobility title, not a 
mere voorvoegsel. Others are "Earl of" or "His Majesty King 
of..." etc. Rarely used nowadays, but some systems do keep 
track of this.
2    PR  Professional
Primarily in the British Imperial culture people tend to have an 
abbreviation of their professional organization as part of their 
credential suffices.
2    HON  Honorific
An honorific such as ?The Right Honorable? or 
?Weledelgeleerde Heer?.
1   BR  Birth
A name that a person was given at birth or established as a 
consequence of adoption.
NOTE  This is not used for temporary names assigned at birth 
such as ?Baby of Smith? – which is just a name with a use code of 
?TEMP?.
1   AD  Acquired
A name part a person acquired.
The name part may be acquired by adoption, or the person 
may have chosen to use the name part for some other reason.
NOTE  This differs from an other/psuedonym/alias in that an 
acquired name part is acquired on a formal basis rather than an 
informal one (e.g. registered as part of the official name).
2    SP  Spouse
The name assumed from the partner in a marital relationship. 
Usually the spouse‘s family name. No inference about gender 
may be made from the existence of spouse names.
1   MID  Middle Name
Indicates that the name part is a middle name.
In general, the  English  "middle name"  concept is all of the 
given names after the first. This qualifier may be used to 
explicitly indicate which given names are considered to be 
middle names. 
The middle name qualifier may also be used with family 
names. This is a Scandinavian use case, matching the 
concept of ?mellomnavn?/?mellannamn?. There are specific 
rules that indicate what names may be taken as a mellannamn 
in different Scandinavian countries.
1   CL  Callme
Callme is used to indicate which of the various name parts is 
used when interacting with the person. 
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  63
1   IN  Initial
Indicates that a name part is just an initial. Initials do not imply 
a trailing period since this would not work with non-Latin 
scripts. Initials may consist of more than one letter, e.g., "Ph." 
could stand for "Philippe" or "Th." for "Thomas".
1   PFX  Prefix
A prefix has a strong association to the immediately following 
name part. A prefix has no implicit trailing white space 
(although it has implicit leading white space).
1   SFX  Suffix
A suffix has a strong association to the immediately preceding 
name part. A suffix has no implicit leading white space 
(although it has implicit trailing white space).
ISO/IEC 11404 Syntax for the entityNamePartQualifier attribute
type EntityNamePartQualifier = enumeration (LS, AC, NB, PR, HON, BR, 
AD, SP, MID, CL, IN, PFX, SFX)
The Scandinavian ?Mellomnavn/Mellannamn? translates to ?middle name? but does not match the English 
"middle name"  concept. The general English  "middle name"  concept is simply all of the given names after the 
first. The qualifiers PFX and SFX are mutually incompatible. It is not legal to use both on the same part type. It 
is not necessary to label the name part following a prefix as a suffix or vice versa .
NOTE  Initials are allowed to be more than one letter specifically to cater for linguistic norms in the applicable 
language. Abbreviations, such as Dr. for Doctor are not initials.
7.7.5.4  Equality
Two ENXP values are equal if their type and value attributes are  equal. The code attributes, language and 
qualifier are ignored.
NOTE  Clarification: two type attributes of null are considered equal.
7.7.5.5  Invariants
if the part is nonNull, the value cannot be empty.
OCL for Invariants:
inv "value is required": isNotNull implies value.size > 0
7.7.5.6  Binding
Conformance statements may specify bindings for the various part types. 
ISO/FDIS 21090:2009(E)
64  © ISO 2009 – All rights reserved
7.7.5.7  Implementation Notes
There is a relationship between the part type and the qualifiers which can be used. This table summarizes the 
qualifiers that can be used with the different part types:
FAM
(family)
GIV
(given)
TITLE
(title)
DEL
(delimiter)
null
LS (legal status)      ??    ?
AC (academic)      ??    ?
NB (nobility)      ?? ?
PR (professional)      ?? ?
HON (honorifc)      ?? ?
BR (birth)  ??  ??      ?
AD (adopted)  ??  ??      ?
SP (spouse)  ??  ?      ?
MID (middle name)  ??  ??      ?
CL (call me)  ?  ??      ?
IN (initial)  ?  ??      ?
PFX (prefix)  ??  ??  ??    ?
SFX (suffix)  ??  ??  ??    ?
?   = This combination is allowed, though it is not expected to be in common usage.
??  = This combination is allowed, and it is expected that this combination will be 
encountered in practice.
7.7.6  EN (entity name)
7.7.6.1  Description
Specializes ANY.
A name for a person, organization, place or thing.
EXAMPLES:  "Jim Bob Walton, Jr.", "Health Level Seven, Inc.",  "Lake Tahoe", etc. An entity name  can be as simple as 
a character string or  can  consist of several entity name parts, such as, "Jim", "Bob", "Walton", and "Jr.", "Health Level 
Seven" and "Inc.".
Entity names are essentially sequences of entity name parts,  but add a "use" code and a valid time range for 
information about when the name was used and how to choose between multiple aliases that may be valid at 
the same time.
7.7.6.2  ISO/IEC 11404 syntax
type EN = class (
validTimeLow : characterstring,
validTimeHigh : characterstring,
controlInformationRoot : characterstring,
controlInformationExtension : characterstring,
nullFlavor : NullFlavor,
updateMode : UpdateMode,
flavorId : Set(characterstring),
part : Sequence(ENXP),
use : Set(EntityNameUse)
) 
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  65
7.7.6.3  Attributes
7.7.6.3.1  part : Sequence(ENXP): A sequence of name parts, such as given name or family name, prefix, 
suffix, etc.
7.7.6.3.2  use : Set(EntityNameUse): A set of codes advising a system or user which name in a set of 
names to select for a given purpose.
A name without specific use code might be a default name useful for any purpose, but a name with a specific 
use code would be preferred for that respective purpose. Names  should not be collected without at least one 
use code, but names may exist without use code, particularly for legacy data.
If populated, the values contained in this attribute  shall be taken from the HL7 EntityNameUse2 code system. 
The current values are: 
EntityNameUse Enumeration. OID: 2.16.840.1.113883.5.1120
1
RepresentationUse. Identifies the different representations of a name. The representation may 
affect how the name is used. (E.g. use of Ideographic for formal communications)
2    ABC  Alphabetic  Alphabetic transcription of name (Japanese: romaji).
2    IDE  Ideographic
Ideographic representation of name (e.g., Japanese kanji, 
Chinese characters).
2    SYL  Syllabic
Syllabic transcription of name (e.g., Japanese kana, Korean 
hangul).
1   C  Customary  Known as/conventional/the one you normally use.
1   OR
Official registry 
name
The formal name as registered in an official (government) 
registry, but which name might not be commonly used. May 
correspond to the concept of legal name.
1   T  Temporary
A temporary name. A name valid time can provide more 
detailed information. This may also be used for temporary 
names assigned at birth or in emergency situations.
1  Assumed: A name that a person has assumed or has been assumed to them
2    I  Indigenous/Tribal  e.g. Chief Red Cloud.
2    P
Other/
pseudonym/alias
A non-official name by which the person is sometimes known. 
(This may also be used to record informal names such as a 
nickname.)
2    ANON  Anonymous
Anonymous assigned name (used to protect a person's 
identity for privacy reasons) .
2    A  Business Name
A name used in a professional or business context.
EXAMPLES: Continuing to use a maiden name in a professional 
context, or using a stage performing name (some of these names are 
also pseudonyms).
2    R  Religious
A name assumed as part of a religious vocation. e.g. Sister 
Mary Francis, Brother John 
1   OLD  No longer in use
This name is no longer in use.
NOTE  Names can also carry valid time ranges. This code is used 
to cover the situations where it is known that the name is no longer 
valid, but no particular time range for its use is known. 
ISO/FDIS 21090:2009(E)
66  © ISO 2009 – All rights reserved
2    DN  Do not use
This name should no longer be used when interacting with the 
person (i.e. in addition to no longer being used, the name 
should not even  be  mentioned when interacting with the 
person).
NOTE  applications are not required to compare names labeled 
?Do  not use? and other names in order to eliminate name parts that 
are common between the other name and a name labeled ?Do  not 
use?.
1   M  Maiden name
A name used prior to marriage.
Marriage naming customs vary greatly around the world. This
name use is for use by applications that collect and store 
?maiden? names. Though the concept of maiden name is often 
gender specific, the use of this term is not gender specific. The 
use of this term does not imply any particular history for a 
person‘s name, nor should the maiden name be determined 
algorithmically.
1   SRCH  Search type uses  A name intended for use in searching or matching.
2    PHON  Phonetic
The name as understood by the data enterer, i.e. a close 
approximation of a phonetic spelling of the name, not based 
on a phonetic algorithm.
ISO/IEC 11404 syntax for the entityNameUse attribute
type EntityNameUse = enumeration (C, OR, T, I, P, A, R, OLD, DN, M, 
SRCH, PHON, ABC, SYL, IDE)
The use and qualifier codes are both used as sets, where more than one of each type may be used. This 
allows syntactically well-formed but semantically absurd constructions. The following rules apply: 
a single entity name may not have more than one NameRepresentationUse code;
T, ABC, SYL and IDE should be accompanied by some other name use code;
an organization entity name part qualifier code of "LS" may not be combined with any other qualifiers 
except PFX or SFX;
the qualifiers BR and AD (or SP) are mutually incompatible.
7.7.6.4  Equality
Two name values are considered equal if their canonical forms contain the same name parts in the same 
order. Use code and valid time are excluded from the equality test.
7.7.6.5  Invariants
either the EN is nullFlavored or it has at least one part.
OCL for Invariants:
inv "null or parts": isNull xor part-> notEmpty
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  67
7.7.6.6  Operations
7.7.6.6.1  canonical():EN: The Entity Name with a standard ordering imposed on the parts.
The canonical form is primarily defined for the purposes of defining equality, and may differ from the socially 
accepted order for the name parts in various cultures around the world.
The canonical form contains all the part types except for the delimiters, in the following order:
1)  prefixes with qualifier title;
2)  given names, with any prefixes and/or suffixes associated with the given names;
3)  family names, with any prefixes and/or suffixes associated with the family names;
4)  suffixes with qualifier title.
Each list of part types shall be in the order of the original name.
7.7.6.7  ISO 22220 comments
The various name groups defined in ISO 22220 map directly to the ENXP types. The conditional use and 
name usage components map to the use attribute. The context of use of the EN may need to allow for multiple 
EN values (as some kind of collection) to support all the functionality described in ISO 22220.
7.7.6.8  Examples
7.7.6.8.1  Simple example
<example xsi:type="EN" >
<part type="GIV" value="Adam"/>
<part type="GIV" value="A."/>
<part type="FAM" value="Everyman"/>
</example>
A very simple encoding of "Adam A. Everyman".
7.7.6.8.2  Complex germanic example
<example xsi:type="EN.PN">
<part type="GIV" qualifier="AC" value="Dr. phil."/>
<part type="GIV" value="Regina"/>
<part type="GIV" value="Johanna"/>
<part type="GIV" value="Maria"/>
<part type="TITLE" qualifier="PFX NB" value="Gräfin"/>
<part type="FAM" qualifier="BR" value="Hochheim"/>
<part type="DEL" value="-"/>
<part type="FAM" qualifier="SP" value="Weilenfels"/>
<part type="TITLE" qualifier="SFX PR" value="NCFSA" />
</example>
Dr.phil. Regina Johanna Maria Gräfin Hochheim-Weilenfels, NCFSA. This example shows extensive use of 
multiple given names, prefixes, suffixes, for academic degrees, nobility titles, and professional designations.
7.7.6.8.3  Organization name
<example xsi:type="EN.TN">
<part value="Health Level Seven, Inc"/>
</example>
An organization name, "Health Level Seven, Inc." in simple string form: (Trivial Name – EN.TN). 
ISO/FDIS 21090:2009(E)
68  © ISO 2009 – All rights reserved
<example xsi:type="EN.ON">
<part value="Health Level Seven, "/>
<part type="TITLE" qualifier="SFX LS" value="Inc."/>
</example>
As a fully parsed name.
7.7.6.8.4  Japanese example
<example xsi:type="EN" use="IDE">
<part type="FAM" value="??"/>
<part type="GIV" value="??"/>
</example>
<example xsi:type="EN" use="SYL">
<part type="FAM" value="???"/>
<part type="GIV" value="???"/>
</example>
<example xsi:type="EN" use="ABC">
<part type="FAM" value="KIMURA"/>
<part type="GIV" value="MICHIO"/>
</example>
A Japanese name in the three forms: ideographic (Kanji), syllabic (Hiragana) and alphabetic (Romaji).
7.7.6.8.5  Russian example
<example xsi:type="EN">
<part type="FAM" value="??????"/>
<part type="GIV" value="????"/>
<part type="GIV" value="????????????"/>
</example>
<example xsi:type="EN">
<part type="FAM" value="EMELIN"/>
<part type="GIV" value="IVAN"/>
</example>
A russian name in cyrillic with a latin alphabet transliteration. In  Russian  usage, these names are known as 
the domestic and foreign names respectively. Systems should determine the appropriate form for a particular 
use based on the character set of the name parts. 
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  69
7.7.6.8.6  Scandinavian examples
<example xsi:type="EN" use="OR">
<part type="GIV" value="Jan"/>
<part type="GIV" value="Erik"/>
<part type="FAM" qualifier="MID" value=" Östlund"/>
<part type="FAM" value="Erikson"/>
</example>
<example xsi:type="EN">
<part type="GIV" value="Jan"/>
<part type="FAM" value="Erikson"/>
</example>
Erikson is the family name. Jan Erik are the given names, and Östlund the family name of the mother, which 
is taken as a Mellannamn.
<example xsi:type="EN" use="T"> 
<!—- Use could be OR+OLD, depends how record keeping is done -->
<part type="GIV" value="Margrete Jente"/>
<part type="FAM" value="Hansen"/>
</example>
Jan Erikson has a daughter, Karin, with his wife Margrete Hansen. The first communications of the new born 
name is ?Margrete Jente? (Margrete‘s Girl) and the mother's family name, not the given name (Karin). The 
father's Family name is  not used at all. This is a known temporary name assigned directl y after the birth of 
the child.
<example xsi:type="EN" use="OR C">
<part type="GIV" value="Karin"/>
<part type="FAM" qualifier="MID" value="Hansen"/>
<part type="FAM" value="Erikson"/>
</example>
The baby's name is subsequently changed to the fathers' family name, and to use the mother's name as 
mellomnamn.
<example xsi:type="EN" use="OR">
<part type="GIV" value="Karin"/>
<part type="FAM" qualifier="MID" value="Erikson"/>
<part type="FAM" qualifier="SP" value="Berg"/>
</example>
<example xsi:type="EN" use="C">
<part type="GIV" value="Karin"/>
<part type="FAM" value="Berg"/>
</example>
Karin gets married to Per Berg, and decides to adopts Berg as her family name, and also decides to use 
Erikson as the mellom navn.
NOTE  Karin could have chosen to use another mellom navn, e.g. the family name of her mother, her father or other 
family names as specified by naming laws of the country in question.
7.7.6.8.7  Nickname/informal name examples
<example xsi:type="EN">
<part type="GIV" value="Peter"/>
<part type="GIV" qualifier="CL" value="James"/>
<part type="FAM" value="Chalmers"/>
</example>
The full name is Peter James Chalmers. The person prefers to be called by James (not ?Jim? – no, don‘t call 
him that).
<example xsi:type="EN" use="OR"> 
ISO/FDIS 21090:2009(E)
70  © ISO 2009 – All rights reserved
<part type="GIV" value="David"/>
<part type="GIV" value="Woodford"/>
<part type="FAM" value="Smith"/>
</example>
<example xsi:type="EN" use="C">
<part type="GIV" value="Woody"/>
<part type="FAM" value="Smith"/>
</example>
The person‘s proper name is David Woodford Smith, but he prefers to be called ?Woody?.
<example xsi:type="EN" use="OR">
<part type="GIV" value="Uy"/>
<part type="GIV" value="Dung"/>
<part type="FAM" value="Nguyen"/>
</example>
<example xsi:type="EN" use="C">
<part type="GIV" value="Dennis"/>
<part type="FAM" value="Nguyen"/>
</example>
The person was born as ?Uy Dung Nguyen?, but when he migrated to a western nation, he choose to use 
Dennis as his normal ?westernized? name. This is a common practice for immigrants.
<example xsi:type="EN" use="OR C">
<part type="GIV" value="Grahame"/>
<part type="GIV" value="David"/>
<part type="FAM" value="Grieve"/>
</example>
<example xsi:type="EN" use="P">
<part type="GIV" value="Junior"/>
</example>
The person was born as ?Grahame Grieve? and uses this name in normal use. However he has sometimes 
been called ?Junior? as well.
7.7.6.8.8  Title example
<example xsi:type="EN" use="OR C">
<part type="TITLE" value="Dr"/>
<part type="GIV" value="John"/>
<part type="GIV" value="Paul"/>
<part type="FAM" value="Jones"/>
<part type="TITLE" qualifier="SFX" value="III"/>
<part type="DEL" value=", "/>
<part type="TITLE" qualifier="AC" value="PhD"/>
</example>
Dr John Paul Jones III, PhD.  This name is given the use code ?OR? for Official Registry Name, but contains 
titles. For the purposes of this  International Standard, titles and delimiters are not part of the official registry 
name, they can be present, and there is no assertion that they are actually registered.
NOTE  ?Dr? is an abbreviation, not an initial. Initials  can  contain more than one letter for linguistic  reasons, but they 
are not the same as an abbreviation. Titles are often abbreviated.
7.7.6.8.9  Complex examples 
<example xsi:type="EN" use="OR C">
<part type="GIV" value="Mary Jane"/>
<part type="FAM" value="Contrata"/>
</example>
Mary Jane are two specifically space separated and ordered portions of the first name, rather than  "Jane"
being a middle name. 
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  71
NOTE  Generating initials algorithmically from this name, they would usually be MC not MJC.
<example xsi:type="EN" use="OR C">
<part type="GIV" value="Karen"/>
<part type="FAM" value="Van"/>
<part type="FAM" value="Hentenryck"/>
</example>
Karen Van Hentenryck is of Dutch origin, and the "Van"‘ is a voorvoegsel.
<example xsi:type="EN" use="OR C">
<part type="GIV" value="Selby"/>
<part type="FAM" qualifier="SP" value="Butt"/>
<part type="FAM" value="Beeler"/>
</example>
<example xsi:type="EN" use="OR OLD">
<part type="GIV" value="Mary"/>
<part type="FAM" qualifier="CL" value="Selby"/>
<part type="FAM" value="Butt"/>
</example>
Born  Mary "Selby"  Butt, but changed her name to Selby Butt Beeler upon marriage, and this is the name on 
her passport.
<example xsi:type="EN" use="OR A OLD">
<part type="GIV" value="Jacqueline "/>
<part type="GIV" value="Janette"/>
<part type="GIV" value="Patricia"/>
<part type="FAM" value="Campbell"/>
</example>
<example xsi:type="EN" use="P OLD">
<part type="GIV" value="Ruth"/>
<part type="FAM" value="Brinkman"/>
</example>
<example xsi:type="EN" use="P OLD">
<part type="GIV" value="Ruth"/>
<part type="FAM" qualifier="SP" value="Grieve "/>
</example>
<example xsi:type="EN" use="OR">
<part type="GIV" value="Jacqueline"/>
<part type="GIV" value="Janette"/>
<part type="GIV" value="Patricia"/>
<part type="FAM" value="Grieve"/>
</example>
<example xsi:type="EN" use="C">
<part type="GIV" value="Jacque"/>
<part type="FAM" value="Grieve"/>
</example>
<example xsi:type="EN" use="C OLD">
<part type="GIV" value="Jacque Ruth"/>
<part type="FAM" value="Grieve"/>
</example>
<example xsi:type="EN" use="M">
<part type="FAM" value="Brinkman "/>
</example>
This is a particularly complex example, but anonymized from a real person. She was born as ?Jacqueline 
Janette Patricia Campbell?, but grew up under the foster name ?Ruth Brinkman?. Upon marriage, she was 
known as ?Ruth Grieve? but her legal name was ?Jacqueline Janette Patricia Grieve?. Later, changed her 
name to ?Jacque-Ruth? and then just ?Jacque?. Out of all this, she reports her maiden name as ?Brinkman?.
<example xsi:type="EN" use="OR OLD">
<part type="GIV" qualifier="BR" value="Del-Roy"/>
<part type="FAM" qualifier="BR" value="Burgess"/>
</example> 
ISO/FDIS 21090:2009(E)
72  © ISO 2009 – All rights reserved
<example xsi:type="EN" use="P">
<part type="GIV" value="Yor-Led"/>
<part type="FAM" value="Ssegrub"/>
</example>
<example xsi:type="EN" use="OR ABC OLD">
<part type="GIV" qualifier="AD PFX" value="Abdul"/>
<part type="DEL" value="-"/>
<part type="GIV" qualifier="AD SFX" value="Malik"/>
<part type="FAM" qualifier="AD" value="Shakir"/>
</example>
<example xsi:type="EN" use="OR ABC C">
<part type="GIV" qualifier="AD" value="AbdulMalik"/>
<part type="FAM" qualifier="AD" value="Shakir"/>
<part type="TITLE" value="Sr"/>
</example>
<example xsi:type="EN" use="P DN">
<part type="GIV" qualifier="AD" value="Abdul"/>
</example>
<example xsi:type="EN" use="P">
<part value="AMS"/>
</example>
Another complicated example taken from a real person, who says ?I was born Del-Roy Burgess, and my 
nickname was Yor-Led Ssegrub. I changed my name to Abdul-Malik Shakir when adopting Islam as my 
religion. The spelling is a phonetic spelling of an Arabic name using the Latin alphabet. If Abdul -Malik is a bit 
of a mouthful, do not call me Abdul, please call me AMS instead. I recently began spelling my first name in 
camel case and dropped the ?-? delimiter (i.e., AbdulMalik not Abdul-Malik). I also recently started using the 
suffix Sr. to differentiate my identify from my son‘s with the same name. The suffix is not commonly used 
except on a few official registries such as passport, driving  license and other areas where identity 
disambiguation is important.
7.7.7  EN.TN (trivial name)
7.7.7.1  Description
A flavour that constrains EN.
A restriction of EN that is effectively a simple string used for a simple name for things and places. Trivial 
names are typically used for places and things, such as Lake Erie or Washington-Reagan National Airport.
7.7.7.2  Invariants
if the EN.TN is not null, there can only be one part, and it can have no type or qualifier .
OCL for Invariants:
inv "only one part with no type": isNotNull implies 
(part->size = 1 and part->first.type.oclIsUndefined and 
part->first.qualifier->isEmpty)
7.7.8  EN.PN (person name)
7.7.8.1  Description
A flavour that constrains EN.
A restriction of EN used when the named  entity  is a  person. A sequence of name parts, such as given name 
or family name, prefix, suffix, etc.
A name part is a restriction on entity name part that only allows those entity name parts qualifiers applicable to 
person names. 
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  73
NOTE  Since the structure of entity name  is mostly determined by the requirements of person name, the restriction is 
very minor.
7.7.8.2  Invariants
none of the parts of a persons name can be qualified by the status LS.
OCL for Invariants:
inv "no parts are qualified by LS": part->forAll(p | not
p.qualifier->includes(EntityNamePartQualifier.LS))
7.7.9  EN.ON (Organization Name)
7.7.9.1  Description
A flavour that constrains EN.
7.7.9.2  Invariants
none of the parts of a organization name can be FAM or GIV;
the following qualifiers shall not be used in the name of an organization: I, P, ANON, A, R, DN and M.
OCL for Invariants:
inv "no parts are person types": part->forAll(p |
not (p.type = EntityNamePartType.FAM or
p.type = EntityNamePartType.GIV))
inv "no use codes are person codes":
use->forAll(u | not 
(u = EntityNameUse.I 
or u = EntityNameUse.P 
or u = EntityNameUse.ANON
or u = EntityNameUse.A
or u = EntityNameUse.R
or u = EntityNameUse.M)).M))
7.8  Quantity datatypes
7.8.1  Overview
These datatypes provide support for quantitative values. See Figure 7. 
ISO/FDIS 21090:2009(E)
74  © ISO 2009 – All rights reserved
Figure 7 — Quantity datatypes 
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  75
Figure 7 (continued) 
ISO/FDIS 21090:2009(E)
76  © ISO 2009 – All rights reserved
Figure 7 (continued)
7.8.2  QTY (quantity)
7.8.2.1  Description
Specializes ANY.
The quantity datatype is an  abstract generalization for all datatypes whose domain values have  an order 
relation (less-or-equal) and where difference is defined in all of the datatype‘s totally ordered value subsets.
The quantity type abstraction is needed in defining certain other  types, such as the interval and probability 
distributions.
7.8.2.2  ISO/IEC 11404 syntax
type QTY = class (
validTimeLow : characterstring,
validTimeHigh : characterstring,
controlInformationRoot : characterstring,
controlInformationExtension : characterstring,
nullFlavor : NullFlavor,
updateMode : UpdateMode, 
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  77
flavorId : Set(characterstring),
expression : ED,
originalText : ED.TEXT,
uncertainty : QTY,
uncertaintyType : UncertaintyType
uncertainRange : IVL(QTY)
)
QTY defines three facilities that all quantities may carry: an expression that may be used to derive the actual 
value, an originalText that carries the original form in which the quantity was represented and the uncertainty 
associated with the value. There are two different ways to represent the uncertainty: one is a statistical form –
usually suited for measured values, and a range form, which is usually associated with instructions (i.e. take 
4-6 tablets).
The presence of these attributes may considerably complicate proper understanding of the value. For this 
reason, their use should be strictly controlled in all contexts of use. Conformance  statements shall make clear 
exactly how and when these attributes are used if quantities are used by the associated Information 
processing entities.
7.8.2.3  Attributes
7.8.2.3.1  expression : ED:  An expression that can be used to derive the actual value of the quantitive
given information taken from the context of use.
For example expression can be used for expressing dosage instructions that depend on patient's body weight.
If no proper value is provided for the QTY, then the value  shall  have a nullFlavor, whether or not an 
expression is provided. If no proper value is provided, and an expression is provided, the appropriate 
nullFlavor is usually DER. No  nullFlavor is required if both a proper value and an expression is provided; in 
such cases, it is up to the processing to determine when the expression should be evaluated.
The language of the expression is inferred from the mediatype. If multiple translations are provided in the 
expression, the evaluator is free to choose whichever language is preferred; all translations  shall  specify the 
same outcome.
The language defines the forms that the expression property can take, how the information available in the 
context of the expression is made available within the features of the language, and how the language 
declares the new form of the value. Languages may only be used if this information has been appropriately 
defined for the context in which the QTY is used.
Information processing entities are not required to implement any languages in order to claim direct or indirect 
conformance to  this International Standard, but  should  declare what languages are supported in their 
conformance statements.
Language  Mediatype
OCL  text/plain ocl
Factor  application/hl7-factor xml
MathML  application/mathml xml
NOTE  Factor is an HL7 specific language documented in the 
Abstract Data Types Specification.
ISO/FDIS 21090:2009(E)
78  © ISO 2009 – All rights reserved
7.8.2.3.2  originalText : ED.TEXT: The text representation from which the QTY was encoded, if such a 
representation is the source of the QTY.
Original text can be used in a structured user interface to capture what the user saw as a representation of the 
quantity on the data input screen, or in a situation where the user dictates or  directly enters text, it is the text 
entered or uttered by the user.
It is valid to use a QTY derived datatype to store only the text that the user entered or uttered. In this situation, 
original text will exist without a valid value. In a situation where the value is determined sometime after the text 
was entered, originalText is the text or phrase used as the basis for determining the value. The originalText is 
not a substitute for a valid value. If the actual value of the QTY is not valid, then the QTY  shall be nullFlavored, 
irrespective of whether originalText has a value or not.
The original text shall be an excerpt of the relevant information in the original sources, rather than a pointer or 
exact reproduction. Thus the original text  shall  be represented in plain text form. In specific circumstances, 
when clearly descirbed  in  the context of use, the originalText may be a reference to some other text artefact 
for which the resolution scope is clearly described.
NOTE  The details of the link in the originalText.reference between different artifacts of medical information (e.g., 
document and coded result) is outside the scope of  this International Standard  and may be further proscribed in 
specifications that use this International Standard.
7.8.2.3.3  uncertainty : QTY:  The uncertainty of the quantity using a distribution function and its 
parameters. It is the primary measure of variance/uncertainty of the value (the square root of the sum of the 
squares of the differences between all data points and the mean). The actual type of uncertainty depends on 
the type of the QTY and is fixed for each type.
There are two different kinds of uncertainty representation. This kind of uncertainty, along with 
uncertaintyType, represents statistical uncertainty. uncertainRange specifies a different kind of uncertainty 
with no implied statistical distribution.
This form of uncertainty  shall only be applied to value domains that have a continuous distribution (REAL, PQ, 
MO and TS). Uncertainty may be applied separately to the numerator and denominator of an RTO.
Uncertainty shall  not have an expression. Uncertainty  shall  not have uncertainty of its own. Uncertainty  shall 
not have originalText  –  any uncertainty associated with the QTY should be conveyed as part of the 
originalText of the QTY itself.
Uncertainty does not have its own originalText because it is expected that the uncertainty of the quantity 
should be expressed in the originalText of the quantity itself.
7.8.2.3.4  uncertaintyType : UncertaintyType: A code specifying the type of probability distribution in 
uncertainty.
There are two different kinds of uncertainty representation. This kind of uncertainty, along with uncertainty, 
represents statistical uncertainty. uncertainRange specifies a different kind of uncertainty with no implied 
statistical distribution.
The null value (unknown) for the type code indicates that the probability distribution type is unknown. In that 
case, uncertainty has the meaning of an informal guess if it is populated. 
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  79
If populated, the value of this attribute  shall be taken from the HL7 DistributionType code system. The current 
values are:
UncertaintyType Enumeration. OID: 2.16.840.1.113883.5.1020
1  U  Uniform
The uniform distribution assigns a constant probability over the entire 
interval of possible outcomes, while all outcomes outside this interval are 
assumed to have zero probability. The width of this interval is 2 s  3. 
Thus, the uniform distribution assigns the probability densities 
f(x) = (2 s v3)
1
to values µ   s v3 W x u µ   s v3 and f(x) = 0 otherwise.
1  N
Normal 
(gaussian)
This is the well-known bell-shaped normal distribution. Because of the 
central limit theorem, the normal distribution is the distribution of choice 
for an unbounded random variable that is an outcome of a combination of 
many stochastic processes. Even for values bounded on a single side 
(i.e. greater than 0) the normal distribution may be accurate enough if the 
mean is "far away" from the bound of the scale measured in terms of 
standard deviations.
1  LN  Log-normal
The logarithmic normal distribution is used to transform skewed random 
variable X into a normally distributed random variable U = log X. The log-normal distribution can be specified with the properties mean µ and 
standard deviation s. However, mean µ and standard deviation s are the 
parameters of the raw value distribution, not the transformed parameters 
of the log-normal distribution that are conventionally referred to by the 
same letters. Those log-normal parameters µ
log
and s
log
relate to the 
mean µ and standard deviation s of the data value through
log
2
= log (s
2
/µ
2
1) and µlog = log µ   slog
2
/2.
1  G  ? (Gamma)
The gamma-distribution used for data that is skewed and bounded to the 
right, i.e. where the maximum of the distribution curve is located near the 
origin. The ?-distribution has two parameters a and ß. The relationship to 
mean µ and variance s
2
is µ = a ß and s
2
= a ß
2
.
1  E  Exponential
Used for data that describes extinction. The exponential distribution is a 
special form of ?-distribution where a = 1, hence, the relationship to mean 
µ and variance s
2
are µ = ß and s
2
= ß
2
.
1  X2  ?
Used to describe the sum of squares of random variables that occurs 
when a variance is estimated (rather than presumed) from the sample. 
The only parameter of the ?
2
-distribution is ?, the so called the number of 
degrees of freedom (which is the number of independent parts in the 
sum). The ?
2
-distribution is a special type of ?-distribution with parameter 
a = ?/2 and ß = 2. Hence, µ = ? and s
2
= 2 ?.
1  T  t (Student)
Used to describe the quotient of a normal random variable and the square 
root of an ?
2
random variable. The t-distribution has one parameter ?, the 
number of degrees of freedom. The relationship to mean µ and variance 
s
2
are: µ = 0 and s
2
= ?/(?   2).
1  F  f
Used to describe the quotient of two ?
2
random variables. The F-distribution has two parameters ?
1
and ?
2
, which are the numbers of 
degrees of freedom of the numerator and denominator variable 
respectively. The relationship to mean µ and variance s
2
are:
µ = ?
2
/(?
2
2) and s
2
= (2 ?
2
2
(?
2
?
1
2))/[?
1
(?
2
2)
2
(?
2
4)].
1  B  ? (Beta)
The beta-distribution is used for data that are bounded on both sides and 
may or may not be skewed (e.g., occurs when probabilities are 
estimated.) Two parameters a and ß are available to adjust the curve. The 
mean µ and variance s
2
relate as follows: µ = a/(a   ß) and
(s
2
= a ß/[(a   ß)
2
(a   ß   1)]. 
ISO/FDIS 21090:2009(E)
80  © ISO 2009 – All rights reserved
Many distribution types are defined in terms of special parameters (e.g., the parameters  a  and  ß  for the  ?-distribution, number of degrees of freedom for the  t-distribution, etc.). For all distribution types, however, the 
mean and standard deviation are defined.
If no value (null) is provided for distributionType, then  the mean is estimated without any closer consideration 
of its probability distribution. In this case, the meaning of the standard deviation is not crisply defined. 
However, interpretation should be along the lines of the normal distribution, e.g., the interval covered by the 
mean  1 standard deviation should be at the level of about two thirds confidence.
The three distribution-types  unknown (null), uniform and normal  shall  be supported by every system that 
claims to support uncertainty. All other distribution types are optional. W hen a system interpreting a 
uncertainty  representation encounters a distribution type that it does not recognize, it maps this type to the 
unknown (null) distribution-type.
11404 syntax for the distributionType attribute
type UncertaintyType = enumeration (U, N, LN, G, E, X2, T, F, B)
7.8.2.3.5  uncertainRange : IVL(QTY): C:\Workspace\org.hl7.v3\dt\abstract\datatypes.htm - dt-CE
Indicates that the value comes from a range of possible values.
uncertainRange is used where the actual value is unknown, but it is known that the value comes from a known 
range of possible values. uncertainRange differs from uncertainty in that uncertainty is used to report a 
particular value along with an  associated distribution of uncertainty for the value, or to report the summary 
distribution of a set of data, whereas uncertainRange indicates that there is a single value that, although 
unknown, comes from a particular range of values. No inference regarding distribution of values can be taken. 
uncertainRange is often associated with an instruction to perform a particular operation at some point within a 
given time interval.
If an uncertainRange is provided, a low or high  shall  be provided. The IVL any and width attributes cannot be 
used. If an uncertainRange is provided, no value can be provided.
7.8.2.4  Equality
Equality is not defined for the QTY datatype as it is an abstract type.The QTY attributes (expression, 
originalText, uncertainty and uncertaintyType) never participate in the determination of equality of 
specializations of QTY.
7.8.2.5  Invariants
uncertainty has no expression, uncertainty or originalText;
uncertainRange has no expression, uncertainty or originalText;
cannot have both uncertainty and uncertainRange;
cannot have width or any on uncertainRange.
OCL for Invariants:
def: let noSemantics : Boolean = expression.oclIsUndefined and 
originalText.oclIsUndefined and uncertainty.oclIsUndefined and 
uncertaintyType.oclIsUndefined
inv "uncertainty rules": uncertainty.isNotNull implies 
(uncertainty.noSemantics)
inv "uncertainRange rules": uncertainRange.isNotNull implies 
(uncertainRange.noSemantics) 
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  81
inv "uncertainty kind": not (uncertainty.isNotNull and 
uncertainRange.isNotNull)
inv "uncertainRange Type": uncertainRange.oclIsDefined implies 
((uncertainRange.width.oclIsUndefined and 
uncertainRange.any.oclIsUndefined)
and (uncertainRange.low.isNotNull or
uncertainRange.high.isNotNull)) 
inv "No History or Update Mode": noUpdateOrHistory(uncertainty) and
noUpdateOrHistory(uncertainRange) and
noUpdateOrHistory(originalText) and
noUpdateOrHistory(expression))
7.8.2.6  Operations
7.8.2.6.1  lessthan[<](other : QTY):BL:  True if the value of this is less than the value of other. For 
uncertain values, this may not be known (result = NullFlavor.UNK).
7.8.2.6.2  lessOrEqual[<=](other : QTY):BL:  True if the value of this is less than or equal to the value of 
other. For uncertain values, this may not be known (result = NullFlavor.UNK).
7.8.2.6.3  greaterOrEqual[>=](other : QTY):BL:  True if the value of this is greater than or equal to the 
value of other. For uncertain values, this may not be known (result = NullFlavor.UNK).
7.8.2.6.4  greaterThan[>](other : QTY):BL:  True if the value of this is greater than the value of other. For 
uncertain values, this may not be known (result = NullFlavor.UNK).
7.8.2.6.5  plus[+](other : QTY):QTY: The result of addition of this and other. Other SHALL be of the right type 
of value (same type as this, except for TS, where the value SHALL be a PQ with units of time, or for PQ, where 
the value of other SHALL have compatible units), else the result is nullFlavor NI. Uncertainties should be carried 
through the operation. If the values have mixed uncertainties, the result may be unknown (result = 
NullFlavor.UNK).
7.8.2.6.6  minus[-](other : QTY):QTY:  The result of subtraction of other from this. Other SHALL be of the 
type of value (same type as this, except for TS, where the value SHALL be a TS or  a PQ with units of time, or for 
PQ, where the value of other SHALL have compatible units), else the result is nullFlavor NI. Uncertainties should 
be carried through the operation. If the values have mixed uncertainties, the result may be unknown (result = 
NullFlavor.UNK).
7.8.2.6.7  comparable(other : QTY) : Boolean: whether this and other can be compared using equality.
NOTE  Generally this is true if both this and other are the same type unless noted otherwise for specializations for 
QTY.
7.8.2.6.8  isDifference(other : QTY):BL True if other is an instance that expresses the difference between 
two instances of this type.
NOTE  Usually this is true if other is  the same as the type, except for TS, where the difference is expressed as a PQ 
with a unit that is a kind of time, and for PQ, where the units SHALL be compatible.
7.8.3  INT (integer)
7.8.3.1  Description
Specializes QTY. 
ISO/FDIS 21090:2009(E)
82  © ISO 2009 – All rights reserved
Integer numbers ( 1,0,1,2, 100, 3398129, etc.) are precise numbers that are results of counting and 
enumerating. Integer numbers are discrete, the set of integers is infinite but countable. No arbitrary limit is 
imposed on the range of integer numbers.
7.8.3.2  ISO/IEC 11404 syntax
type INT = class (
validTimeLow : characterstring,
validTimeHigh : characterstring,
controlInformationRoot : characterstring,
controlInformationExtension : characterstring,
nullFlavor : NullFlavor,
updateMode : UpdateMode,
flavorId : Set(characterstring),
expression : ED,
originalText : ED.TEXT,
uncertainty : QTY,
uncertaintyType : UncertaintyType,
uncertainRange : IVL(QTY)
value : integer
)
7.8.3.3  Attributes
value : Integer: The value of the INT. Note that  this International Standard  imposes no limitations on the size 
of integer, but most implementations will map this to a 32 or 64 bit integer.
This is an example of the primitive type wrapping pattern. See 6.3 for more details.
7.8.3.4  Equality
Two nonNull INT are equal if they are not nullFlavored and have the same value, or their uncertainRanges not 
null or nullFlavored and equal.
7.8.3.5  Invariants
a value or an uncertain range SHALL be provided if not nullFlavored;
cannot provide both a value and an uncertain range;
uncertainRange shall be an IVL(INT);
uncertainty shall not be populated.
OCL for Invariants:
inv “no uncertainty”: uncertainty.isNull
inv "uncertain types": uncertainRange.low.oclIsDefined 
implies uncertainRange.low.oclIsKindOf(INT) and
uncertainRange.high.oclIsDefined implies 
uncertainRange.high.oclIsKindOf(INT) 
inv "value xor uncertainRange": not (value.oclIsDefined and 
uncertainRange.isNotNull)
inv "null or value": isNull xor (value.oclIsDefined or 
uncertainRange.isNotNull)
inv "null or value": isNull xor value.oclIsDefined 
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  83
7.8.3.6  Operations
7.8.3.6.1  negated[ ] : INT: The negative value of this.
7.8.3.6.2  plus[ ] (other : INT) : INT: the value of the addition of this and other.
7.8.3.6.3  minus[ ] (other : INT) : INT: The value of the subtraction of other from this.
7.8.3.6.4  times[*] (other : INT) : INT: The value of the multiplication of this and other.
7.8.3.6.5  dividedBy[/] (other : INT) : REAL: The value of this divided by other. If other is 0, then the result 
is nullFlavor NI.
7.8.3.6.6  dividedBy[/] (other : REAL) : REAL: The value of this divided by other. If other is 0, then the 
result is nullFlavor NI.
7.8.3.6.7  abs() : INT: The absolute value of this.
7.8.3.6.8  div( other : INT) : INT: The number of times that other fits completely within this.
7.8.3.6.9  mod( other : INT) : INT: The result is this modulo other.
7.8.3.6.10  max(other : INT) : INT: The maximum of this and other.
7.8.3.6.11  min(other : INT) : INT: The minimum of this and other.
7.8.3.6.12  comparable(other : QTY):BL: Integer values may always be compared.
7.8.3.7  Examples
7.8.3.7.1  Plain value
<example xsi:type="INT" value="23"/>
The integer 23.
7.8.3.7.2  Unknown value 
<example xsi:type="INT" nullFlavor="NASK"/>
The patient was  not asked for this value. For instance, the patient has never been pregnant, so that patient 
was not asked how many children she has. 
7.8.4  INT.NONNEG
7.8.4.1  Description
A flavour that constrains INT.
NT.NONNEG constrains INT so that it has a value of 0 or greater.
7.8.4.2  Invariants
the value SHALL be zero or greater if not nullFlavored, with no uncertainty. 
ISO/FDIS 21090:2009(E)
84  © ISO 2009 – All rights reserved
OCL for Invariants:
inv "not negative": isNotNull implies value >= 0
7.8.5  INT.POS
7.8.5.1  Description
A flavour that constrains INT.NONNEG.
INT.POS constrains INT.NONNEG so that it has a value greater than 0.
7.8.5.2  Invariants
the value SHALL be greater than zero if not nullFlavored, with no uncertainty.
OCL for Invariants:
inv "positive": isNotNull implies value > 0
7.8.6  CO (coded ordinal)
7.8.6.1  Description
Specializes QTY.
Represents data where coded values are associated with a specific order.
CO may be used for things that model rankings and scores, e.g. likert scales, pain,  Apgar values, etc, where 
there is a) implied ordering, b) no implication that the distance between each value is constant, and c) the total 
number of values is finite. CO may also be used in the context of an ordered code system. In this case, it may 
not  be appropriate or even possible to use the value attribute, but CO may still be used so that models that 
make use of such code systems may introduce model elements that involve statements about the order of the 
terms in a domain.
The relative order of values in a code system need not be independently obvious in the literal representation 
of the CO. It these circumstances, is expected that an application will look up the ordering of these values 
from some definition of the code system.
Some of the code systems will directly assign numerical value to the concepts that are suitable for some 
mathemetical operations.
Though it would generally make sense, applications  should  not assume that the translations of the code, if 
provided, will have the same ordering as  the CO. Translations  shall  not be considered when the ordering of 
the code system is determined.
7.8.6.2  ISO/IEC 11404 syntax
type CO = class (
validTimeLow : characterstring,
validTimeHigh : characterstring,
controlInformationRoot : characterstring,
controlInformationExtension : characterstring,
nullFlavor : NullFlavor,
updateMode : UpdateMode,
flavorId : Set(characterstring),
expression : ED, 
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  85
originalText : ED.TEXT,
uncertainty : QTY,
uncertaintyType : UncertaintyType,
uncertainRange : IVL(QTY)
value : Decimal,
code : CD
)
7.8.6.3  Attributes
7.8.6.3.1  value : Decimal: A numerical value associated with the coded ordinal value.
The value may be constrained to an integer in some contexts of use. If code is nonNull,  value  shall  only be 
nonNull if the code system explicitly assigns a value to the concept.
7.8.6.3.2  code : CD: A code representing the definition of the ordinal item.
7.8.6.4  Equality
Two nonNull CO values are equal if their codes are equal.
NOTE 1  CO values that have value alone with no code are never equal, as it is not clear whether they are comparable 
ordinals.
NOTE 2  Since the determination of CO equality is based upon the code, CO values  can be equal to CD values.
7.8.6.5  Invariants
there SHALL be a code or a value if not nullFlavored;
no uncertainty.
OCL for invariants:
inv "SHALL have a code or a value": isNotNull implies
(code.isNotNull or value.oclIsDefined)
inv "uncertainty Type": uncertainty.oclIsUndefined and 
uncertainRange.oclIsUndefined
inv "No History or Update Mode":noUpdateOrHistory(code)
7.8.6.6  Operations
7.8.6.6.1  max(other : CO) : CO: The maximum of this and other.
NOTE  If the value attribute is not specified, the applicable terminology m ight  need to be consulted to determine the 
order of the two values. If no order is defined, the result will be nullFlavor NI.
7.8.6.6.2  min(other : CO) : CO: The minimum of this and other.
NOTE  If the value attribute is not specified, the applicable terminology m ight  need to be consulted to determine the 
order of the two values. If no order is defined, the result will be nullFlavor NI. 
ISO/FDIS 21090:2009(E)
86  © ISO 2009 – All rights reserved
7.8.6.6.3  comparable(other : QTY):BL: This is false unless this and other have the same codeSystem, 
and then only if the codeSystem defines an order amongst the codes.
7.8.6.6.4  plus[+](other : QTY):QTY: This operation returns null unless this.comparable(other) is true, and 
the codeSystem defines the meaning of addition for these codes.
7.8.6.6.5  minus[-](other : QTY):QTY: This operation returns null unless this.comparable(other) is true, and 
the codeSystem defines the meaning of subtraction for these codes.
7.8.6.7  Examples
<example xsi:type="CO" value="1">
<code code="1" codeSystem="2.16.840.1.113883.2.6.15.1.1">
<displayName value="Poor"/>
</code>
</example>
In this case, the value "poor? is assigned a numerical value of 1.
7.8.7  REAL (real)
7.8.7.1  Description
Specializes QTY.
Fractional numbers. Typically used whenever quantities are measured, estimated or computed from other real 
numbers. The typical representation is decimal, where the number of significant decimal digits is known as the 
precision.
7.8.7.2  ISO/IEC 11404 syntax
type REAL = class (
validTimeLow : characterstring,
validTimeHigh : characterstring,
controlInformationRoot : characterstring,
controlInformationExtension : characterstring,
nullFlavor : NullFlavor,
updateMode : UpdateMode,
flavorId : Set(characterstring),
expression : ED,
originalText : ED.TEXT,
uncertainty : QTY,
uncertaintyType : UncertaintyType,
uncertainRange : IVL(QTY)
value : Decimal 
)
7.8.7.3  Attributes
7.8.7.4  value : Decimal: The value of the REAL.
This is an example of the primitive type wrapping pattern. See 6.3 for more details.
7.8.7.5  Equality
Two nonNull REAL are equal if they are not nullFlavored and have the same value, or if their uncertainRanges 
are not null and not nullFlavored and equal. 
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  87
7.8.7.6  Invariants
a value or an uncertain range SHALL be provided if not nullFlavored;
cannot provide both a value and an uncertain range;
uncertainty types SHALL be a REAL.
OCL for Invariants:
inv "value xor uncertainRange": not 
(value.oclIsDefined and uncertainRange.isNotNull)
inv "null or value": isNull xor (value.oclIsDefined or 
uncertainRange.isNotNull)
inv "uncertain types": uncertainRange.low.oclIsDefined 
implies uncertainRange.low.oclIsKindOf("REAL") and
uncertainRange.high.oclIsDefined implies 
uncertainRange.high.oclIsKindOf("REAL") and
uncertainty.oclIsDefined implies
uncertainty.oclIsKindOf("REAL") 
7.8.7.7  Operations
7.8.7.7.1  plus[ ] (other : REAL) : REAL: The value of the addition of this and other.
7.8.7.7.2  minus[ ] (other : REAL) : REAL: The value of the subtraction of other from this.
7.8.7.7.3  times[*] (other : REAL) : REAL: The value of the multiplication of this and other.
7.8.7.7.4  negated[ ] : REAL: The negative value of this.
7.8.7.7.5  dividedBy[/] (other : REAL) : REAL: The value of this divided by other. If other is 0, then the 
result is nullFlavor NI.
7.8.7.7.6  abs() : REAL: The absolute value of this.
7.8.7.7.7  floor() : INT: The largest integer which is less than or equal to this.
7.8.7.7.8  ceiling() : INT: The smallest integer which is greater than or equal to this.
7.8.7.7.9  round() : INT: The integer which is closest to this. When there are two such integers, the largest 
one.
7.8.7.7.10  inverted() : REAL: The value of 1 divided by self..
7.8.7.7.11  max(other : REAL) : REAL: The maximum of this and other.
7.8.7.7.12  min(other : REAL) : REAL: The minimum of this and other.
7.8.7.7.13  power(other : REAL) : REAL : this raised to the power of other.
7.8.7.7.14  toInterval() : IVL(REAL) : Converts this value to an interval that expresses the range covered 
by the precision.
7.8.7.7.15  comparable(other : QTY):BL: Real numbers may always be compared. 
ISO/FDIS 21090:2009(E)
88  © ISO 2009 – All rights reserved
7.8.7.8  Examples
7.8.7.8.1  Precision
<example xsi:type="REAL" value="23.0005"/>
The floating value 23.0005. 
<example xsi:type="REAL" value="23.00"/>
The floating value 23.00. 
7.8.7.8.2  Uncertainty 
<example xsi:type="REAL" value="23" uncertaintyType="N">
<uncertainty xsi:type="REAL" value="0.87"/>
</example>
The floating value 23. The uncertainty is known to be a normal distribution with a standard deviation of 0.87. 
Note that uncertainty will always need an xsi:type. 
7.8.8  RTO (ratio)
7.8.8.1  Description
Specializes QTY.
A quantity constructed as the quotient of a numerator quantity divided by a denominator quantity.
Common factors in the numerator and denominator are not automatically cancelled out.
The RTO datatype supports titers (e.g., "1:128") and other quantities produced by laboratories  that truly 
represent ratios. Ratios are not simply "structured numerics", particularly blood pressure measurements 
(e.g. "120/60") are not ratios.
NOTE 1  Ratios are different from rational numbers, i.e., in ratios common factors in the numerator and denominator 
never cancel out. A ratio of two real or integer numbers is not automatically reduced to a real number. This datatype is not 
defined to generally represent rational numbers. It is used only if common factors in numerator and denominator are not 
supposed to cancel out. This is only rarely the case. For observation values, ratios occur almost exclusively with titers. In 
most other cases, REAL should be used instead of the RTO.
NOTE 2  Since many implementation technologies expect generics to be collections, or only have one parameter, RTO 
is not implemented as a generic in  this International Standard. Constraints, at the point where the RTO is used, will define 
which form of QTY is used.
7.8.8.2  ISO/IEC 11404 syntax
type RTO = class (
validTimeLow : characterstring,
validTimeHigh : characterstring,
controlInformationRoot : characterstring,
controlInformationExtension : characterstring,
nullFlavor : NullFlavor,
updateMode : UpdateMode,
flavorId : Set(characterstring),
expression : ED,
originalText : ED.TEXT,
uncertainty : QTY, 
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  89
uncertaintyType : UncertaintyType,
uncertainRange : IVL(QTY)
numerator : QTY,
denominator : QTY
)
7.8.8.3  Attributes
7.8.8.3.1  numerator : QTY: The quantity that is being divided in the ratio.
7.8.8.3.2  denominator : QTY: The quantity that divides the numerator in the ratio.
The denominator shall not be zero.
7.8.8.3.3  Equality
Two nonNull RTOs are equal if their numerator and denominator are equal.
7.8.8.4  Invariants
if the RTO is not nullFlavored, both a numerator and a denominator are required;
uncertainty SHALL not be populated;
neither numerator nor denominator may be of type TS.
OCL for Invariants:
inv "numerator and denominator required": isNull xor
(numerator.isNotNull and denominator.isNotNull)
inv "no updateMode or History on RTO Attributes":
noUpdateOrHistory(numerator) and
noUpdateOrHistory(denominator)
inv "no uncertainty": uncertainty.oclIsUndefined and 
uncertainRange.oclIsUndefined 
inv "no TS": (numerator.isNotNull implies not 
numerator.oclIsKindOf("TS")) and (denominator.isNotNull 
implies not denominator.oclIsKindOf("TS"))
7.8.8.5  Operations
7.8.8.5.1  comparable(other : QTY):BL: This and other can be be compared if both the numerator and 
denominator can be compared.
7.8.8.6  Examples
<example xsi:type="RTO">
<numerator xsi:type="MO" value="103.00" currency="USD"/>
<denominator xsi:type="PQ" value="1" unit="day"/>
</example>
US$103/day.
The inner xsi:type declarations are always required. 
ISO/FDIS 21090:2009(E)
90  © ISO 2009 – All rights reserved
7.8.9  PQ (physical quantity)
7.8.9.1  Description
Specializes QTY.
A dimensioned quantity expressing the result of measuring.
7.8.9.2  ISO/IEC 11404 syntax
type PQ = class (
validTimeLow : characterstring,
validTimeHigh : characterstring,
controlInformationRoot : characterstring,
controlInformationExtension : characterstring,
nullFlavor : NullFlavor,
updateMode : UpdateMode,
flavorId : Set(characterstring),
expression : ED,
originalText : ED.TEXT,
uncertainty : QTY,
uncertaintyType : UncertaintyType,
uncertainRange : IVL(QTY)
value : Decimal,
codingRationale : CodingRationale,
unit : characterstring,
translation : Set(PQR)
)
7.8.9.3  Attributes
7.8.9.3.1  value : Decimal: the number which is multiplied by the unit to make the PQ or PQR value if not 
nullFlavored.
7.8.9.3.2  unit : Code: The unit of measure specified in the Unified Code for Units of Measure (UCUM).
UCUM defines two forms of expression, case sensitive and case insensitive.  PQ  uses the case sensitive 
codes. The codeSystem OID for the case sensitive form is 2.16.840.1.113883.6.8. The default value for unit is 
the UCUM code ?1? (unity).
Equality of physical quantities does not require the values and units to be equal independently. Value and unit 
is only how we represent physical quantities. For example, 1 m equals 100 cm. Although the units are different 
and the values are different, the physical quantities are equal. Therefore one should never expect a particular 
unit for a physical quantity but instead allow for automated conversion between different comparable units.
The unit  shall  come from UCUM, which only specifies  unambiguous measurement units. Sometimes it is not 
clear how some measurements in healthcare map to UCUM codes.
The general pattern for a measurement is  value  unit  of  Thing. In this scheme, the PQ represents the  value
and the unit, and the Thing is described by some coded concept that is linked to the PQ by the context of use. 
This maps obviously to some measurements, such as  Patient Body Temperature  of  37  Celsius, and  250
mg/day of Salicylate.
However for some measurements that arise in healthcare, the scheme is not so obvious. Two classic 
examples are 5 Drinks of Beer, and 3 Acetominophen tablets. At first glance it is tempting to classify these 
measurments like this: 5  drinks  of  Beer  and  3  Acetominophen  tablets. The problem with this is that UCUM 
does not support units of "beer", "tablets" or "scoops".  
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  91
The reason for this is that neither tablets  nor scoops are proper units. What kind of tablets? How big is the 
glass? In these kinds of cases, the concept that appears to be a unit needs to further specified  before 
interoperability is established. If a correct amount is required, then it is generally appropriate to specify an 
exact measurement with an appropriate UCUM unit. If this is not possible, then the concept is not part of the 
measurement. UCUM provides a unit called unity for use in these cases. The proper way to understand these 
measurements as  3  1  Acetominophen  tablets, where 1 is the UCUM unit for unity, and the  Thing  has a 
qualifier. The context of use needs to provide the extra qualifying information.
7.8.9.3.3  codingRationale : CodingRationale: The reason that this PQ or PQR was provided. More than 
one reason may be given. For possible values, see 7.5.2.4.10 CD.codingRationale.
7.8.9.3.4  translation : Set(PQR): An alternative representation of the same physical quantity expressed in 
a different unit from a different unit code system and possibly with a different value.
It is not necessary for information processing entities to check and enforce that the translations are val id 
translations of the base unit, but they are allowed to do so, and to reject instances where the translations are 
not valid.
NOTE  Translations are allowed to contain other representations in UCUM units, but there is generally no point to this 
as it is possible to convert from one UCUM form to another.
7.8.9.4  Equality
Two PQ values are equal if the value and units of their canonical forms are equal, or if their uncertainRanges 
are not null and not nullFlavored and equal. The attributes codingRationale, source, and any translations do 
not participate in the determination of equality.
7.8.9.5  Invariants
a value or an uncertain range shall be provided if not nullFlavored;
cannot provide both a value and an uncertain range;
uncertainty types SHALL be a PQ;
if uncertainties are provided, their canonical units SHALL match.
OCL for Invariants:
def: let unitsMatch (other : PQ) : Boolean = 
(canonical.unit = other.canonical.unit)
inv "null or value": isNull xor (value.oclIsDefined or 
uncertainRange.isNotNull)
inv "value xor uncertainRange": not (value.oclIsDefined and 
uncertainRange.isNotNull)
inv "uncertain types": uncertainRange.low.oclIsDefined implies 
uncertainRange.low.oclIsKindOf(PQ) and
uncertainRange.high.oclIsDefined implies 
uncertainRange.high.oclIsKindOf(PQ) and
uncertainty.oclIsDefined implies 
uncertainty.oclIsKindOf(PQ)
inv "uncertainties - canonicals": 
uncertainRange.low.oclIsDefined implies 
unitsMatch(uncertainRange.low) and
uncertainRange.high.oclIsDefined implies 
unitsMatch(uncertainRange.high) and
uncertainty.oclIsDefined implies unitsMatch(uncertainty) 
ISO/FDIS 21090:2009(E)
92  © ISO 2009 – All rights reserved
context PQ::isDifference(other : QTY): Boolean
post: other.oclIsKindOf(PQ) and 
canonical.unit.equals(other.oclAsTypeOf(PQ).canonical.unit)
7.8.9.6  Operations
7.8.9.6.1  canonical : PQ: The value converted to the form with canonical units. UCUM provides more 
information about canonical units.
7.8.9.6.2  comparable(other : QTY):BL: This and other can be compared if the units of the canonical forms 
are the same.
7.8.9.6.3  inverted():PQ: The inverted value of the PQ. Both value and unit SHALL be inverted.
7.8.9.6.4  negated[ ] : PQ: The negative value of this.
7.8.9.6.5  plus[ ] (other : PQ) : PQ: The value of the addition of this and other; if the units do not match, 
NullFlavor NI.
7.8.9.6.6  minus[ ] (other : PQ) : PQ: The value of the subtraction of other from this; if the units do not 
match, NullFlavor NI.
7.8.9.6.7  times[*] (other : PQ) : PQ: The value of the multiplication of this and other with appropriate 
changes to the units.
7.8.9.6.8  times[*] (other : REAL) : PQ: The value of the multiplication of this and other.
7.8.9.6.9  dividedBy[/] (other : PQ) : PQ: The value of this divided by other with appropriate changes to the 
units. If other is 0, then the result is nullFlavor NI.
7.8.9.6.10  dividedBy[/] (other : REAL) : PQ: The value of this divided by other. If other is 0, then the result 
is nullFlavor NI.
7.8.9.6.11  abs() : PQ: The absolute value of this.
7.8.9.6.12  max(other : PQ) : PQ: The maximum of this and other; if the units do not match, NullFlavor NI.
7.8.9.6.13  min(other : PQ) : PQ: The minimum of this and other; if the units do not match, NullFlavor NI.
7.8.9.6.14  toInterval() : IVL(PQ) : Converts this value to an interval that expresses the range covered by the 
precision of the value.
7.8.9.7  Examples
7.8.9.7.1  Plain value
<example xsi:type="PQ" value="1.1" unit="mg/mL"/>
1,0 mg/mL.
<example xsi:type="PQ" value="11" unit="mg/mL" codingRationale="R">
<translation codingRationale="O" value="0.011"
codeSystem="2.16.840.1.113883.19.10" code="grams/litre"/>
</example>
11 mg/ml as a translation from the original measurement of 0.011g/L in a local code system into UCUM units. 
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  93
7.8.9.7.2  Uncertain range
<doseQuantity xsi:type="PQ" units="1">
<uncertainRange>
<low xsi:type="PQ" value="1"/>
<high xsi:type="PQ" value="2"/>
</uncertainRange>
</doseQuantity>
This URG(PQ) specifies that patient should take 1  to  2 tablets. This might be part of a prescription 
order such as "By mouth, take  1-2 tablets every 4-6 hours when needed for severe pain to a 
maximum of 8 per day". Note that the unit is "1" – the default UCUM unit, so this matches the units 
on the low and high in the uncertainRange.
7.8.9.7.3  Using expressions
<substanceAdministration>
...
<doseQuantity xsi:type="PQ" nullFlavor="DER" unit="mL">
<expression mediaType="application/hl7-factor+xml">
<xml>
<coefficient value="30" unit="mL/kg"/>
<factor value="bodyMass"/>
</xml>
</expression>
</doseQuantity>
...
<derivedFrom>
<localVariableName value="bodyMass"/>
<monitoringObservation>
<code code="29463-7" codeSystem="2.16.840.1.113883.11.16492">
<displayName value="BODY WEIGHT:MASS:PT:^PATIENT:QN"/>
</code>
</monitoringObservation>
</derivedFrom>
</substanceAdministration>         
This example uses an HL7 specific language to illustrate how the expression attribute is used.
The dose quantity of the substance that is being administered depends on the patient‘s body mass, 30 mg per 
kilogram  of body mass. Rather than providing an actual value for the patient=s body mass, since it may be 
unknown or may change, the maximum   dose quantity is given in terms of an expression. Since no value 
attribute is provided, a nullFlavor SHALL be provided; DER is the appropriate choice  when an expression is 
provided.
The body mass may be found by checking for any observations matching the LOINC code 29463-7; if no 
matching observations can be found, the outcome of the expression will  be null or a nullFlavor, as the value 
cannot be known.
NOTE  Factor is an HL7 specific language documented in the Abstract Data Types Specification.
7.8.10  PQ.TIME
7.8.10.1  Description
A flavour that constrains PQ.
PQ.TIME constraints PQ so that it shall have units that describe a period of time. 
ISO/FDIS 21090:2009(E)
94  © ISO 2009 – All rights reserved
7.8.10.2  Invariants
the  units  shall  be a measure of time  ["such as, "s" (second), "min"  (minute), "h" (hour), "d" (day), 
"wk" (week), "a" (year)].
OCL for Invariants:
inv "SHALL be a unit of time": canonical.unit = "s"
7.8.11  PQR (physical quantity representation)
7.8.11.1  Description
Specializes CD.CV.
An extension of the coded value datatype representing a physical quantity using a unit from any code system. 
Used to show alternative representation for a physical quantity. The coded value represents the unit (usually 
in some other coding system than UCUM).
7.8.11.2  ISO/IEC 11404 syntax
type PQR = class (
validTimeLow : characterstring,
validTimeHigh : characterstring,
controlInformationRoot : characterstring,
controlInformationExtension : characterstring,
nullFlavor : NullFlavor,
updateMode : UpdateMode,
flavorId : Set(characterstring),
code : characterstring,
codeSystem : characterstring,
codeSystemName : characterstring,
codeSystemVersion : characterstring,
valueSet : characterstring,
valueSetVersion : characterstring,
displayName : ST,
originalText : ED.TEXT,
codingRationale : CodingRationale),
translation : Set(CD),
source : CD,
value : Decimal
)
7.8.11.3  Attributes
7.8.11.3.1  value: Decimal  :  The magnitude of the measurement value in terms of the unit specified by this 
code.
7.8.11.4  Equality
Two PQR values are equal if their value, code and codeSystem are equal. The other attributes do not 
participate in the determination of equality. 
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  95
7.8.11.5  Invariants
a unit is required;
no source;
no originalText.
NOTE  There is only one originalText, that for the physical quantity itself.
OCL for Invariants:
inv "null or value": isNull xor value.oclIsDefined 
inv "no originalText": originalText.oclIsUndefined
inv "no updateMode or History on PQR": noUpdateOrHistory
inv "no translations": translation.isEmpty
inv "no source": source.oclIsUndefined 
7.8.12  MO (monetary amount)
7.8.12.1  Description
Specializes QTY.
An MO is a quantity expressing the amount of money in some currency.
Currencies are the units in which monetary amounts are denominated in different economic regions. While the 
monetary amount is a single kind of quantity (money) the exchange rates between the different units are 
variable. This is the principle difference between PQ and MO, and the reason wh y currency units are not 
physical units.
7.8.12.2  ISO/IEC 11404 syntax
type MO = class (
validTimeLow : characterstring,
validTimeHigh : characterstring,
controlInformationRoot : characterstring,
controlInformationExtension : characterstring,
nullFlavor : NullFlavor,
updateMode : UpdateMode,
flavorId : Set(characterstring),
expression : ED,
originalText : ED.TEXT,
uncertainty : QTY,
uncertaintyType : UncertaintyType,
uncertainRange : IVL(QTY)
value : Decimal,
currency : characterstring
) 
ISO/FDIS 21090:2009(E)
96  © ISO 2009 – All rights reserved
7.8.12.3  Attributes
7.8.12.3.1  value : Decimal:  The value of the MO. MO values are usually precise to 0.01 (one cent, penny, 
paisa, etc.) or 1 (yen, forint, etc), though other precisions exist. ISO 4217 documents the appropriate precision 
for most currencies.
7.8.12.3.2  currency : Code: The currency unit as defined in ISO 4217.
7.8.12.4  Equality
Two MO  values are equal if their value and currency attributes are equal, or if their uncertainRanges are not 
null and not nullFlavored and equal.
7.8.12.5  Invariants
if not nullFlavored, a value or an uncertain range SHALL be present;
if not nullFlavored, a currency SHALL be defined;
cannot provide both a value and an uncertain range;
uncertainty types SHALL be a PQ;
if uncertainties are provided, their canonical units SHALL match.
OCL for Invariants:
def: let currencyMatches (other : MO) : Boolean = 
currency = other.currency
inv "null or currency": isNull xor currency.oclIsDefined
inv "null or value": isNull xor (value.oclIsDefined or 
uncertainRange.isNotNull)
inv "value xor uncertainRange": not (value.oclIsDefined and 
uncertainRange.isNotNull)
inv "uncertain types": uncertainRange.low.oclIsDefined implies 
uncertainRange.low.oclIsKindOf(MO) and
uncertainRange.high.oclIsDefined implies
uncertainRange.high.oclIsKindOf(MO) and
uncertainty.oclIsDefined implies 
uncertainty.oclIsKindOf(MO)
inv "uncertainties - currencies":
uncertainRange.low.oclIsDefined implies 
currencyMatches(uncertainRange.low) and
uncertainRange.high.oclIsDefined implies 
currencyMatches(uncertainRange.high) and
uncertainty.oclIsDefined implies 
currencyMatches(uncertainty)
context CO::isDifference(other : QTY): Boolean
post: other.oclIsKindOf(MO)
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  97
7.8.12.6  Operations
7.8.12.6.1  plus[ ] (other : MO) : MO:  The value of the addition of this and other; if the currencies do not 
match, NullFlavor NI.
7.8.12.6.2  minus[ ] (other : MO) : MO:  The value of the subtraction of other from this; if the currencies do 
not match, NullFlavor NI.
7.8.12.6.3  times[*] (other : REAL) : MO: The value of the multiplication of this by other.
7.8.12.6.4  dividedBy[/] (other : REAL) : MO:  The value of this divided by other. If other is 0, then the result 
is nullFlavor NI.
7.8.12.6.5  max(other : MO) : MO: The maximum of this and other.
7.8.12.6.6  min(other : MO) : MO: The minimum of this and other.
7.8.12.6.7  comparable(other : QTY):BL: This and other can be compared if their currencies are the same.
7.8.12.7  Examples
<example xsi:type="MO" value="42" currency="AUD"/>
A$42 Australian dollars.
7.8.13  TS (point in time)
7.8.13.1  Description
Specializes QTY.
A quantity specifying a point on the axis of natural time. A point in time is most often represented as a 
calendar expression.
7.8.13.2  ISO/IEC 11404 syntax
type TS = class (
validTimeLow : characterstring,
validTimeHigh : characterstring,
controlInformationRoot : characterstring,
controlInformationExtension : characterstring,
nullFlavor : NullFlavor,
updateMode : UpdateMode,
flavorId : Set(characterstring),
expression : ED,
originalText : ED.TEXT,
uncertainty : QTY,
uncertaintyType : UncertaintyType,
uncertainRange : IVL(QTY)
value : characterstring
) 
ISO/FDIS 21090:2009(E)
98  © ISO 2009 – All rights reserved
7.8.13.3  Attributes
7.8.13.3.1  value : String: The value of the TS. value is a string with the format 
"YYYY[MM[DD[HH[MM[SS[.U[U[U[U]]]]]]]]][+|-ZZzz]" that conforms to the constrained ISO 8601 defined in ISO 
8824 (ASN.1) under clause 32 (generalized time). The format should be used to the degree of precision that is 
appropriate.
7.8.13.4  Equality
Two nonNull TS values are only equal if their time and precision are equal, or if their uncertainRanges are not 
null and not nullFlavored  and equal. If both TS value have time zones, the values should be be corrected for 
timezone before comparison. If neither TS value has a timezone, then they may be compared for equality 
without correction. If only one TS value has a timezone, then the equality is nullFlavor NI.
7.8.13.5  Invariants
if the TS is not nullFlavored, a value or an uncertain range SHALL be present;
if a value is present, at least a full year SHALL be specified;
uncertainty types SHALL be a PQ with a unit of TIME;
cannot provide both a value and an uncertain range.
OCL for Invariants:
def: let hasTimezone : Boolean = value.pos("+") > 0 
or value.pos("-") > 0
inv "value xor uncertainRange": not (value.oclIsDefined and
uncertainRange.isNotNull)
inv "null or value": isNotNull implies (value.oclIsDefined 
or uncertainRange.isNotNull)
inv "uncertain types": uncertainRange.low.oclIsDefined implies 
uncertainRange.low.oclIsKindOf(PQ) and
uncertainRange.high.oclIsDefined implies 
uncertainRange.high.oclIsKindOf(PQ) and
uncertainty.oclIsDefined implies 
uncertainty.oclIsKindOf(PQ)
inv "uncertainties - units": uncertainRange.low.oclIsDefined 
implies uncertainRange.canonical.unit = "s" and
uncertainRange.high.oclIsDefined implies
uncertainRange.high.canonical.unit = "s" and
uncertainty.oclIsDefined implies 
uncertainty.canonical.unit = "s"
context TS::isDifference(other : QTY): Boolean
post: other.oclIsKindOf(TS) and canonical.unit = "s"
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  99
7.8.13.6  Operations
7.8.13.6.1  plus( ) (other : PQ) : TS: The value of the addition of this and other; if other.units are not a time, 
NullFlavor NI.
7.8.13.6.2  minus[ ] (other : PQ) : TS: The value of the subtraction of other from this; if other.units are not a 
time, NullFlavor NI.
7.8.13.6.3  minus[ ] (other : TS) : PQ:  The value of the subtraction of other from this; the return value will 
have units that are a time.
7.8.13.6.4  max(other : TS) : TS: The maximum of this and other.
7.8.13.6.5  min(other : TS) : TS: The minimum of this and other.
7.8.13.6.6  toInterval() : IVL(TS):  Converts this value  to an interval that expresses the range covered by the 
precision.
7.8.13.6.7  precision() : Integer : The number of significant digits of the timestamp value.
7.8.13.6.8  comparable(other : QTY):BL: This and other can be compared if other is a TS.
7.8.13.7  Examples
7.8.13.7.1  Instant in time
<example xsi:type="TS" value="20031101234511+0500"/>
11:45pm on 01-Nov 2003 at +5 from UTC (e.g. US eastern).
7.8.13.7.2  Birth date 
<example xsi:type="TS" value="1945"/>
Patient was born in 1945. Month and day are unknown.
The outcome of toIVL() for this example would be the following interval:
<example xsi:type="IVL_TS" lowClosed="true" highClosed="false">
<low value="194501010000.0000"/>
<high value="194601010000.0000"/>
</example>
7.8.14  TS.DATE
7.8.14.1  Description
A flavour that constrains TS.
TS.DATE constrains TS so that it may only contain a date value. 
ISO/FDIS 21090:2009(E)
100  © ISO 2009 – All rights reserved
7.8.14.2  Invariants
no timezone;
no hours, minutes, seconds or milliseconds.
OCL for Invariants
inv "Date": not hasTimezone and value.size <= 8
7.8.15  TS.DATE.FULL
7.8.15.1  Description
A flavour that constrains TS.DATE
TS.DATE.FULL constrains TS.DATE so that it SHALL contain reference to a particular day.
7.8.15.2  Invariants
a full day shall be specified.
OCL for Invariants
inv "Full Date": value.size = 8
7.8.16  TS.DATETIME
7.8.16.1  Description
A flavour that constrains TS
TS.DATETIME constrains a TS so that its precision can not be more precise than seconds.
7.8.16.2  Invariants
milliseconds shall be blank.
OCL for Invariants
inv "DateTime": (value.size <= 14) or (hasTimezone and 
value.size <= 19)
7.8.17  TS.DATETIME.FULL
7.8.17.1  Description
A flavour that constrains TS.DATETIME.
TS.DATETIME.FULL  constrains TS.DATETIME so that it shall  contain reference to a particular second with a 
timezone. 
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  101
7.8.17.2  Invariants
a timezone is required;
a full time, including seconds and timezone, is required.
OCL for Invariants
inv "Full DateTime": value.size = 19 and hasTimezone
7.8.18  TS.INSTANT
7.8.18.1  Description
A flavour that constrains TS.
TS.INSTANT  constrains TS so that it SHALL contain reference to a particular instant of time, accurate to  four
decimal places on the second, with a timezone.
7.8.18.2  Invariants
a timezone is required;
a full time, including fractions of seconds to 4 decimal and timezone, is required .
OCL for Invariants
inv "Instant": value.size = 24 and hasTimezone 
ISO/FDIS 21090:2009(E)
102  © ISO 2009 – All rights reserved
7.9  Collections Of datatypes
7.9.1  Overview
These datatypes data types are collections of discrete elements. See Figure 8.
Figure 8 — Collection datatypes
7.9.2  COLL
7.9.2.1  Description
Abstract. Specializes ANY.
Parameter: T : ANY
A collection of values which can be enumerated using an iterator. 
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  103
7.9.2.2  Operations
7.9.2.2.1  size() : INT: The number of elements in this collection.
7.9.2.2.2  includes(object : T) : BL:  True if object is an element of this  collection. The equals operation is 
used to evaluate whether object is an element of this collection. This is also known as "contains?: a collection 
contains object o if includes(o) returns true.
7.9.2.2.3  excludes(object : T) : BL: True if object is not an element of this collection. The equals operation 
is used to evaluate whether object is not an element of this collection.
7.9.2.2.4  count(object : T) : INT:  The number of times that object occurs in the this  collection. The equals 
operation is used to evaluate how many times object is in the collection.
7.9.2.2.5  includesAll(c2 : Collection(T)) : BL: True if this collection contains all the elements of c2.
7.9.2.2.6  excludesAll(c2 : Collection(T)) : BL: True if this collection contains none of the elements of c2.
7.9.2.2.7  isEmpty() : BL: True if this collection is the empty collection.
7.9.2.2.8  notEmpty() : BL: True if this collection is not the empty collection.
7.9.2.3  Equality
Equality is not defined for COLL as it is an abstract type.
7.9.3  DSET (discrete set)
7.9.3.1  Description
Specializes COLL.
Parameter: T : ANY.
A collection that contains distinct and discrete values in no particular order.
Valid (non-nullFlavored)  discrete sets  shall  not contain duplicate items. The context of use  shall  define how 
elements are compared when checking set element uniqueness. By default, the uniqueness definition is 
based on the equality rules defined in  this International Standard: Discrete sets  shall  not contain different 
values that are equal, and they  shall  not contain items that are null or have a nullFlavor, where the equality 
cannot be evaluated. When a  discrete set is actually used, the context of use may specify an alternative 
definition for how uniqueness is evaluated. This alternative definition may allow for nullFlavored values in a 
proper set. Information  processing entities providing alternative definitions for the uniqueness of a set  shall 
make it clear in the conformance statement how such definitions are provided so that there is no ambiguity.
While proper (non-nullFlavored) sets will not contain values that do not meet the definition of uniqueness, 
discrete sets with a nullFlavor may contain elements duplicate values or values that have a nullFlavor. 
Discrete  sets  that are labeled as mandatory cannot have a nullFlavor and therefore cannot contain such 
values..
7.9.3.2  ISO/IEC 11404 syntax
type DSET (T : ANY) = class (
validTimeLow : characterstring,
validTimeHigh : characterstring,
controlInformationRoot : characterstring, 
ISO/FDIS 21090:2009(E)
104  © ISO 2009 – All rights reserved
controlInformationExtension : characterstring,
nullFlavor : NullFlavor,
updateMode : UpdateMode,
flavorId : Set(characterstring),
item : Bag(T)
)
NOTE  DSET specifies a set of discrete items. If the items are in an ordered  but discrete domain (i.e. INT) and they 
represent a sequence of concurrent values such as 2,3,4,5, then the same set can also be specified by a QSET such as 
IVL(2..5). However for all other cases, there is no overlap between QSET and DSET.
7.9.3.3  Attributes
7.9.3.3.1  item : Bag(T): The contents of the set.
This is an example of the primitive type wrapping pattern. See 6.3 for more details.
The items are held in a bag because the context of use specifies exactly how uniqueness is specified for t he 
DSET. The OCL kernel  set  applies a fixed definition of equality  –  the equality specified for the type  –  which 
may be less granular that the context of use. Though the internal structure allows duplicates, all the items in 
the set  shall  be unique according the definition provided by the context of use. If the context of use does not 
make this clear, the default behavior is the equality definitions provided in this International Standard. 
NOTE  There is no support for the formal definition of the uniqueness constraints because of the cost of providing 
such a framework, and the lack of apparent use for one.
7.9.3.4  Equality
Two nonNull DSETs are equal if they contain the same elements.
NOTE 1  The determination of element content is based on the same semantic equals  as defined in  this International 
Standard, so it is possible that a DSET(CD) can be equal to DSET(CS), for instance.
NOTE 2  It is possible for a DSET(INT) and a QSET(INT) to be equal, if they both contain the same elements.
7.9.3.5  Invariants
(none)
NOTE  Rules about updateMode or history are applied to item where BAG(T) is used. 
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  105
7.9.3.6  Operations
7.9.3.6.1  union(s : DSET(T)) : DSET(T): The SET containing all elements of this plus all the elements of 
other, with any duplicates removed. union is an alias for including.
7.9.3.6.2  union(bag : BAG(T)) : BAG(T): The SET containing all elements of this plus all the elements of 
other, with any duplicates removed
7.9.3.6.3  intersection(s : DSET(T)) : DSET(T): The intersection of this and s (i.e, the SET of all elements 
that are in both this and s).
7.9.3.6.4  intersection(bag : BAG(T)) : DSET(T): The intersection of this and bag.
7.9.3.6.5  minus[ ](s : DSET(T)) : DSET(T): The elements of this, which are not in s.
7.9.3.6.6  including(object : T) : DSET(T): The SET containing all elements of this plus object if it is not 
already in the set. including is an alias for union.
7.9.3.6.7  including(other : DSET(T)) : DSET(T):  The SET containing all elements of this plus all the 
elements of other, with any duplicates removed.
7.9.3.6.8  excluding(object : T) : DSET(T): The SET containing all elements of this without object.
7.9.3.6.9  excluding(other : DSET(T)) : DSET(T):  The SET containing all elements of this with any 
elements of other removed .
7.9.3.6.10  symmetricDifference(s : DSET(T)) : DSET(T):  The sets containing all the elements that are in 
this or s.
7.9.3.6.11  asList() : LIST(T): A sequence that contains all the elements from this, in an undefined order.
7.9.3.6.12  asBag() : BAG(T): The bag that contains all the elements from this.
7.9.3.7  Examples
7.9.3.7.1  Integer Sets
<example xsi:type="DSET_INT">
<item value="3"/>
<item value="6"/>
<item value="9"/>
<item value="11"/>
</example>
The set of integers (3,6,9,11). The set type specifies the type of the items in the set (xsi:type="DSET" is not 
correct as SET is a generic type).
<example xsi:type="DSET_INT">
<item value="11"/>
<item value="6"/>
<item value="9"/>
<item value="3"/>
</example>
This set is identical to the previous set – order has no significant in sets. 
ISO/FDIS 21090:2009(E)
106  © ISO 2009 – All rights reserved
7.9.3.7.2  Problems with sets
<example xsi:type="DSET_TEL">
<item value="tel:+15556667777" use="H"/>
<item nullFlavor="UNK" use="WP"/>
</example>
A set of telephone numbers, with a known home telephone number, and an unknown work number. 
IMPORTANT: This is an illegal set: sets cannot contain nullValues.
<example xsi:type="DSET_TEL" nullFlavor="UNK">
<item value="tel:+15556667777" use="H"/>
<item nullFlavor="UNK" use="WP"/>
</example>
This is the same set properly represented. Because one of the values is unknown, the set itself is unknown.
NOTE  In general, addresses and telephone numbers should not be model led as DSETs for this reason, as once they 
are marked mandatory, unknown numbers can no longer be represented.
<example xsi:type="DSET_REAL">
<item value="3.1"/>
<item value="3.5"/>
</example>
Where the items are not discrete (PQ, MO, REAL), a discrete set is rather ambiguous. For example, is 3.103 a 
member of this set or not? For this reason, DSET should not be used with these types.
7.9.4  LIST (sequence)
7.9.4.1  Description
Specializes COLL.
Parameter: T : ANY.
A collection that contains discrete (but not necessarily distinct) values in a defined sequence. Values are also 
assigned an offset; the first value has the offset of zero.
The sequence is an ordered collection of values, but no particular order is inherently associated with the 
sequence. The meaning of the order of the items should be defined where a LIST is used.  In some cases, the 
order is fixed ( e.g. HIST), but in other cases, the order is not fixed: only the meaning associated with the 
order in the instance is defined (e.g. EN, AD).
7.9.4.2  ISO/IEC 11404 syntax
type LIST (T : ANY) = class (
validTimeLow : characterstring,
validTimeHigh : characterstring,
controlInformationRoot : characterstring,
controlInformationExtension : characterstring,
nullFlavor : NullFlavor,
updateMode : UpdateMode,
flavorId : Set(characterstring),
item : Sequence(T)
) 
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  107
7.9.4.3  Attributes
7.9.4.3.1  item : Sequence(T): The contents of the sequence.
This is an example of the primitive type wrapping pattern. See 6.3 for more details.
7.9.4.4  Equality
Two lists are equal if  –  and only if  –  they are both  empty, or if they contain the same elements in the same 
order.
NOTE 1  The determination of element content is based on the same semantic equals as defined in  this International 
Standard, so it is possible that a LIST(ED) can be equal to LIST(ST), for inst ance.
NOTE 2  SLIST equality is based on the equality of a sequence of values, so a SLIST<T> may be equal to a LIST<T>.
7.9.4.5  Invariants
(none)
NOTE  Rules about updateMode or history are applied to item where BAG(T) is used.
7.9.4.6  Operations
7.9.4.6.1  append(s : LIST(T)) : LIST(T): The LIST consisting of all elements in this, followed by all 
elements in s.
7.9.4.6.2  append(s : DSET(T)) : LIST(T):  The LIST consisting of all elements in this, followed by all 
elements in s in some arbitrary order. This is an alias for including.
7.9.4.6.3  append (object: T) : LIST(T):  The LIST of elements, consisting of all elements of this, followed 
by object.
7.9.4.6.4  prepend(object : T) : LIST(T): The LIST consisting of object, followed by all elements in this.
7.9.4.6.5  insertAt(object : T, index : Integer) : LIST(T):  The LIST consisting of this with object inserted at 
position index. If index is equal or greater than the length of the LIST, the value will be null.
7.9.4.6.6  subList(lower : Integer, upper : Integer) : LIST(T):  The sub-LIST of this starting at number 
lower, up to and including element number upper. If lower or upper are equal or greater than the length of the 
LIST or less than 0, or lower is greater than upper, the value will be null.
7.9.4.6.7  at(i : Integer) : T:  The i-th element of LIST. If i is equal or greater than the length of the L IST, the 
value will be null. The first element of the list has i = 0
7.9.4.6.8  indexOf(obj : T) : Integer:  The index of object obj in the LIST or null if the item exists other than 
once (not at all, or multiple times).
7.9.4.6.9  first() : T: The first element in this or null if it is empty.
7.9.4.6.10  last() : T: The last element in this or null if it is empty.
7.9.4.6.11  tail() : LIST(T): The list with the first element removed or null if it is empty. 
ISO/FDIS 21090:2009(E)
108  © ISO 2009 – All rights reserved
7.9.4.6.12  including(object : T) : LIST(T): The LIST containing all elements of this plus object added as the 
last element. This is an alias for append.
7.9.4.6.13  excluding(object : T) : LIST(T):  The LIST containing all elements of this apart from all 
occurrences of object. The order of the remaining elements is not changed.
7.9.4.6.14  asBag() : BAG(T):  The Bag containing all the elements from this, including duplicates, or a 
nullFlavor as appropriate.
7.9.4.6.15  asSet() : DSET(T): The Set containing all the elements from this, with duplicated removed.
7.9.4.7  Examples
<example xsi:type="LIST_INT">
<item value="3"/>
<item value="11"/>
<item value="6"/>
<item value="9"/>
</example>
A list of integers. The order is significant and SHALL always be maintained.
7.9.5  GLIST (generated sequence)
7.9.5.1  Description
Specializes ANY.
Parameter: T : QTY.
A periodic or monotone sequence of values generated from a few parameters, rather than being enumerated. 
Used to specify regular sampling points for biosignals.
7.9.5.2  ISO/IEC 11404 syntax
type GLIST (T : ANY) = class (
validTimeLow : characterstring,
validTimeHigh : characterstring,
controlInformationRoot : characterstring,
controlInformationExtension : characterstring,
nullFlavor : NullFlavor,
updateMode : UpdateMode,
flavorId : Set(characterstring),
head: T,
increment : QTY,
denominator : integer,
period : integer
)
7.9.5.3  Attributes
7.9.5.3.1  head : T: The first item in this sequence. This is the start-value of the generated list.
7.9.5.3.2  increment : QTY: The difference between one value and its previous different value.
EXAMPLE:  To generate the sequence (1; 4; 7; 10; 13; ...) the increment is 3; likewise to generate the sequence (1; 1; 
4; 4; 7; 7; 10; 10; 13; 13; ...) the increment is also 3. The actual type QTY will be dictated by the type of T. The value of
increment SHALL be positive. 
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  109
7.9.5.3.3  denominator : Integer: The integer by which the index for the sequence is divided, effectively the 
number of times the sequence generates the same sequence item value before incrementing to the next 
sequence item value.
EXAMPLE:  To generate the sequence (1; 1; 1; 2; 2; 2; 3; 3; 3; ...) the denominator is 3.
The use of the denominator  is to allow multiple generated sequences to periodically scan a multidimensional 
space. For example, an (abstract) TV screen uses 2 such generators for the columns and rows of pixels. For 
instance, if there are 200 scan lines and 320 raster colunmns, the  column-generator would have denominator 
1 and the line-generator would have denominator 320.
7.9.5.3.4  period : Integer: If not null or nullFlavored, specifies that the sequence alternates, i.e., after this 
many increments, the sequence item values roll over to start from the initial sequence item value.
EXAMPLE:  The sequence (1; 2; 3; 1; 2; 3; 1; 2; 3; ...) has period 3; also the sequence (1; 1; 2; 2; 3; 3; 1; 1; 2; 2; 3; 
3; ...) has period 3.
The period allows to repeatedly sample the same sample space. The "waveform" of this periodic generator is 
always a "saw", just like the x-function of your oscilloscope.
7.9.5.4  Equality
GLIST is a list generator. Two GLISTs are equal if they specify the same sequence of elements.
Since GLISTs are infinite, and LISTs cannot be infinite, they can never been equal.
7.9.5.5  Invariants
if the GLIST is not nullFlavored, all attributes but the period are required ;
denominator SHALL be positive;
the period SHALL be positive.
OCL for Invariants:
inv "required attributes": isNull xor (head.isNotNull and
increment.isNotNull and denominator.oclIsDefined)
inv "denominator SHALL be positive": denominator.oclIsDefined
implies denominator > 0
inv "period SHALL be positive": period.oclIsDefined implies
period > 0
inv "no updateMode or History on GLIST attributes": 
noUpdateOrHistory(head) and noUpdateOrHistory(increment)
7.9.5.6  Operations
7.9.5.6.1  subList(lower : Integer, upper : Integer) : LIST(T): A sub-LIST of this GLIST, starting at number 
lower, up to and including element number upper. If lower or upper ar e equal or greater than the length of the 
LIST or less than 0, or lower is greater than upper, the value will be null.
7.9.5.6.2  at(i : Integer) : T:  The i-th element of LIST. If i is equal or greater than the length of the LIST, the 
value will be null. 
ISO/FDIS 21090:2009(E)
110  © ISO 2009 – All rights reserved
7.9.5.7  Examples
<example xsi:type="GLIST_PQ" period="100" denominator="100">
<head value="0" unit="V"/>
<increment xsi:type="PQ" value="1" unit="mV"/>
</example>
The x-wave of a digital oscillograph scanning between 0 and 100 mV in 100 steps of 1 mV. The frequency is 
unknown from these data as we do not know how much time elapses between each step of the index. 
Example 65
<example xsi:type="GLIST_TS" denominator="1">
<head value="20020729203000"/>
<increment xsi:type="PQ" value="100" unit="us"/>
</example>
A timebase from June 29, 2002 at 8:30 PM with 100 µs between each steps of the index. If combined with the 
previous generator as a second sampling dimension this would now describe our digital oscilloscope's x -timebase as 1 mV per 100  µs. At 100 steps per period, the period is 10 ms, which is equal to a frequency of 
100 Hz. 
Other examples:
Head  Increment  Deno-minator
Period  Meaning
0  1  1
8 (NullFlavor.
PINF)
The identity-sequence where each 
item is equal to its index.
198706052000  2 h  1
8 (NullFlavor.
PINF)
Sequence starting on June 5, 1987 at 
7 PM and incrementing every two 
hours: 9 PM, 11 PM, 1 AM (June 6), 
3 AM, 5 AM and so on.
0 V  1 mV  1  100
The x-wave of a digital oscillograph 
scanning between 0 mV and 100 mV 
in 100 steps of 1 mV. The frequency 
is unknown from these data as we do 
not know how much time elapses 
between each step of the index.
2002072920300  100 µs  1
8 (NullFlavor.
PINF)
A timebase from June 29, 2002 at 
8:30 PM with 100 µs between each 
step of the index. If combined with 
the previous generator as a second 
sampling dimension this would now 
describe our digital oscilloscope's x-timebase as 1 mV per 100 µs. At 
100 steps per period, the period is 
10 ms, which is equal to a frequency 
of 100 Hz.
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  111
0 V  1 mV  100  100
Combining this generator to the 
previous two generators could 
describe a three-dimensional 
sampling space with two voltages 
and time. This generator also steps 
at 1 mV and has 100 steps per 
period, however, it only steps every 
100 index increments, so, the first 
voltage generator makes one full 
cycle before this generator is 
incremented. One can think of the 
two voltages as "rows" and "columns" 
of a "sampling frame". With the 
previous generator as the timebase, 
this results in a scan of sampling 
frames of 100 mV   100 mV with a 
frame rate of 1 Hz.
7.9.6  SLIST (sampled sequence)
7.9.6.1  Description
Specializes ANY.
Parameter: T : QTY.
A sequence of sampled values scaled and translated from a list of integer values. Used to specify sampled 
biosignals.
7.9.6.2  ISO/IEC 11404 syntax
type SLIST (T : ANY) = class (
validTimeLow : characterstring,
validTimeHigh : characterstring,
controlInformationRoot : characterstring,
controlInformationExtension : characterstring,
nullFlavor : NullFlavor,
updateMode : UpdateMode,
flavorId : Set(characterstring),
origin : T,
scale : QTY,
digits : Sequence(INT)
)
7.9.6.3  Attributes
7.9.6.3.1  origin : T:  The origin of the list item value scale. The physical quantity that a zero-digit in the 
sequence would represent.
7.9.6.3.2  scale : QTY:  A ratio-scale quantity that is factored out of the digit sequence. The actual type QTY 
will be dictated by the type of T.
7.9.6.3.3  digits : Sequence(INT): A sequence of raw digits for the sample values. This is typically the raw 
output of an A/D converter. 
ISO/FDIS 21090:2009(E)
112  © ISO 2009 – All rights reserved
7.9.6.4  Equality
SLIST specifies a LIST. Two SLISTs are equal if they specify the same sequence of values.
NOTE  Because SLIST specifies a LIST, and equality is basd on the LIST that is specified, it is possible that a 
LIST<PQ> will be equal to a SLIST<PQ>.
7.9.6.5  Invariants
scale shall be a difference from the origin;
if the SLIST is not nullFlavored, an origin and at least one digit is required .
OCL for Invariants:
inv "required attributes": isNull xor (origin.isNotNull and
digits->select(d | d.isNotNull)->size > 0)
inv "type of scale": scale.oclIsDefined implies
origin.isDifference(scale)
inv "no updateMode or History on SLIST attributes": 
noUpdateOrHistory(origin) and noUpdateOrHistory(scale)
and digits->forAll(d | noUpdateOrHistory(d))
7.9.6.6  Operations
7.9.6.6.1  insertAt(object : T, index : Integer) : SLIST(T):  The SLIST consisting of this SLIST with object 
inserted at position index. If index is equal  to  or greater than the length of the LIST, the value will be null. If 
object does not compare with the other objects in the list, the value will be null.
7.9.6.6.2  subList(lower : Integer, upper : Integer) : SLIST(T):  The sub-LIST of this starting at number 
lower,  up to and including element number upper. If lower or upper are equal or greater than the length of the 
LIST or less than 0, or lower is greater than upper, the value will be null.
7.9.6.6.3  at(i : Integer) : T:  The i-th element of LIST. If i is equal or greater than the length of the LIST, the 
value will be null.
7.9.6.6.4  indexOf(obj : T) : Integer:  The index of object obj in the LIST or null if the item exists more than 
once.
7.9.6.6.5  first() : T: The first element in this or null if it is empty.
7.9.6.6.6  last() : T: The last element in this or null if it is empty.
7.9.6.6.7  tail() : SLIST(T): The list with the first element removed or null if it is empty.
7.9.6.6.8  including(object : T) : SLIST(T): The LIST containing all elements of this plus object added as 
the last element.
7.9.6.6.9  excluding(object : T) : SLIST(T): The LIST containing all elements of this apart from all 
occurrences of object. The order of the remaining elements is not changed. 
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  113
7.9.6.7  Examples
<example xsi:type="SLIST_PQ">
<origin value='0' unit='uV'/>
<scale xsi:type="PQ" value='2.5' unit='uV'/>
<digit value="-4"/>
<digit value="-13"/>
<digit value="-18"/>
<digit value="-18"/>
<digit value="-18"/>
<digit value="-17"/>
<digit value="-16"/>
<digit value="-16"/>
<digit value="-16"/>
<digit value="-16"/>
<digit value="-16"/>
<digit value="-17"/>
<digit value="-18"/>
<digit value="-18"/>
<digit value="-1"/>
<digit value="-17"/>
<digit value="-16"/>
<digit value="-16"/>
<digit value="-16"/>
<digit value="-15"/>
<digit value="-13"/>
<digit value="-11"/>
<digit value="-10"/>
<digit value="-10"/>
<digit value="-9"/>
<digit value="-6"/>
<digit value="-4"/>
<digit value="-5"/>
<digit value="-5"/>
<digit value="-3"/>
<digit value="-2"/>
<digit value="-2"/>
<digit value="-1"/>
<digit value="1"/>
<digit value="2"/>
<digit value="3"/>
<digit value=""/>
<digit value="7"/>
<digit value="8"/>
<digit value="9"/>
<digit value="10"/>
<digit value="11"/>
<digit value="12"/>
<digit value="13"/>
<digit value="15"/>
<digit value="17"/>
<digit value="19"/>
<digit value="21"/>
<digit value="23"/>
<digit value="25"/>
<digit value="27"/>
<digit value="29"/>
<digit value="30"/>
<digit value="30"/>
<digit value="31"/>
<digit value="34"/>
<digit value="37"/>
<digit value="40"/>
<digit value="43"/>
<digit value="45"/>
<digit value="4"/>
<digit value="46"/> 
ISO/FDIS 21090:2009(E)
114  © ISO 2009 – All rights reserved
<digit value="46"/>
<digit value="46"/>
<digit value="46"/>
<digit value="47"/>
<digit value="49"/>
<digit value="51"/>
<digit value="53"/>
<digit value="55"/>
<digit value="57"/>
<digit value="59"/>
<digit value="60"/>
<digit value="59"/>
<digit value="58"/>
<digit value="58"/>
<digit value="58"/>
<digit value="57"/>
<digit value="56"/>
<digit value="56"/>
<digit value="56"/>
<digit value="57"/>
<digit value="57"/>
<digit value="5"/>
<digit value="53"/>
<digit value="50"/>
<digit value="47"/>
<digit value="45"/>
<digit value="74"/>
<digit value="51"/>
<digit value="38"/>
<digit value="33"/>
<digit value="31"/>
<digit value="28"/>
<digit value="25"/>
<digit value="21"/>
<digit value="16"/>
<digit value="14"/>
<digit value="15"/>
<digit value="13"/>
<digit value="9"/>
<digit value="7"/>
<digit value="4"/>
<digit value="1"/>
<digit value="-1"/>
<digit value="-3"/>
<digit value="-4"/>
<digit value="-6"/>
<digit value="-10"/>
<digit value="-12"/>
<digit value="-13"/>
<digit value="-12"/>
<digit value="-12"/>
<digit value="-17"/>
<digit value="-18"/>
<digit value="-18"/>
<digit value="-18"/>
<digit value="-19"/>
<digit value="-20"/>
<digit value="-21"/>
<digit value="-20"/>
<digit value="-20"/>
<digit value="-20"/>
<digit value="-20"/>
<digit value="-2"/>
...
<digit value="2"/>
<digit value="1"/>
<digit value="0"/> 
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  115
<digit value="0"/>
<digit value="0"/>
<digit value="1"/>
<digit value="2"/>
<digit value="2"/>
<digit value="1"/>
<digit value="1"/>
<digit value="1"/>
<digit value="0"/>
<digit value="-1"/>
<digit value="0"/>
<digit value="1"/>
<digit value="1"/>
<digit value="1"/>
<digit value="1"/>
<digit value="2"/>
<digit nullFlavor="UNK"/>
</example>
This example shows Lead II of an EKG tracing, with origin calibrated at 0 µV and with a scale factor of 2,5 µV. 
The last measurement failed (to show example of nullFlavor).
7.9.7  HIST (history)
7.9.7.1  Description
Specializes LIST.
Parameter: T : ANY.
A collection that set of items in historical order.
7.9.7.2  ISO/IEC 11404 syntax
type HIST (T : ANY) = class (
validTimeLow : characterstring,
validTimeHigh : characterstring,
controlInformationRoot : characterstring,
controlInformationExtension : characterstring,
nullFlavor : NullFlavor,
updateMode : UpdateMode,
flavorId : Set(characterstring),
item : Set(T)
)
NOTE  The historical information pertains to the correctness of the information rather than the system's knowledge of 
the actual information. For further information see 7.3.2.
7.9.7.3  Invariants
all items in the list shall have at either validTimeLow or validTimeHigh non-null;
the  validTime periods on the list  shall  not overlap, and the items  shall  be ordered in ascending 
chronological order.
OCL for Invariants:
inv "validTime required": item->forAll(i | 
i.validTimeLow.oclIsDefined or 
i.validTimeHigh.oclIsDefined) 
ISO/FDIS 21090:2009(E)
116  © ISO 2009 – All rights reserved
7.9.7.4  Examples
<example xsi:type="HIST_TEL">
<item nullFlavor="UNK" use="WP H" validTimeHigh="199206"/>
<item value="tel:+15552225543" use="H" validTimeLow="199206" 
validTimeHigh="199207"/>
<item value="tel:+15556667777" use="H" validTimeLow="199207"/>
</example>
This specifies a known history of home phone numbers.
7.9.8  BAG (bag)
7.9.8.1  Description
Specializes COLL.
Parameter: T : ANY.
An unordered collection of values, where each value can be contained more than once in the collection.
7.9.8.2  ISO/IEC 11404 syntax
type BAG (T : ANY) = class (
validTimeLow : characterstring,
validTimeHigh : characterstring,
controlInformationRoot : characterstring,
controlInformationExtension : characterstring,
nullFlavor : NullFlavor,
updateMode : UpdateMode,
flavorId : Set(characterstring),
item : Bag(T)
)
7.9.8.3  Attributes
7.9.8.3.1  item : Bag(T): The contents of the Bag.
This is an example of the primitive type wrapping pattern. See 6.3 for more details.
7.9.8.4  Equality
Two bags are equal if  –  and only if  –  they are both empty, or if they contain the same items, with the same 
number of each item present.
NOTE  the determination of element content is based on the same semantic equals as defined in  this International 
Standard, so it is possible that a BAG(CD) can be equal to BAG(CO), for instance.
7.9.8.5  Invariants
(none)
NOTE  Rules about updateMode or history are applied to item where BAG(T) is used.
7.9.8.6  Operations 
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  117
7.9.8.6.1  union(bag : BAG(T)) : BAG(T):  The union of this and bag. If a value is contained multiple times, 
the total count of the value‘s occurance in the result of the union w ill the sum of the occurances in this and bag. 
This is an alias for including.
7.9.8.6.2  union(set : DSET(T)) : BAG(T):  The union of this and set. If a value is contained in both the bag
and the set, the total count of the value‘s occurance in the result of the union will be one greater than the 
number of occurances in this. This is an alias for including.
7.9.8.6.3  intersection(bag : BAG(T)) : BAG(T): The intersection of this and bag.
7.9.8.6.4  intersection(set : DSET(T)) : DSET(T): The intersection of this and set.
7.9.8.6.5  including(object :  T) : BAG(T):  The bag containing all elements of this plus object. If object is 
already in this, it will occur another extra time in the result.
7.9.8.6.6  including(coll   : COLL(T)) : BAG(T):  The bag containing all elements of this plus any elements 
in coll. This is an alias for union.
7.9.8.6.7  excluding(object : T) : BAG(T):  The bag containing all elements of this apart from all 
occurrences of object.
7.9.8.6.8  excluding(coll   : COLL(T)) : BAG(T):  The bag containing all elements of this apart from any 
objects that are found in coll.
7.9.8.6.9  asList() : LIST(T): A sequence that contains all the elements from this in an undefined order.
7.9.8.6.10  asSet() : DSET(T): The set containing all the elements from this, with duplicates removed.
7.9.8.7  Examples
<example xsi:type="BAG_TEL">
<item value="tel:+15556667777" use="H"/>
<item nullFlavor="UNK" use="WP"/>
</example>
A bag of telephone numbers, with a known home telephone number, and an unknown work number.
<example xsi:type="BAG_TEL">
<item nullFlavor="UNK" use="WP"/>
<item value="tel:+15556667777" use="H"/>
</example>
This is not equal to the previous bag of telephone numbers;  although order is not important, the work 
telephone number has a nullFlavor, and equality cannot be evaluated.
7.10  Continuous set datatypes
7.10.1  Overview
These datatypes provide support for collections of data. See Figure 9. 
ISO/FDIS 21090:2009(E)
118  © ISO 2009 – All rights reserved
7.10.2  QSET (continuous set)
7.10.2.1  Description
Abstract; specializes ANY.
Parameter: T : QTY.
An unordered set of distinct values that are quantities.
Any ordered type can be the basis of a QSET; it does not matter whether the base type is discrete or 
continuous. If the base datatype is only partially ordered, all elements of the QSET SHALL be elements of a 
totally ordered subset of the partially ordered datatype (for example, PQ is only ordered when the units are 
consistent. Every value in a QSET(PQ) shall have the same canonical unit).
QSET is an abstract type. A working QSET is specified as an expression tree built using a combination of 
operator (QSI, QSD, QSU, QSP) and component types (QSC, QSS and IVL; and for TS, PIVL and EIVL).
QSETs shall not contain null or nullFlavored values as members of the set.
7.10.2.2  ISO/IEC 11404 syntax
type QSET (T : ANY) = class (
validTimeLow : characterstring,
validTimeHigh : characterstring,
controlInformationRoot : characterstring,
controlInformationExtension : characterstring,
nullFlavor : NullFlavor,
updateMode : UpdateMode,
flavorId : Set(characterstring),
originalText : ED.TEXT
)
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  119
Figure 9 — Continuous set datatypes 
ISO/FDIS 21090:2009(E)
120  © ISO 2009 – All rights reserved
7.10.2.3  Attributes
7.10.2.3.1  originalText : ED.TEXT: The text representation from which the QSET was encoded, if such a 
representation is the source of the QSET.
Original text can be used in a structured user interface to capture what the user saw as a representation of the 
set on the data input screen, or in a situation where the user dictates or directly enters text, it is the text 
entered or uttered by the user.
It is valid to use a QSET derived datatype to store only the text that the user entered or uttered . In this 
situation, original text will exist without a valid value. The originalText is not a substitute for a valid value. If the 
actual content of the  QSET  is not valid, then the  QSET  shall  be nullFlavored, irrespective of whether 
originalText has a value or not.
The original text shall be an excerpt of the relevant information in the original sources, rather than a pointer or 
exact reproduction. Thus the original text  shall  be represented in plain text form. In specific circumstances, 
when clearly descirbed the context of use, the originalText may be a reference to some other text artefact for 
which the resolution scope is clearly described.
NOTE  The details of the link in the originalText.reference between different artifacts of medical information (e.g ., 
document and coded result) is outside the scope of  this International Standard  and  can  be further proscribed in 
specifications that use this International Standard.
7.10.2.4  Equality
The notional equality determination for QSET and all its descendants except IVL is based on set membership: 
two QSETs are equal if they contain the same members. However, QSETs are used to build expression trees 
that may become quite complex. It is not feasible to determine whether two different QSET expression trees 
describe the same set of elements, so the determination for whether two QSETs are equal is the default 
equality test defined in ANY.
This equality test applies to all QSET specializations except for IVL, and is not specified for the other 
specializations.
7.10.2.5  Invariants
OCL for invariants:
inv "No History or Update Mode": 
noUpdateOrHistory(originalText)
7.10.2.6  Operations
7.10.2.6.1  contains (x: T): BL: True if the QSET contains the value x.
7.10.2.6.2  hull (x: QSET(T)): IVL(T) : The convex hull of this set with x, which is the smallest interval that is 
a superset of this and x. See Figure 10.
Figure 10 — Convex hull 
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  121
NOTE  The convex hull of a  QSET  can less formally be called the "outer bound interval". Thus the  convex hull of a 
QSET  describes the absolute beginning and end of a schedule. For some set specifications, where there is infinite 
repetition  [e.g., a PIVL(TS)]  the convex hull has infinite bounds. The term  "schedule"  is used throughout this section in its
general sense, that of an organized series of values. The more common meaning of the term  "schedule", that of a time-based plan of events, is exactly a QSET(TS).
7.10.2.7  Examples
7.10.2.7.1  QSET(TS)
The type QSET(TS) is also known as GTS: general timing specification.
The first example specifies every other Tuesday in the season from the (US holidays) Memorial Day to Labor 
Day in the years 2002 and 2003. This is built as an expression of the intersection between 3 sets:
every other Tuesday;
the years 2002 and 2003;
the season between Memorial Day and Labor Day.
Example 80 
<example xsi:type="QSI_TS"> 
<!-- intersection, because it is a QSI -->
<!-- every other Tuesday -->
<term xsi:type='PIVL_TS' alignment='DW'>
<phase lowClosed='true' highClosed='false'>
<low value='20001202'/>
<high value='20001203'/>
</phase>
<period value='2' unit='wk'/>
</term>
<!-- 2002 and 2003 -->
<term xsi:type='IVL_TS' lowClosed='true' highClosed='false'>
<low value='20020101'/>
<high value='20040101'/>
</term>   
<!-- season between Memorial Day and Labor Day -->
<!-- periodic hull between Memorial day and Labor Day -->
<term xsi:type='QSP_TS'>
<low xsi:type="QSI_TS"> 
<!-- memorial day: intersection of last week of May and mondays -->
<term xsi:type='PIVL_TS'>
<phase highClosed='false'>
<low value='19870525'/>
<high value='19870601'/>
</phase>
<period value='1' unit='a'/>
</term>
<term xsi:type='PIVL_TS'>
<phase highClosed='false'>
<low value='19870105'/>
<high value='19870106'/>
</phase>
<period value='1' unit='wk'/>
</term>
</low>
<high xsi:type="QSI_TS">
<!-- labor day : intersection of first week of Sept and mondays -->
<term xsi:type='PIVL_TS'> 
ISO/FDIS 21090:2009(E)
122  © ISO 2009 – All rights reserved
<phase highClosed='false'>
<low value='19870901'/>
<high value='19870908'/>
</phase>
<period value='1' unit='a'/>
</term>
<term xsi:type='PIVL_TS'>
<phase highClosed='false'>
<low value='19870105'/>
<high value='19870106'/>
</phase>
<period value='1' unit='wk'/>
</term>
</high> 
</term>
</example>
7.10.3  QSU (QSET Union)
7.10.3.1  Description
Specializes QSET.
Specifies a QSET as a union of other sets.
7.10.3.2  ISO/IEC 11404 syntax
type QSU (T : ANY) = class (
validTimeLow : characterstring,
validTimeHigh : characterstring,
controlInformationRoot : characterstring,
controlInformationExtension : characterstring,
nullFlavor : NullFlavor,
updateMode : UpdateMode,
flavorId : Set(characterstring),
originalText : ED.TEXT,
terms : Set(QSET(T))
)
7.10.3.3  Attributes
7.10.3.3.1  terms : Set(QSET(T)): A list of other QSETs that are involved in the union.
7.10.3.4  Invariants
a nonNull QSU may only contain nonNull QSETs;
at least two sets shall be specified.
OCL for invariants:
inv "not null": isNotNull implies terms->forAll(t | 
t.isNotNull)
inv "size": isNotNull implies terms->size >= 2
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  123
7.10.4  QSI (QSET intersection)
7.10.4.1  Description
Specializes QSET.
Specifies a QSET as an intersection of other sets.
7.10.4.2  ISO/IEC 11404 syntax
type QSI (T : ANY) = class (
validTimeLow : characterstring,
validTimeHigh : characterstring,
controlInformationRoot : characterstring,
controlInformationExtension : characterstring,
nullFlavor : NullFlavor,
updateMode : UpdateMode,
flavorId : Set(characterstring),
originalText : ED.TEXT,
terms : Set(QSET(T))
)
7.10.4.3  Attributes
7.10.4.3.1  terms : Set(QSET(T)): A list of other QSETs that are involved in the intersection.
7.10.4.4  Invariants
a nonNull QSI may only contain nonNull QSETs;
at least 2 sets SHALL be specified.
OCL for invariants:
inv "not null": isNotNull implies terms->forAll(t | 
t.isNotNull)
inv "size": isNotNull implies terms->size >= 2
7.10.5  QSD (QSET difference)
7.10.5.1  Description
Specializes QSET.
Specifies a QSET as the difference between two sets.
7.10.5.2  ISO/IEC 11404 syntax
type QSU (T : ANY) = class (
validTimeLow : characterstring,
validTimeHigh : characterstring,
controlInformationRoot : characterstring,
controlInformationExtension : characterstring,
nullFlavor : NullFlavor,
updateMode : UpdateMode, 
ISO/FDIS 21090:2009(E)
124  © ISO 2009 – All rights reserved
flavorId : Set(characterstring),
originalText : ED.TEXT,
minuend : QSET(T)
subtrahend : QSET(T)
)
The difference is the second set subtracted from the first.
7.10.5.3  Attributes
7.10.5.3.1  minuend : QSET(T): The set from which the second set is subtracted.
7.10.5.3.2  subtrahend: QSET(T): The set that is subtracted from the first set.
7.10.5.4  Invariants
a nonNull QSD may only contain nonNull QSETs.
OCL for invariants:
inv inv "not null": isNotNull implies (minuend.isNotNull and 
subtrahend.isNotNull)
7.10.6  QSP (QSET periodic hull)
7.10.6.1  Description
Specializes QSET.
Specifies a QSET as the periodic hull between two sets as shown in Figure 11.
Figure 11 — Periodic hull
A periodic hull may be generated by comparing two sets that interleave. For QSET values  A  and  B  to 
interleave, the occurrence intervals of both groups can be arranged in pairs of corresponding occurrence 
intervals. It SHALL further hold that for all corresponding occurrence intervals a   A and b   B, a starts before b 
starts (or at the same time) and b ends after a ends (or at the same time).
The interleaves-relation holds when two schedules have the same av erage frequency, and when the second 
schedule never "outpaces" the first schedule. That is, no occurrence interval in the second schedule may start 
before its corresponding occurrence interval in the first schedule.
7.10.6.2  ISO/IEC 11404 syntax
type QSP (T : ANY) = class (
validTimeLow : characterstring,
validTimeHigh : characterstring,
controlInformationRoot : characterstring,
controlInformationExtension : characterstring,
nullFlavor : NullFlavor,
updateMode : UpdateMode, 
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  125
flavorId : Set(characterstring),
originalText : ED.TEXT,
low : QSET(T)
high : QSET(T)
)
7.10.6.3  Attributes
7.10.6.3.1  low : QSET(T): The set used as the basis for the periodic hull operation.
7.10.6.3.2  high: QSET(T): The set that is used as the parameter for the periodic hull operation.
7.10.6.4  Invariants
a nonNull QSP may only contain nonNull QSETs.
OCL for invariants:
inv inv "not null": isNotNull implies (low.isNotNull and 
high.isNotNull)
7.10.7  QSS (QSET Set)
7.10.7.1  Description
Specializes QSET.
Specifies a QSET as an enumeration of simple values. This is a  shortcut form for specifying the same values 
as singleton intervals.
7.10.7.2  ISO/IEC 11404 syntax
type QSS (T : QTY) = class (
validTimeLow : characterstring,
validTimeHigh : characterstring,
controlInformationRoot : characterstring,
controlInformationExtension : characterstring,
nullFlavor : NullFlavor,
updateMode : UpdateMode,
flavorId : Set(characterstring),
originalText : ED.TEXT,
terms : Set(T)
)
7.10.7.3  Attributes
7.10.7.3.1  terms : Set(T): a list of values that are in the set. The set is actually co nstructed as the union of 
the intervals implied by the precision implicit in the definition of T. For some types of QTY, this is either trivial 
(INT) or ambiguous (RTO) and QSS doesn‘t really make sense for these type. QSS is a useful type for TS in 
particular.
7.10.7.4  Invariants
a nonNull QSS may only contain nonNull values;
at least 1 value SHALL be specified. 
ISO/FDIS 21090:2009(E)
126  © ISO 2009 – All rights reserved
OCL for invariants:
inv "not null": isNotNull implies terms->forAll(t | 
t.isNotNull)
inv "size": isNotNull implies terms->size >= 1
7.10.7.5  Examples
<example xsi:type='QSS_TS'>
<term value='20071101'/>
<term value='20071106'/>
</example>
The union of the intervals that cover the 1st November 2007 and the 6th November 2007.
7.10.8  QSC (coded QSET)
7.10.8.1  Description
Specializes QSET.
Specifies a QSET as an coded value that describes a predefined QSET(TS).
7.10.8.2  ISO/IEC 11404 syntax
type QSC (T : ANY) = class (
validTimeLow : characterstring,
validTimeHigh : characterstring,
controlInformationRoot : characterstring,
controlInformationExtension : characterstring,
nullFlavor : NullFlavor,
updateMode : UpdateMode,
flavorId : Set(characterstring),
originalText : ED.TEXT,
code : CD.CV
)
7.10.8.3  Attributes
7.10.8.3.1  code : CD.CV: a predefined code that fully and unambiguously describes a set of times.
The possible set of codes that are allowed for use in this attribute should be described in conformance 
statements. HL7 defines the set of codes described below in GTSAbbrevation, and all information processing 
entities claiming direct conformance to this standard  shall  support the codes AM, PM, BID, TID, QID, JB and 
JE if this type is supported.
Code System GTSAbbreviation. OID: 2.16.840.1.113883.5.1022 (Required Codes, OID for 
this value set 2.16.840.1.113883.1.11.10720)
1   AM  Every morning at institution specified times. 
1     PM  Every afternoon at institution specified times. 
1   BID  Two times a day at institution specified time.
1   TID  Three times a day at institution specified time.
1   QID  Four times a day at institution specified time.
1   JB  Regular business days (Monday to Friday excluding holidays). 
1   JE  Regular weekends (Saturday and Sunday excluding holidays).  
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  127
In addition to the core codes described above, HL7 has also defined additional codes for the designated 
official or unofficial holidays of source countries:
Code System GTSAbbreviation. OID: 2.16.840.1.113883.5.1022 (Additional Holiday Codes, 
OID for this value set 2.16.840.1.113883.1.11.10725)
1   JH  Holidays 
2    JHCHR  Christian Holidays (Roman/Gregorian "Western" Tradition.)
3    JHCHRXME  Christmas Eve (December 24) 
3    JHCHRXMS  Christmas Day (December 25)
3    JHCHRNEW  New Year's Day (January 1) 
3    JHCHREAS
Easter Sunday. The Easter date is a rather complex calculation 
based on astronomical tables describing full moon dates. Details 
can be found at [http://www.assa.org.au/edm.html, and 
http://aa.usno.navy.mil/AA/faq/docs/easter.html]. The Christian 
Orthodox Holidays are based on the Julian calendar. 
3    JHCHRGFR  Good Friday, is the Friday immediately before Easter Sunday
3      JHCHRPEN
Pentecost Sunday, is seven weeks after Easter (the 50th day of 
Easter). 
2    JHNUS
United States National Holidays (public holidays for federal 
employees established by U.S. Federal law 5 U.S.C. 6103.) 
3    JHNUSMLK  Dr. Martin Luther King, Jr. Day, the third Monday in January. 
3    JHNUSPRE
Washington's Birthday (Presidential Day) the third Monday in 
February
3    JHNUSMEM  Memorial Day, the last Monday in May
3    JHNUSMEM5  Friday before Memorial Day Weekend
3    JHNUSMEM6  Saturday of Memorial Day Weekend
3    JHNUSIND  Independence Day (4th of July) 
3    JHNUSIND5  Alternative Friday before 4th of July Weekend [5 U.S.C. 6103(b)].
3    JHNUSIND1  Alternative Monday after 4th of July Weekend [5 U.S.C. 6103(b)].
3    JHNUSLBR  Labor Day, the first Monday in September.
3    JHNUSCLM  Columbus Day, the second Monday in October. 
3    JHNUSVET  Veteran's Day, November 11
3    JHNUSTKS  Thanksgiving Day, the fourth Thursday in November
3    JHNUSTKS5  Friday after Thanksgiving
2    JHNNL  The Netherlands National Holidays
3    JHNNLQD  Queen's day (April 30)
3    JHNNLLD  Liberation day (May 5 every five years)
3    JHNNLSK  Sinterklaas (December 5)
NOTE 1  This table is not complete, nor does it include religious  holidays other than Christian  [of the Gregorian 
(Western)  tradition]  or national holidays  in  countries other than those of the U.S.A.  and the  Netherlands. While other 
jurisdictions might define their own code systems, they are welcome to submit their codes to HL7 and or ISO for inclusion 
in this code system.
NOTE 2  Holidays are locale-specific. Exactly which religious holidays are subsumed under JH depends on the locale 
and other tradition. For global interoperability, using constructed QSET expressions is  safer than named holidays. 
ISO/FDIS 21090:2009(E)
128  © ISO 2009 – All rights reserved
However, some holidays that depend on moon phases (e.g., Easter, Ramadan) or ad-hoc decree cannot be easily 
expressed in a QSET other than by using QSC.
NOTE 3  Information processing entities might define their own set of codes to be supported by creating an appropriate 
value set. The value set can be referenced in the QSC code if required.
7.10.8.4  Invariants
a code SHALL be provided.
OCL for invariants:
inv "not null": isNotNull implies code.isNotNull
7.10.8.5  Examples
<example xsi:type='QSC_TS' >
<code code="JHCHRXMS" codeSystem="2.16.840.1.113883.5.1022"/>
</example>
All Christmas days.
7.10.9  IVL (interval)
7.10.9.1  Description
Specializes QSET.
Parameter: T : QTY.
A set of consecutive values of an ordered base datatype.
Any ordered type can be the basis  of an IVL; it does not matter whether the base type is discrete or 
continuous. If the base datatype is only partially ordered, all elements of the IVL  shall  be elements of a totally 
ordered subset of the partially ordered datatype. For example, PQ is considered ordered. However the 
ordering of PQs is only partial; a total order is only defined among comparable quantities (quantities of the 
same physical dimension). While IVLs between 2 m and 4 m exist, there is no IVL between 2 m and 4 s.
7.10.9.2  ISO/IEC 11404 syntax
type IVL (T : ANY) = class (
validTimeLow : characterstring,
validTimeHigh : characterstring,
controlInformationRoot : characterstring,
controlInformationExtension : characterstring,
nullFlavor : NullFlavor,
updateMode : UpdateMode,
flavorId : Set(characterstring),
originalText : ED.TEXT,
low : T,
lowClosed : boolean,
high : T,
highClosed : boolean,
width : QTY,
any : T
) 
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  129
7.10.9.3  Attributes
7.10.9.3.1  low : T: This is the low limit. If the low limit is not known, a nullFlavor may be specified.
The low limit shall not be positive infinity.
7.10.9.3.2  lowClosed : Boolean:  Whether low is included in the IVL (is closed) or excluded from the IVL (is 
open).
7.10.9.3.3  high : T: This is the high limit. If the high limit is not known, a nullFlavor may be specified.
The high limit shall not be negative infinity, and shall be higher than the low limit if one exists.
7.10.9.3.4  highClosed : Boolean: Whether high is included in the IVL (is closed) or excluded from the IVL 
(is open).
7.10.9.3.5  width : QTY: The difference between high and low boundary. Width is used when the size of the 
Interval is known, but the actual start and end points are not known. The actual type QTY will be dictated by 
the type of T.
7.10.9.3.6  any : T: Specifies that some particular value lies within the interval.
This should be used when it is not known when something started, or will end, but it is known that it was 
happening at a given time. This is relatively common for observations (i.e. of disease processes), procedure, 
and scheduling. In these cases, neither high nor low is known, though the width may also be known.
7.10.9.4  Equality
Unlike other QSET specializations, IVL equality is determined based on set membership. Two IVL values are 
equal if they contain the same members.
NOTE 1  For IVLs, there are two special cases. Highs are considered equal if they are both positive infinity, and lows 
are considered equal if they are both negative infinity.
NOTE 2  If two intervals have the same width and the bounds are not known, they are not considered equal.
NOTE 3  The same applies where the interval is known by a contained value (any): such intervals are never considered 
equal.
NOTE 4  Because equality is determined by set membership, it is possible for DSET(INT) and IVL(INT) to be equal. For 
example, the DSET(INT) 2,3,4 is equal to the IVL(INT) 2..4.
7.10.9.5  Invariants
either  the IVL is nullFlavored, has a width,  ANY, or has (low and/or high). ( ANY  and/or width) and 
(low and/or high) cannot be mixed;
lowClosed and highClosed can only be used if low or high are used ;
low and high SHALL be comparable.
OCL for Invariants:
def: let hasBounds : Boolean = low.isNotNull or high.isNotNull
def: let noSemantics : Boolean = (low.oclIsUndefined or 
low.noSemantics) and (width.oclIsUndefined or 
width.noSemantics) and (high.oclIsUndefined or  
ISO/FDIS 21090:2009(E)
130  © ISO 2009 – All rights reserved
high.noSemantics) 
inv "null rules": isNonNull implies (hasBounds or any_.isNotNull 
or width.isNotNull)
inv "co-occurence rules": isNotNull implies ((any_.isNotNull 
or width.isNotNull) xor hasBounds)
inv "closed attributes only if limited": 
(not low.isNotNull implies lowClosed.oclIsUndefined) and 
(not high.isNotNull implies highClosed.oclIsUndefined)
inv "no updateMode or History on IVL attributes": 
noUpdateOrHistory(low) and
noUpdateOrHistory(high) and noUpdateOrHistory(width)
inv "comparable": (low.isNotNull and high.IsNotNull) implies 
low.comparable(high)
7.10.9.6  Examples
7.10.9.6.1  Integer interval
<example xsi:type='IVL_INT'>
<low value='2'/>
<high value='4'/>
</example>
A simple interval of INT between 2 and 4. This is exactly the same set of values as specifying the DSET 
(2,3,4)
7.10.9.6.2  Physical quantity interval
<example xsi:type='IVL_PQ' lowClosed='true' highClosed='false'>
<low value='2.8' unit='m'/>
<high value='4.6' unit='m'/>
</example>
An interval of PQ between 2.8 meters, inclusive, and 4.6 meters, exclusive.
7.10.9.6.3  Timestamp interval
<example xsi:type='IVL_TS'>
<low value='200012041000'/>
<high value='200012041030'/>
</example>
An interval of TS on December 4, 2000, between 10:00 am and 10:30 am.
7.10.9.6.4  Operation record
<example xsi:type='IVL_TS'>
<width xsi:type='PQ' value='2' unit='h'/>
<any value='200012041000'/>
</example>
The operation took 2 h, and was occurring at 10 am on the December 4 2000. Width requires an xsi:type 
since its type is abstract (QTY)
7.10.10  IVL.LOW
7.10.10.1  Description
A flavour that constrains IVL.
IVL.LOW constrains IVL so that low is provided and lowClosed is true. All other properties are prohibited . 
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  131
7.10.10.2  Invariants
low and lowClosed SHALL be populated;
high and highClosed SHALL be null.
OCL for Invariants:
inv "low": isNotNull implies low.isNotNull and lowClosed
inv "high": high.oclIsUndefined and highClosed.oclIsUndefined
7.10.11  IVL.HIGH
7.10.11.1  Description
A flavour that constrains IVL.
IVL.HIGH constrains IVL so that high is provided and highClosed is true. All other properties are prohibited.
7.10.11.2  Invariants
low and lowClosed SHALL be null;
high and highClosed SHALL be populated.
OCL for Invariants:
inv "high": isNotNull implies high.isNotNull and highClosed
inv "low": low.oclIsUndefined and lowClosed.oclIsUndefined
7.10.12  IVL.WIDTH
7.10.12.1  Description
A flavour that constrains IVL.
IVL.WIDTH constrains IVL so that width is mandatory and low, lowClosed, high and highClosed are prohibited .
7.10.12.2  Invariants
width SHALL be populated;
low and lowClosed SHALL be null;
high and highClosed SHALL be null.
OCL for Invariants:
inv "width": isNotNull implies width.isNotNull
inv "low": low.oclIsUndefined and lowClosed.oclIsUndefined
inv "high": high.oclIsUndefined and highClosed.oclIsUndefined 
ISO/FDIS 21090:2009(E)
132  © ISO 2009 – All rights reserved
7.10.13  PIVL (PeriodicInterval)
7.10.13.1  Description
Specializes QSET.
An interval of time that recurs periodically. PIVL has two properties, phase and period/frequency. phase 
specifies the "interval prototype" that is repeated on the period/frequency.
7.10.13.2  ISO/IEC 11404 syntax
type PIVL (T : ANY) = class (
validTimeLow : characterstring,
validTimeHigh : characterstring,
controlInformationRoot : characterstring,
controlInformationExtension : characterstring,
nullFlavor : NullFlavor,
updateMode : UpdateMode,
flavorId : Set(characterstring),
originalText : ED.TEXT,
phase : IVL(TS),
period : PQ,
frequency : RTO,
alignment : CalendarCycle,
isFlexible : boolean,
count : INT.POS
)
7.10.13.3  Attributes
7.10.13.3.1  phase : IVL(TS):  A prototype of the repeating interval, specifying the duration of each occurrence 
and anchors the PIVL sequence at a certain point in time. phase also marks the anchor point in time for the 
entire series of periodically recurring intervals. If count is null or nullFlavored, the recurrence of a PIVL  has no 
beginning or ending, but is infinite in both future and past.
The width of the phase shall be less than or equal to the period.
7.10.13.3.2  period : PQ:  A time duration specified as a reciprocal measure of the frequency at which the 
PIVL repeats.
7.10.13.3.3  frequency : RTO:  The number of times the  PIVL  repeats (numerator) within a specified time-period (denominator). The numerator is an integer, and the denominator is a PQ.TIME.
Only one of period and frequency should be specified. The form chosen should be the form that most naturally 
conveys the idea to humans, i.e. every 10 min (period) or twice a day (frequency).
7.10.13.3.4  alignment : CalendarCycle:  If and how the repetitions are aligned to the cycles of the underlying 
calendar (e.g., to distinguish every 30 d from "the 5th of every month".) A non-aligned PIVL recurs 
independently from the calendar. An aligned PIVL is synchronized with the calendar.  
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  133
If populated, the value of this attribute  shall  be taken from the HL7 CalendarCycle code system. The current 
values are:
CalendarCycle Enumeration. OID: 2.16.840.1.113883.5.9
1   CY  year  
1   MY  month of the year  
1   CM  month (continuous)  
1   CW  week (continuous)  
1   WM  week of the month 
1   WY  week of the year  
1   DM  day of the month  
1   CD  day (continuous)  
1   DY  day of the year  
1   DW  day of the week 
(begins with monday) 
1   HD  hour of the day  
1   CH  hour (continuous)  
1   NH  minute of the hour  
1   CN  minute (continuous)  
1   SN  second of the minute  
1   CS  second (continuous)  
ISO/IEC 11404 Syntax for alignment attribute
type CalendarCycle = enumeration (CY, MY, CM, CW, WY, DM, CD, DY, DW, 
HD, CH, NH, CN, SN, CS)
7.10.13.3.5  isFlexible : Boolean: Indicates whether the exact timing is up to the party executing the schedule 
e.g., to distinguish "every 8 h" from "3 times a day".
NOTE  This is sometimes referred to as "institution specified timing".
7.10.13.3.6  count : INT.POS: The number of times the period repeats in total. If count is null or nullFlavored, 
then the period repeats indefinitely both before and after the anchor implici t in the phase.
7.10.13.4  Invariants
if PIVL is not nullFlavored, only one of period and frequency may be specified;
the width of the phase shall be less or equal to the period.
OCL for invariants:
inv "no updateMode or History on PIVL attributes":
noUpdateOrHistory(phase)and noUpdateOrHistory(period)
inv "no updateMode or History on PIVL attributes": 
noUpdateOrHistory(phase) and noUpdateOrHistory(period)
inv "phase width": isNotNull implies 
((phase.isNotNull implies phase.width < x.period) or  
ISO/FDIS 21090:2009(E)
134  © ISO 2009 – All rights reserved
(frequency.isNotNull implies phase.width < 
(frequency.denominator / frequency.numerator)))
7.10.13.5  Examples
7.10.13.5.1  Twice a day
<example xsi:type='PIVL_TS' isFlexible='true'>
<period value='12' unit='h'/>
</example>
Twice a day (BID). The actual time is at the discretion of the institution.
This can also be represented using the alternative representation by frequency:
<example xsi:type='PIVL_TS' isFlexible='true'>
<frequency>
<numerator xsi:type="INT" value='2'/>
<denominator xsi:type="PQ" value="1" unit='d'/>
</frequency>
</example>
This also represents twice a day (BID). In simple cases such as twice a day, the two forms are easily 
interconvertable, and humans find either form acceptable. While it is always possible to   convert between 
period and frequency, human readers have a strong preference for one form or another depending on the 
actual numbers:
<example xsi:type='PIVL_TS' isFlexible='true'>
<frequency>
<numerator xsi:type="INT" value='7'/>
<denominator xsi:type="PQ" value="1" unit='d'/>
</frequency>
</example>
This means to do something seven times a day. The period based reference to this is not so nice to read:
<example xsi:type='PIVL_TS' isFlexible='true'>
<period value='3.4285714285714285714285714285714' unit='h'/>
</example>
While this example may seem contrived, examples like this arise in clinical practice around the world.
7.10.13.5.2  Twice a day for ten minutes 
<example xsi:type='PIVL_TS'>
<phase>
<width xsi:type="PQ" value='10' unit='min'/>
</phase>
<period value='12' unit='h'/>
</example>
Twice a day (every 12 h) for 10 min.
7.10.13.5.3  Every September 
<example xsi:type='PIVL_TS' alignment='MY'>
<phase highClosed='true' lowClosed='false'>
<low value='198709'/>
<high value='198710'/>
</phase>
<period value='1' unit='a'/> <!—- a means year in UCUM -->
</example>
This example is slightly more complex and shows the month of September that recurs every year (In 1987 this 
form is irrelevant since the periodic interval recurs  every year past and future.) 
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  135
7.10.13.5.4  Every other Saturday. 
<example xsi:type='PIVL_TS' alignment='DW'>
<phase highClosed='true' lowClosed='false'>
<low value='20001202' />
<high value='20001203' />
</phase>
<period value='2' unit='wk'/>
</example>
7.10.13.5.5  Every 4 h to 6 h.
<example xsi:type='PIVL_TS'>
<period value='5' unit='h' uncertaintyType='U'>
<uncertainty value='0.57735' unit='h'/>
</period>
</example>
7.10.14  EIVL (Event-Related Periodic Interval of Time)
7.10.14.1  Description
Specializes QSET.
Specifies a periodic interval of time where the recurrence is based on activities of daily living or other 
important events that are time-related but not fully determined by time. 
Example: "one hour after breakfast" specifies the beginning of the interval at one hour after breakfast is finished. Breakfast 
is assumed to occur before lunch but is not determined to occur at any specific time.
7.10.14.2  ISO/IEC 11404 syntax
type EIVL = class (
validTimeLow : characterstring,
validTimeHigh : characterstring,
controlInformationRoot : characterstring,
controlInformationExtension : characterstring,
nullFlavor : NullFlavor,
updateMode : UpdateMode,
flavorId : Set(characterstring),
originalText : ED.TEXT,
event : TimingEvent,
offset : IVL(PQ)
)
7.10.14.3  Attributes
7.10.14.3.1  event : TimingEvent: A code for a common (periodic) activity of daily living based on which the 
event-related periodic interval is specified. Events that qualify for being adopted in the domain of this attribute 
SHALL satisfy the following requirements:
the event commonly occurs on a regular basis;
the event is being used for timing activities;
the event is not entirely determined by time.
If these criteria are not met, the relationship of the event and its time SHALL be communicated using structur es 
outside the datatypes defined in this International Standard. 
ISO/FDIS 21090:2009(E)
136  © ISO 2009 – All rights reserved
If populated, the value of this attribute  shall  be taken from the HL7 TimingEvent code  system. The current 
values are:
TimingEvent Enumeration. OID: 2.16.840.1.113883.5.139
1   HS  the hour of sleep
1    WAKE  upon waking
1   AC  before a meal (from the latin ante cibus)
2    ACM  before breakfast (from the latin ante cibus matutinus)
2    ACD  before lunch (from the latin ante cibus diurnus)
2    ACV  before dinner (from the latin ante cibus vespertinus)
1   IC  between meals (from the latin inter cibus)
2    ICM  between breakfast and lunch
2    ICD  between lunch and dinner
2    ICV  between dinner and the hour of sleep
1   PC  after a meal (from the latin post cibus)
2    PCM  after breakfast (from the latin post cibus matutinus)
2    PCD  after lunch (from the latin post cibus diurnus)
2    PCV  after dinner (from the latin post cibus vespertinus)
1   C  meal (from the latin cibus)
2    CM  breakfast (from the latin cibus matutinus)
2    CD  lunch (from the latin cibus diurnus)
2    CV  dinner (from the latin cibus vespertinus)
ISO/IEC 11404 Syntax for event attribute
type TimingEvent = enumeration (HS, WAKE, AC, ACM, ACD, ACV, IC, ICM, ICD, 
ICV, PC, PCM, PCD, PCV, C, CM, CD, CV)
7.10.14.3.2  offset : IVL(PQ): An interval of elapsed time (duration, not absolute point in time) that marks the 
offsets for the beginning, width and end of the EIVL measured from the time each such event actually 
occurred.
EXAMPLE:   if the specification is "one hour before breakfast   for 10 minutes", code is CM, IVL.low of offset is  1 h 
and the IVL.high of offset is  50 min.
The offset  shall  be null if the event code specifies "before", "after" or "between meals". The offset  shall  be 
nonNull if the EIVL is nonNull and the event code is C, CM, CD or CV. The offset may or may not be nu ll or 
nullFlavored for the event codes HS and WAKE.
7.10.14.4  Invariants
if EIVL is not nullFlavored, event SHALL be specified.
OCL for invariants:
inv "required attributes": isNotNull implies 
(event.oclIsDefined)
inv "no updateMode or History on EIVL attributes": 
noUpdateOrHistory(offset) 
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  137
7.10.14.5  Examples
<example xsi:type='EIVL_TS' event='CM'>
<offset>
<low value='-1' unit='h'/>
<high value='-50' unit='min'/>
</offset>
</example>
One hour before breakfast for 10 min.
Example 75
<example xsi:type='EIVL_TS' event='CV'>
<offset>
<low value='30' unit='min'/>
<high value='30' unit='min'/>
</offset>
</example>
Thirty minutes after dinner.
7.10.15  GTS.BOUNDEDPIVL
7.10.15.1  Description
A flavour that constrains QSI.
GTS.BOUNDEDPIVL constrains QSI(TS) so that it only allows an intersection of IVL(TS) and PIVL(TS).
7.10.15.2  Invariants
there shall be two terms;
one term shall be an IVL(TS);
the other term shall be a PIVL(TS);
the IVL width shall be null (i.e. either a low or high or both SHALL be provided).
OCL for Invariants:
inv "GTS.BOUNDEDPIVL 1": terms->size = 2
inv "GTS.BoundedPIVL 2": terms.item->exists(t | 
t.oclIsKindOf(IVL(TS)))
inv "GTS.BoundedPIVL 3": terms.item->exists(t | 
t.oclIsKindOf(PIVL(TS)))
7.11  Uncertainty Datatypes
These datatypes  provide support for uncertain values.  The support provided here, along with the support 
provided for uncertainty on QTY, provides support for quantitative uncertainty, not with the medical kinds of 
uncertainty encountered in clinical practice such as ?likely to be x?, or a differential diagnoses. See Figure 12. 
ISO/FDIS 21090:2009(E)
138  © ISO 2009 – All rights reserved
Figure 12 — Uncertainty datatypes
7.11.1  UVP (Uncertain value – probabilistic)
7.11.1.1  Description
Specializes ANY.
Parameter: T : ANY.
A generic datatype extension used to specify a probability expressing the information producer's belief that the 
given value holds.
7.11.1.2  ISO/IEC 11404 syntax
type UVP (T : ANY) = class (
validTimeLow : characterstring,
validTimeHigh : characterstring,
controlInformationRoot : characterstring,
controlInformationExtension : characterstring,
nullFlavor : NullFlavor,
updateMode : UpdateMode,
flavorId : Set(characterstring),
probability : Decimal,
value : T
)
7.11.1.3  Attributes
7.11.1.3.1  probability : Decimal: The probability assigned to the value, a decimal number between 0 
(impossible) and 1 (certain), inclusive.
There is no "default probability" that one can assume when the probability is unstated. Therefore, it is 
impossible to make any semantic differenc e between a UVP without probability and a simple T. UVP does not 
mean "uncertain", and a simple T does not mean "certain". In fact, the probability of the UVP could be 0,999 
or 1, which is quite certain, where a simple T value could be a very vague guess.
7.11.1.3.2  value : T: The value of T to which the probability refers.
7.11.1.4  Equality
Two nonNull UVP values are equal if their probability and value are equal. 
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  139
7.11.1.5  Invariants
a value shall be provided;
a probability shall be provided;
probability shall be between 0 and 1.
OCL for Invariants:
Inv "value not null": isNotNull implies value.isNotNull
inv "SHALL have probability": isNotNull implies 
(probability.oclIsDefined and probability >= 0 
and probability <= 1)
inv "No History or Update Mode": noUpdateOrHistory(probability)
and noUpdateOrHistory(value)
7.11.2  NPPD (Non-parametric probability distribution)
7.11.2.1  Description
Specializes ANY.
Parameter: T : ANY.
A set of UVP with probabilities (also known as a histogram.) All the elements in the set are considered 
alternatives and are rated each with its probability expressing the belief (or frequency) that each given value 
holds.
NPPD<T> may be used where only one value for T may be true. The sum of the probabilities should be  u  1, 
but due to estimating and rounding inaccuracies, the total may actually exceed 1
7.11.2.2  ISO/IEC 11404 syntax
type NPPD (T : ANY) = class (
validTimeLow : characterstring,
validTimeHigh : characterstring,
controlInformationRoot : characterstring,
controlInformationExtension : characterstring,
nullFlavor : NullFlavor,
updateMode : UpdateMode,
flavorId : Set(characterstring),
item : Set(UVP(T))
)
7.11.2.3  Attributes
7.11.2.3.1  item : Set(UVP(T)): The list of values with probabilities for the histogram.
7.11.2.4  Equality
Two nonNull NPPDs are equal if they contain the same elements.
NOTE  The determination of element content is based on the same semantic equals as defined in  this International 
Standard, so it is possible that a NPPD(CD) can be equal to NPPD(CS), for instance. 
ISO/FDIS 21090:2009(E)
140  © ISO 2009 – All rights reserved
7.11.2.5  Invariants
at least one value SHALL be provided.
OCL for Invariants:
inv "SHALL have at least one item": isNull xor item->notEmpty
7.11.2.6  Examples
<example xsi:type='NPPD_ST'>
<item probability="0.1">
<value value="Yankees"/>
</item>
<item probability="0.04">
<value value="Red Sox"/> 
</item>
<item probability="0.05">
<value value="White Sox"/> 
</item>
<item probability="0.08">
<value value="Indians"/> 
</item>
<item probability="0.05">
<value value="Tigers"/> 
</item>
<item probability="0.07">
<value value="Mariners"/> 
</item>
<item probability="0.02">
<value value="Royals"/> 
</item>
<item probability="0.06">
<value value="Orioles"/> 
</item>
</example>
7.12  Structured text
7.12.1  Overview
This subclause  documents the SD.TEXT and SD.TITLE datatypes. Both SD.TEXT and SD.TITLE contain 
document-like structures. In addition to text, the content may contain multi -media content, lists, tables, 
formatting, presentation and referencing information. See Figure 13. 
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  141
Figure 13 — Structured text model
These structures are not intended to be complete documents. They are building blocks that are intended to be 
integrated into a larger context with other classes that use these document formats and ot her datatypes to 
build a complete document that is useful for clinical or other healthcare use. However these document formats 
may also find a use inside other record and messages formats. Whether documents, records or messages, 
these documents will be created within a single context. This document context may contain multiple 
documents of the type defined in this section, and these structures may refer to any content within this single 
document context.
Any Information Processing Entity claiming direct or  indirect conformance to this  International Standard that 
supports the use of the document formats defined in  this International Standard  shall  document the scope of 
the context and clearly define how references within the document context are resolved.  
ISO/FDIS 21090:2009(E)
142  © ISO 2009 – All rights reserved
There is special support in this subclause for relating content changes to previous versions of the content. If it 
is supported, the conformance statement  shall  make it clear how the applicable version information is made 
available and integrated with the change control content.
These documents are intended to be "rendered". A document is rendered when it is prepared for human 
consumption, either on a computer screen or a printed report or by some other method. However  if  the 
document is rendered, the rules described in this subclause shall be followed.
These document-like structures display obvious similarity to XHTML, and have a degree of functional overlap 
with XHTML. However these structures have some very basic conceptual differences to XHTML, particularly
to do with how these structures integrate with their context. The context for XHTML is the world wide web and 
it has features that tightly link it to the http protocol as well, where as these structures are designed for use 
inside an XML document that may  contain multiple such structures, and that may have bidirectional links in 
and out of the document. In addition, these structures have some additional functional characteristics, mainly 
those to do with the StrucDoc.Content and RenderMultimedia types. The  structures can easily be converted to 
XHTML in a particular context of use.
Functionally, these structures are similar to the ED datatype, and can be converted to an ED.datatype. Like 
ED, the SD datatypes have xml content, a character set, langauge and nullFlavor. The other properties of ED, 
such as reference, integrity check, thumbnail and translations are fixed to null.
7.12.2  Example
<example xsi:type="SD.TEXT">
<paragraph>
<caption styleCode="Bold xHead1">Introduction</caption>
Thank you for referring this patient for investigation
into <content ID="c1">burnt ears</content>. 
</paragraph>
<list>
<caption styleCode="Bold xHead1">Initial Observations</caption>
<item>The patient presented in a very confused state.</item>
<item>
There was extensive damage to the outer ears:
<renderMultiMedia referencedObject="i1">
<caption>Photo of left ear</caption>
</renderMultiMedia>
</item>
</list>
<table summary="Investigations performed"  border="all" rules="all">
<caption styleCode="Bold xHead1">Investigations</caption>
<thead>
<tr>
<th>Investigation</th><th>Finding</th>
</tr>
</thead>
<tbody>
<tr>
<th><content ID="c2">Skin Condition</content></th>
<th><content ID="c3">1<sup>st</sup> degree burns</content></th>
</tr>
<tr>
<th><content ID="c4">Hearing Test</content></th>
<th><content ID="c5">The patients hearing is okay</content></th>
</tr>
</tbody>
</table>
<paragraph>
<caption styleCode="Bold xHead1">Recommendations</caption>
The patient should apply a cream to the outer ears until
they are healed. <content revised="insert">The patient 
should wear a woollen balaclava in the future while ironing 
his shirts to prevent a  re-occurence of the accident<footnote>This 
has been proven to offer the best protection against a repeat  
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  143
injury. See <linkHtml href="http://www.wikipedia.org/wiki/burnt_ears">
the wikipedia article about burnt ears</linkHtml> for further 
information.</footnote>.</content>
</paragraph>
</example>
NOTE 1  This narrative has  four  sections: an introduction, initial observations, a summary of investigations, and 
recommendations. Besides not being a serious example, the  context of use of a structured text like this may make specific 
rules about the semantic scope of a particular piece of structured text, thereby narrowing the scope of a particular 
structured text.
NOTE 2   The styleCode xHead1 is an example of a valid local extension to the style codes.
NOTE 3  The content element is used to introduce an ID attribute. This is suitable for use in an originalText.reference 
element on a CD or PQ type in other content that refers into the structured text.
NOTE 4  The final use of the content element shows a revision to the document.
NOTE 5  There SHALL be some other item with the ID "i1" in the scope of the document context. This should  be  some 
kind of class that unambiguously provides some multimedia content.
NOTE 6  While the actual presentation process is outside  the Scope  of  this International Standard, one possible 
presentation of the document would take the form shown in Figure 14.
Figure 14 — Presentation form
7.12.3  StrucDoc.Base
7.12.3.1  Description
Abstract.
Defines basic identification and styling attributes shared by many structured document elements. 
ISO/FDIS 21090:2009(E)
144  © ISO 2009 – All rights reserved
7.12.3.2  Attributes
7.12.3.2.1  ID : String: Unique Identity of this element within a document.
7.12.3.2.2  language : Code:  Language of the element. See  7.4.2.3.7  for more information. Within a 
document, the language applies to all the contained elements unless some other language is specifically 
identified.
7.12.3.2.3  styleCode : Set(Code): Styles that apply to this document.
If populated, the value of this attribute  shall  be taken from one of these values listed below or a valid local 
extension: 
StyleCode Enumeration
1  Font style (defines font rendering characteristics).
2  Bold  Render with a bold font.
2  Underline  Render with an underlined font.
2  Italics  Render italicized.
2  Emphasis  Render with some type of emphasis.
1  Table rule style (defines table cell rendering characteristics).
2  Lrule  Render cell with left-sided rule.
2  Rrule  Render cell with right-sided rule.
2  Toprule  Render cell with rule on top.
2  Botrule  Render cell with rule on bottom.
1  Ordered list style (defines rendering characteristics for ordered lists).
2  Arabic  List is ordered using Arabic numerals: 1, 2, 3.
2  LittleRoman  List is ordered using little Roman numerals: i, ii, iii.
2  BigRoman  List is ordered using big Roman numerals: I, II, III.
2  LittleAlpha  List is ordered using little alpha characters: a, b, c.
2  BigAlpha  List is ordered using big alpha characters: A, B, C.
1  Unordered list style (defines rendering characteristics for unordered lists).
2  Disc  List bullets are simple solid discs.
2  Circle  List bullets are hollow discs.
2  Square  List bullets are solid squares.
Local extensions to the styleType enumeration SHALL follow the following convention: [x][A-Za-z][A-Za-z0-9]* 
(first character is "x", second character is an upper or lower case A -Z, remaining characters are any 
combination of upper and lower case letters or numbers).
7.12.4  StrucDoc.Br
7.12.4.1  Description
Definition
A hard line break, like in XHTML. 
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  145
7.12.5  StrucDoc.Sup
7.12.5.1  Description
Indicates that the value text should be rendered as superscript when presented. i.e. x
2
.
7.12.5.2  Attributes
7.12.5.2.1  text : String «XMLText»: The text that is to be represented as superscript.
Refer to Clause A.2 for the meaning of the XMLText stereotype.
7.12.5.3  Invariants
text shall not be empty.
OCL for Invariants:
inv "text SHALL not be empty": text.length > 0
7.12.6  StrucDoc.Sub
7.12.6.1  Description
Indicates that the value text should be rendered as subscript when presented. i.e. H
2
O.
7.12.6.2  Attributes
7.12.6.2.1  text : String «XMLText»: The text that is to be represented as subscript.
Refer to Clause A.2 for the meaning of the XMLText stereotype.
7.12.6.3  Invariants
text shall not be empty.
OCL for Invariants:
inv "text SHALL not be empty": text.length > 0
7.12.7  StrucDoc.LinkHtml
7.12.7.1  Description
Specializes StrucDoc.Base.
A hypertext reference to another document. These links are generally shown as hyperlinks that a user  may 
activate when viewing the document.
The link functionality provides a generic referencing mechanism, similar, but not identical, to the HTML anchor 
tag. It can be used to reference identifiers that are either internal or external to the document or th e document 
context.
Multimedia that is integral to a document  shall  be referenced by the renderMultiMedia element. Multimedia 
that is simply referenced by the document and not an integral part of the document can b e  provided by a link. 
There is no requirement that a receiver render an internal or external link, or the target of an external link. 
ISO/FDIS 21090:2009(E)
146  © ISO 2009 – All rights reserved
7.12.7.2  Attributes
7.12.7.2.1  href : String:  The URL that identifiers the target documen/object of the link. The target is an XML 
identifier either internal or external to the documen t.The context of use SHALL clearly define the scope of 
resolution of the link. Following the conventions of HTML, an internal link  –  usually a link within the scope of 
the context of the document – is prefaced with the pound sign.
7.12.7.2.2  rel : Set(StrucDoc.LinkType):  This attribute describes the relationship from the current 
document to the anchor specified by the href attribute. The value of this attribute is a space -separated list of 
link types.
If populated, the value of this attribute shall be taken from one of these values listed below:
LinkType Enumeration
1  Alternate
Designates substitute versions for the document in which the link 
occurs.
1  Stylesheet
Refers to an external style sheet. This is used together with the 
link type "Alternate" for user-selectable alternate style sheets.
1  Start  Refers to the first document in a collection of documents. 
1  Next
Refers to the next document in a linear sequence of documents. 
User agents may choose to preload the "next" document, to 
reduce the perceived load time.
1  Prev
Refers to the previous document in an ordered series of 
documents. Some user agents also support the synonym 
"Previous".
1  Contents
Refers to a document serving as a table of contents. Some user 
agents also support the synonym ToC (from "Table of Contents").
1  Index  Refers to a document providing an index for the current document.
1  Glossary
Refers to a document providing a glossary of terms that pertain to 
the current document.
1  Copyright  Refers to a copyright statement for the current document.
1  Chapter
Refers to a document serving as a chapter in a collection of 
documents.
1  Section
Refers to a document serving as a section in a collection of 
documents.
1  Subsection
Refers to a document serving as a subsection in a collection of 
documents.
1  Appendix
Refers to a document serving as an appendix in a collection of 
documents.
1  Help
Refers to a document offering help (more information, links to 
other sources information, etc.).
1  Bookmark
Refers to a bookmark. A bookmark is a link to a key entry point 
within an extended document. The title attribute may be used, for 
example, to label the bookmark. Several bookmarks may be 
defined in each document
This list is taken from the HTML specification. 
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  147
7.12.7.2.3  rev : Set(StrucDoc.LinkType): This attribute is used to describe a reverse link from the anchor 
specified by the href attribute to the current document. The value of this attribute is a space-separated list of 
link types. See 7.12.7.2.2 for valid values.
7.12.7.2.4  title : String: This attribute offers advisory information about the element for which it is set. The 
title attribute has an additional role when used with a LINK element that designates an external style sheet. 
Please consult the HTML standard for additional information.
NOTE  Values of the title attribute can be rendered by user agents in a variety of ways. For instance, visual browsers 
frequently display the title as a "tool tip" (a short message that appears when the pointing device pauses over an object). 
Audio user agents  can  speak the title information in a similar context. For example, setting the attribute on a link allows 
user agents (visual and non-visual) to tell users about the nature of the linked resource:
7.12.7.3  Associations
7.12.7.3.1  parts: CMFootnotes [0..* ordered] «Anonymous»: The content (text and footnotes) that 
represent the text with which the activatable link is associated.
Refer to Clause A.2 for the meaning of the Anonymous stereotype.
7.12.7.4  Invariants
some text shall be associated with the link.
OCL for Invariants:
inv "SHALL have at least one item": parts->notEmpty
7.12.7.5  Example
<text>History of coronary artery disease, as noted 
<linkHtml href="#SECT001">above</linkHtml>.
</text>
An explicit reference. In this example, the reference is to a CDA section with the id "SECT001":
<section ID="SECT003">
<code code="10153-2" codeSystem="2.16.840.1.113883.6.1"
codeSystemName="LOINC"/>
<title>Past Medical History</title>
</section>
7.12.8  StrucDoc.RenderMultiMedia
7.12.8.1  Description
Specializes StrucDoc.Base.
References multimedia content that is integral to the document, and serves to show where the referenced 
multimedia are to be rendered. The multimedia content SHALL be contained within the context  of the document.
There is an optional caption and  it  contains  a required referencedObject attribute (of type XML IDREFS), the 
values of which shall  equal the XML ID value(s) of ObservationMedia or RegionOfInterest CDA entries within 
the document context. 
ISO/FDIS 21090:2009(E)
148  © ISO 2009 – All rights reserved
7.12.8.2  Attributes
7.12.8.2.1  caption : StrucDoc.Caption: An optional caption for the multimedia content.
7.12.8.2.2  referencedObject : Set(String) «XMLIDREF» : The references are to other identified objects 
within the document context.
Refer to Clause A.2 for the meaning of the XMLIDREF stereotype.
7.12.8.3  Invariants
at least one reference shall be provided.
OCL for Invariants:
inv "SHALL have at least one ref": referencedObject->size() > 0
7.12.9  StrucDoc.FootnoteRef
7.12.9.1  Description
Specializes StrucDoc.Base.
A reference to an existing footnote within the document context. This may be used when the same footnote is 
being used multiple times. The value of the footnoteRef.IDREF SHALL be an footnote.ID value in the same 
document.
7.12.9.2  Attributes
7.12.9.2.1  IDREF: String «XMLIDREF»: The identity of the referenced footnote.
Refer to Clause A.2 for the meaning of the XMLIDREF stereotype.
7.12.9.3  Invariants
a reference shall be provided.
OCL for Invariants:
inv "SHALL have a reference": IDREF.oclIsDefined
7.12.10 StrucDoc.Footnote
7.12.10.1  Description
Specializes StrucDoc.Base.
Indicates a footnote. The content contained within the Footnote is the content of the footnote. When the 
document is rendered, a link to the footnote is displayed in line with the flow of text adjacent to the footnote.
Receivers are required to interpret these elements when rendering,  by visually distinguishing footnoted text. 
The exact rendition is at the discretion of the recipient, and might include a mark at the location of the footnote 
with a hyperlink to the footnoted text, a simple demarcation [such as "This is the text (this is the footnote)  that 
is being footnoted"], etc. 
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  149
7.12.10.2  Associations
7.12.10.2.1  parts : StrucDoc.CMGeneral[0..* ordered] «Anonymous»: The contents of the footnote.
Refer to Clause A.2 for the meaning of the Anonymous stereotype.
7.12.10.3  Invariants
the footnote SHALL contain some content;
footnotes cannot contain nested footnotes.
OCL for Invariants:
inv "Some content required": parts->notEmpty
inv "no nested footnotes": parts->forAll(t |
t.footnote.oclIsUndefined and t.footnoteRef.oclIsUndefined)
7.12.11 StrucDoc.TitleFootnote
7.12.11.1.1  Description
Specializes StrucDoc.Base.
Same functionality as a normal footnote, but the content model in the parts is restricted to the kind of content 
that can appear in a title.
7.12.11.2  Associations
7.12.11.2.1  parts : StrucDoc.CMTitle[0..* ordered] «Anonymous»: The contents of the footnote.
Refer to Clause A.2 for the meaning of the Anonymous stereotype.
7.12.11.3  Invariants
the footnote shall contain some content.
OCL for Invariants:
inv "Some content required": parts->notEmpty
7.12.12 StrucDoc.Content
7.12.12.1  Description
Specializes StrucDoc.Base.
Used to wrap a string of text so that it can be explicitly referenced, or so that it can suggest rendering 
characteristics. Content can be nested recursively, which enables wrapping a string of plain text down  to as 
small a chunk as desired.
Content has an optional identifier that can serve as the target of a reference. This identifier, represented as an 
XML ID attribute, SHALL be unique within the document context. The originalText attribute of a datatype defined 
in this International Standard may make explicit reference to the content using the identifier, thereby indicating 
the original text associated with the datatype. 
ISO/FDIS 21090:2009(E)
150  © ISO 2009 – All rights reserved
7.12.12.2  Attributes
7.12.12.2.1  revised: Revised: can be used to indicate narrative changes from the last   version of a CDA 
document.  The attribute is limited to a single generation, in that it only reflects the changes from the 
preceding version of a document. Receivers  shall  interpret the "revised" attribute when rendering by visually 
distinguishing or suppressing deleted narrative.
If applied, this attribute  shall be used in conjunction with appropriate document version tracking as defined in 
the applicable conformance statement for the document context.
If populated, the value of this attribute shall be taken from one of these values:
StrucDoc.Revised Enumeration
1  Insert  insert  This content was inserted in this revision of the document
1  delete  delete  This content was deleted in this revision of the document
7.12.12.3  Associations
7.12.12.3.1  parts : StrucDoc.CMContent[0..* ordered] «Anonymous»: The contents of the Content.
Refer to Clause A.2 for the meaning of the Anonymous stereotype.
7.12.12.4  Invariants
the content shall contain some content.
OCL for Invariants:
inv "Some content required": parts->notEmpty
7.12.13 StrucDoc.Caption
7.12.13.1  Description
Specializes StrucDoc.Base.
A label for a paragraph, list, list item, table or table cell. It may also be used within RenderMultiMedia to 
indicate a label for referenced ObservationMedia and RegionOfInterest entries. A Caption contains plain text 
and may contain links and footnotes.
If a caption is defined, it  shall  be rendered, and  shall  be presented before any the element with which it is 
associated.
7.12.13.2  Associations
7.12.13.2.1  parts : StrucDoc.CMInline[0..* ordered] «Anonymous»: The contents of the Content.
Refer to Clause A.2 for the meaning of the Anonymous stereotype.
7.12.13.3  Invariants
the caption shall contain some content.
OCL for Invariants:
inv "Some content required": parts->notEmpty 
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  151
7.12.14 StrucDoc.Captioned
7.12.14.1  Description
Abstract. Specializes StrucDoc.Base.
An abstract ancestor for all types that have captions.
If a caption is defined, it  shall  be rendered, and  shall  be presented before any the element with which it is 
associated.
7.12.14.2  Attributes
7.12.14.2.1  caption : StrucDoc.Caption : The contents of the Content.
Refer to Clause A.2 for the meaning of the Anonymous stereotype.
7.12.15 StrucDoc.Paragraph
7.12.15.1  Description
Specializes StrucDoc.Captioned.
Similar to the HTML paragraph, which allows blocks of narrative to be broken up into logically consistent 
structures
7.12.15.2  Associations
7.12.15.2.1  parts: StrucDoc.CMInline[0..* ordered] «Anonymous»: The contents of the Content.
Refer to Clause A.2 for the meaning of the Anonymous stereotype.
7.12.15.3  Invariants
the caption shall contain some content.
OCL for Invariants:
inv "Some content required": parts->notEmpty
7.12.16 StrucDoc.CMFootnotes
7.12.16.1  Description
Stereotype: «Choice»
Content model that allows text and footnotes. The choice stereotype denotes that exactly one of the attributes 
shall have a value. All the others shall be null.
7.12.16.2  Attributes
7.12.16.2.1  Text : String «XMLText»: Plain text.
Refer to Clause A.2 for the meaning of the XMLText stereotype. 
ISO/FDIS 21090:2009(E)
152  © ISO 2009 – All rights reserved
7.12.16.2.2  footnote : StrucDoc.Footnote: A footnote.
7.12.16.2.3  footnoteRef : StrucDoc.FootnoteRef: A reference to a footnote.
7.12.17 StrucDoc.CMInline
7.12.17.1  Description
Specializes StrucDoc.CMFootnotes.
Stereotype: «Choice».
Content model that allows text, footnotes, links, and superscript and subscript text. The choice stereotype 
denotes that exactly one of the attributes (including inherited attributes) shall have a value. All the others SHALL 
be null.
7.12.17.2  Attributes
7.12.17.2.1  linkHtml : StrucDoc.LinkHtml: A HTML-type link.
7.12.17.2.2  sub : StrucDoc.Sub: Subscript text.
7.12.17.2.3  sup : StrucDoc.Sup: Superscript text.
7.12.18 StrucDoc.CMContent
7.12.18.1  Description
Specializes StrucDoc.CMInline.
Content model that allows text, footnotes, links, superscript and subscript text, line breaks, multimedia content 
and nested Content items. The choice stereotype denotes that exactly one of the attributes (including inherited 
attributes) shall have a value. All the others shall be null.
7.12.18.2  Attributes
7.12.18.2.1  content : StrucDoc.Content: Nested Content.
7.12.18.2.2  br : StrucDoc.Br: A hard line break.
7.12.18.2.3  renderMultiMedia : StrucDoc.RenderMultiMedia: Multimedia.
7.12.19 StrucDoc.CMGeneral
7.12.19.1  Description
Specializes StrucDoc.CMContent.
Content model that allows text, footnotes, links, superscript and subscript text, line breaks, multimedia content, 
nested Content items, paragraphs, lists and tables. The choice stereotype denotes that exactly one of the 
attributes (including inherited attributes) shall have a value. All the others shall be null. 
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  153
7.12.19.2  Attributes
7.12.19.2.1  paragraph : StrucDoc.Paragaph: A paragraph of text and other CMContent content.
7.12.19.2.2  list : StrucDoc.List: List based content.
7.12.19.2.3  table : StrucDoc.Table: Table.
7.12.20 StrucDoc.CMTitle
7.12.20.1  Description
Stereotype: «Choice».
Content model that allows text and footnotes, hard line breaks, links, superscript and subscript text and nested 
content sections. Multimedia content is not allowed. The choice stereotype denotes that exactly one of the 
attributes (including inherited attributes) shall have a value. All the others shall be null.
7.12.20.2  Attributes
7.12.20.2.1  Text : String «XMLText»: Plain text.
Refer to Clause A.2 for the meaning of the XMLText stereotype.
7.12.20.2.2  footnote : StrucDoc.Footnote: A footnote.
7.12.20.2.3  footnoteRef : StrucDoc.FootnoteRef: A reference to a footnote.
7.12.20.2.4  br : StrucDoc.Br: A hard line break.
7.12.20.2.5  linkHtml : StrucDoc.LinkHtml: A HTML-type link.
7.12.20.2.6  sub : StrucDoc.Sub: Subscript text.
7.12.20.2.7  sup : StrucDoc.Sup: Superscript text.
7.12.20.2.8  content : StrucDoc.Content: Nested Content.
7.12.21 StrucDoc.List
7.12.21.1  Description
Specializes StrucDoc.Captioned.
Similar to an HTML list. There is an optional caption, and one or more items. The list  shall  be ordered or not 
ordered; this shall always be known. 
ISO/FDIS 21090:2009(E)
154  © ISO 2009 – All rights reserved
7.12.21.2  Attributes
7.12.21.2.1  listType : StrucDoc.ListType: Whether the list is ordered or unordered.
If populated, the value of this attribute SHALL be taken from one of these values: 
StrucDoc.ListType Enumeration
1  ordered  ordered  The list is ordered
1  unordered  unordered  The list is not ordered
The default value is unordered.
NOTE  Unordered lists are typically rendered with bullets, whereas ordered lists are typically rendered with numbers, 
although this is not a requirement.
7.12.21.3  Associations
7.12.21.3.1  item : StrucDoc.Item[0..* ordered]: Actual list items.
7.12.21.4  Invariants
at least one item SHALL be provided.
OCL for Invariants:
inv "SHALL have at least one item": item->notEmpty
7.12.22 StrucDoc.Item
7.12.22.1  Description
Specializes StrucDoc.Captioned.
An item in a list.
7.12.22.2  Associations
7.12.22.2.1  parts : StrucDoc.CMGeneral[0..* ordered] «Anonymous»: The contents of the footnote.
Refer to Clause A.2 for the meaning of the Anonymous stereotype.
7.12.23 StrucDoc.TableItem
7.12.23.1  Description
Abstract. Specializes StrucDoc.Base.
An abstract container for table items that may specify table layout details such as alignment.
Any attributes applied to the table item also apply to any other nested table items unless specifically 
overridden. 
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  155
7.12.23.2  Attributes
7.12.23.2.1  align : StrucDoc.Align: The text alignment that applies within the cell.
If populated, the value of this attribute shall be taken from one of these values: 
StrucDoc.CellAlign Enumeration
1  left  left
The content is left aligned. This long paragraph 
serves as an example of left aligned content in a 
table cell.
1  centre  centre
The content is centre aligned. This long 
paragraph serves as an example of centre
aligned content in a table cell.
1  right  right
The content is right aligned. This long 
paragraph serves as an example of right aligned 
content in a table cell.
1  justify  justify
The content is justified. This long paragraph 
serves as an example of content that is justified 
in a table cell.
1  char  char
align=char aligns a cell's contents on the 
character given in the char attribute. 
The default value is left.
7.12.23.2.2  char : String:  The character on which to align cells if align is set to char. The default value for the 
CHAR attribute is the decimal point of the current language – a fullstop in English.
7.12.23.2.3  charoff : StrucDoc.Length:  When present, this attribute specifies the offset to the first 
occurrence of the alignment character on each line. If  a line doesn‘t include the alignment character, it should 
be horizontally shifted to end at the alignment position. Information Processing Entities  shall not be required to 
support this attribute.
7.12.23.2.4  valign : StrucDoc.VAlign: The vertical alignment that applies within the cell.
If populated, the value of this attribute shall be taken from one of these values: 
StrucDoc.VAlign Enumeration
1  top  top
The content is aligned with the top of the cell as 
shown in the caption column.
1  middle  middle
The content is aligned with the bottom of the cell 
as shown in the caption column.
1  bottom  bottom
The content is aligned with the bottom of the cell 
as shown in the caption column.
1  baseline  baseline
All cells in the same row as a cell whose align 
attribute has this value should have their textual 
data positioned so that the first text line occurs 
on a baseline common to all cells in the row. 
This constraint does not apply to subsequent 
text lines in these cells
The default value is top. 
ISO/FDIS 21090:2009(E)
156  © ISO 2009 – All rights reserved
7.12.24 StrucDoc.TCell
7.12.24.1  Description
Specializes StrucDoc.TableItem.
A cell in a table – may be either a normal cell or a header cell.
7.12.24.2  Attributes
7.12.24.2.1  abbr : String:  This attribute should be used to provide an abbreviated form of the cell‘s content, 
and may be rendered by user agents when appropriate  in place of the cell‘s content. Abbreviated names 
should be short since user agents may render them repeatedly.
7.12.24.2.2  axis : String:  This attribute may be used to place a cell into conceptual categories that can be 
considered to form axes in an n-dimensional space. User agents may give users access to these categories 
(e.g., the user may query the user agent for all cells that belong to certain categories, the user agent may 
present a table in the form of a table of contents, etc.). Please consult the HTML specification for more 
information. The value of this attribute is a comma-separated list of category names
7.12.24.2.3  headers : Set(String)  «XMLIDREF»:  This attribute specifies the list of header cells that provide 
header information for the current data cell. The value  of this attribute is a space-separated list of ID 
references to header cells; those cells SHALL be named by setting their id attribute. Authors generally use the 
headers attribute to help non-visual user agents render header information about data cells (e.g., header 
information is spoken prior to the cell data), but the attribute may also be used in conjunction with style sheets. 
See also the scope attribute.
Refer to Clause A.2 for the meaning of the XMLIDREF stereotype.
7.12.24.2.4  scope : StrucDoc.CellScope:  This attribute specifies the set of data cells for which the current 
header cell provides header information. This attribute may be used in place of the headers attribute, 
particularly for simple tables.
This attribute shall only be populated for header cells.
If populated, the value of this attribute shall be taken from one of these values: 
StrucDoc.CellScope Enumeration
1  row  row
The current cell provides header information for the 
rest of the row that contains it.
1  col  col
The current cell provides header information for the 
rest of the column that contains it.
1  rowgroup  rowgroup
The header cell provides header information for the 
rest of the row group that contains it.
1  colgroup  colgroup
The header cell provides header information for the 
rest of the column group that contains it.
The default value is Col 
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  157
7.12.24.2.5  rowspan : Integer: The number of rows that this cell spans. Default value is 1.
7.12.24.2.6  colspan : Integer: The number of columns that this cell spans. Default value is 1.
7.12.24.3  Associations
7.12.24.3.1  parts : StrucDoc.CMGeneral[0..* ordered] «Anonymous»: The contents of the footnote.
Refer to Clause A.2 for the meaning of the Anonymous stereotype.
7.12.24.4  Invariants
tables are not allowed to nest directly.
OCL for Invariants:
inv "no nested tables": parts.forAll(t | t.table.oclIsUndefined)
7.12.25 StrucDoc.TRow
7.12.25.1  Description
Specializes StrucDoc.TableItem.
A Row in a table.
7.12.25.2  Associations
7.12.25.2.1  parts : Sequence(StrucDoc.TRowPart) «Anonymous»: The contents of the row.
Refer to Clause A.2 for the meaning of the Anonymous stereotype.
7.12.25.3  Invariants
at least one row part shall be provided.
OCL for Invariants:
inv "SHALL have at least one item": parts->notEmpty
7.12.26 StrucDoc.TRowPart
7.12.26.1  Description
Stereotype: «Choice».
Content model that allows cells (td) or header cells (th). The choice stereotype denotes that exactly one of the 
attributes shall have a value. The other shall be null. 
ISO/FDIS 21090:2009(E)
158  © ISO 2009 – All rights reserved
7.12.26.2  Attributes
7.12.26.2.1  td : StrucDoc.TCell: A cell in a table.
7.12.26.2.2  th : StrucDoc.TCell: A header cell in a table.
NOTE  Header cells are sometimes rendered differently, such as using bold, and may be repeated after page breaks.
7.12.27 StrucDoc.TRowGroup
7.12.27.1  Description
Specializes StrucDoc.TableItem.
A grop of rows – may be used to associate consistent styling across a group of rows.
7.12.27.2  Attributes
7.12.27.2.1  tr : Sequence(StrucDoc.Trow): The rows in the group.
7.12.27.3  Invariants
at least one row SHALL be provided.
OCL for Invariants:
inv "SHALL have at least one item": tr->notEmpty
7.12.28 StrucDoc.ColItem
7.12.28.1  Description
Abstract. Specializes StrucDoc.TableItem.
Abstract ancestor for common properties of col and colgroup.
7.12.28.2  Attributes
7.12.28.2.1.1  span : Integer: The number of columns this column definition spans. Default value is 1.
7.12.28.2.1.2  width : StrucDoc.Length: The length for the column.
7.12.29 StrucDoc.Col
7.12.29.1  Description
Specializes StrucDoc.ColItem.
Applies a consistent style to every cell in a column. 
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  159
7.12.30 StrucDoc.ColGroup
7.12.30.1  Description
Specializes T+.
Applies a consistent style to every cell in a group of columns.
7.12.30.2  Associations
7.12.30.2.1  col : StrucDoc.Col[0..* ordered]: The columns in this group.
7.12.30.3  Invariants
at least one column SHALL be provided.
OCL for Invariants:
inv "SHALL have at least one item": col->notEmpty
7.12.31 StrucDoc.Table
7.12.31.1  Description
Specializes StrucDoc.Captioned.
A table. May have a caption, and  shall  have at least one row. A table may have optional header and footer 
rows. All rows are defined in groups. A table may also have col and colgroup elements to define styles for 
columns.
7.12.31.2  Attributes
7.12.31.2.1  summary : String : This attribute provides a summary of the table‘s purpose and structure for 
user agents rendering to non-visual media such as speech and Braille. This is different from the caption in that 
it SHALL be plain text, and it is usually longer.
7.12.31.2.2  width  : StrucDoc.Length : This attribute specifies the desired width of the entire table and is 
intended for visual user agents.
The rules described in the html specification for table width calculations apply to the tables described here.
7.12.31.2.3  border  : StrucDoc.Length : The width of the border.
7.12.31.2.4  frame  : StrucDoc.Frame : This attribute specifies which sides of the frame surrounding a table 
will be visible (i.e. which borders are visible). 
ISO/FDIS 21090:2009(E)
160  © ISO 2009 – All rights reserved
If populated, the value of this attribute shall be taken from one of these values:
StrucDoc.Frame Enumeration
1  void  void  No sides.
1  above  above  The top side only.
1  below  below  The bottom side only.
1  hsides  hsides  The right and left sides only.
1  lhs  lhs  The left-hand side only.
1  rhs  rhs  The right-hand side only.
1  vsides  vsides  The top and bottom sides only.
1  box  box  All four sides.
1  border  border  All four sides.
The default value is void.
7.12.31.2.5  rules   : StrucDoc.Rules  :  This attribute specifies which rules (i.e. borders) will appear between 
cells within a table. The rendering of rules is user agent dependent.
If populated, the value of this attribute SHALL be taken from one of these values:
StrucDoc.Rules Enumeration
1  none  none  No rules.
1  groups  groups
Rules will appear between row groups 
and column only
1  rows  rows  Rules will appear between rows only
1  cols  cols  Rules will appear between columns only
1  all  all  Rules will appear between all rows and columns
The default value is none.
7.12.31.2.6  cellspacing  : StrucDoc.Length  : This attribute specifies how much space the user agent should 
leave between the left side of the table   and the left-hand side of the leftmost column, the top of the table and 
the top side of the topmost row, and so on for the right and bottom of the table. The attribute also specifies the 
amount of space to leave between cells.
7.12.31.2.7  cellpadding   : StrucDoc.Length:  This attribute specifies the amount of space between the 
border of the cell and its contents. If the value of this attribute is a pixel length, all four margins should be this 
distance from the contents. If the value of the attribute is a percentage length, the top and bottom margins 
should be equally separated from the content based on a percentage of the available vertical space, and the 
left and right margins should be equally separated from the content based on a percentage of the available 
horizontal space.
NOTE  Consult the HTML specification for further information. 
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  161
7.12.31.3  Associations
7.12.31.3.1  thead : TRowGroup: The optional group of rows that defines the header for the table.
7.12.31.3.2  tfoot : TRowGroup: The optional group of rows that defines the footer for the table.
7.12.31.3.3  tbody : TrowGroup[0..* ordered]: The optional group of rows that defines the body of the table.
7.12.31.4  Invariants
at least one row shall be provided.
OCL for Invariants:
inv "SHALL have at least one row": thead.tr->count + tfoot.tr->count
+ tbody.tr->count > 0
7.12.32 SD.TEXT
7.12.32.1  Description
Specializes ANY.
A definition of structured text that can be used in healthcare.
The structured text is based on an XHTML-like arrangement that ensures the text is properly marked up with 
semantics, and provides a common base line for implementation in healthcare.
The type SD.TEXT is also known as StrucDoc.Text (for legacy reasons).
7.12.32.2  Associations
7.12.32.2.1  base : StrucDoc.Base[1..1] «Anonymous»: basic identification and styling attributes.
7.12.32.2.2  parts : StrucDoc.CMGeneral[0..* ordered] «Anonymous»: The contents of the structured text.
Refer to Clause A.2 for the meaning of the Anonymous stereotype.
7.12.32.3  Equality
Two SD.TEXT values are equal if they are not nullFlavored and have content (language, styleCode, and
parts).
7.12.32.4  Invariants
a non-null SD.TEXT shall have some parts.
OCL for invariants:
inv "value if not nullFlavored":
isNotNull implies parts->count > 0
ISO/FDIS 21090:2009(E)
162  © ISO 2009 – All rights reserved
7.12.32.5  Operations
7.12.32.5.1  asED() : ED: The SD.TEXT as an ED.  The parts become the value of the ED.xml attribute 
following the XML representation rules laid out in  Annex A. The language is populated from base.language, 
the mediaType is populated from base.language, the mediaType is "text/x -hl7-text+xml", the charset is 
determined the context in which the SD.TEXT occurs, and the other properties of the ED result are null.
7.12.33 SD.TITLE
7.12.33.1  Description
Specializes ANY.
A definition of structured title that can be used in healthcare.
The structured text is based on the  structured text definition, but only a narrow set of features can be used, 
consistent with a title rather than a general document.
The type SD.TITLE is also known as StrucDoc.Title (for legacy reasons).
7.12.33.2  Associations
7.12.33.2.1  base : StrucDoc.Base[1..1] «Anonymous»: basic identification and styling attributes.
7.12.33.2.2  parts : StrucDoc.CMTitle[0..* ordered] «Anonymous»: The contents of the title.
Refer to Clause A.2 for the meaning of the Anonymous stereotype.
7.12.33.3  Equality
Two SD.TITLE values are equal if they are not nullFlavored and have  content (language, styleCode, and 
parts). 
7.12.33.4  Invariants
a non-null SD.TITLE shall have some parts.
OCL for invariants:
inv "value if not nullFlavored":
isNotNull implies parts->count > 0
7.12.33.5  Operations
7.12.33.5.1  asED() : ED: The SD.TITLE as an ED.  The parts  become the value of the ED.xml attribute 
following the XML representation rules laid out in  Annex A. The language is populated from base.language, 
the mediaType is is populated from base.language, the mediaType is "text/x -hl7-title+xml", the charset is 
determined the context in which the SD.TITLE occurs, and the other properties of the ED result are null. 
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  163
Annex A
(normative)
XML representation
A.1  Introduction
Due to the ubiquitious use of XML as an exchange format,  this International Standard  provides a normative 
XML format for use when instances of these datatypes are represented in XML. An information processing 
entity  shall  specify to what degree this format is adopted or not when claiming conformance to  this 
International Standard.
The XML representation is created by a simple algorithm described below, and is intended to provide direct 
support for both schema validation and schema-based software development tools. A full schema for the XML 
representation is provided in Annex  E. Although the schema is only informative, an information processing 
entity that claims conformance with  this International Standard  shall  produce instances that are valid with 
respect to the schema, though validity with respect to the schem a is not sufficient to claim that conformance 
has been demonstrated.
A.2  Rules for XML representation
Any  valid XML charset can be used as long as as it is consistent with the  string character set as 
discussed in  6.7.5. In particular, full round-trip encoding between the  string character set and the XML 
charset is required.
xml:lang  shall  be ignored. For content to which language applies, the Data.language or ST.language 
attribute shall be used instead.
All elements  shall  be in some  namespace, and the namespace  shall  be defined in the conformance 
statements of information processing entities that claim conformance with  this International Standard. 
This International Standard  reserves the namespace "uri:iso.org:21090" for direct applications of these 
datatypes such as testing environments.
The  xml representation (and xml schema) for a type is derived algorithmically from the UML 
representation.
Each type that specializes ANY is represented by an XML element.
UML attributes with a stereotype of binary on their type are represented as an element with text content;
the format of the text in the element is the format specified for the type base64Binary in W3C schema .
UML attributes with a stereotype of XML on their type are represented as XML with a single XML element 
contained;
the name of the XML element is the name of the UML attribute;
this is the equivalent of the schema type anyType.
UML  attributes  with a stereotype of XMLID are represented as an XML ID atttribute. The name of the 
attribute is the same is the UML attribute.  
ISO/FDIS 21090:2009(E)
164  © ISO 2009 – All rights reserved
UML attributes  with a stereotype of XMLIDREF are represented as an XML IDREF atttribute. The name 
of the attribute is the same is the UML attribute. If the type of the UML attribute is a UML collection, then 
the attribute will be a space delimited list of XML IDREF tokens.
UML attributes with a stereotype of XMLText are represented as XML text content. The may only be one 
UML attribute with this stereotype on a class.
UML attributes with a type derived from classifier are represented as an element;
the name of the XML element is the name of the UML attribute;
the format of the element is that specified for the type following these rules recursively.
UML attributes with a type derived from a UML primitive class are represented as an attribute;
the name of the XML attribute is the name of the UML attribute;
the attribute has no namespace;
the content of the attribute  shall  conform to the W3C schema type that matches the UML type as 
specified in the table in Clause A.4;
if  the value of the attribute is equal to its default value, the attribute does not need to be represented 
in the XML; the default value for attributes is null unless specified otherwise in the UML diagrams.
UML attributes with a type derived from a collection of UML classifiers are represented by a sequence of 
XML elements;
the name of the elements is the name of the attribute;
there is one element for each item in the collection;
the format of the element is that specified for the type following these rules  recursively.
UML  attributes  with a type derived from a  collection  of UML primitives are represented by an XML 
attribute;
the name of the XML attribute is the name of the UML attribute;
the attribute has no namespace;
the content of the attribute SHALL be a space separated list of tokens that conform to the schema type 
that matches the UML type as specified in the table  in Clause A.4.
UML associations with a stereotype of "Anonymous" are not represented by any element at all.
The  xsi:nil attribute  shall  not  be used in the XML representation of a value. If a UML attribute is not 
present, it should not be represented in the XML.
If the type being represented has a type other than that specified in the UML (i.e. a specialization), then 
the xsi:type attribute of the element shall be provided. xsi:type may be used at any time.
The schema type name of a type is the same as its UML name, except for bound parameterized classes.
For bound parameterized classes (where the class has type parameters) then the actual param eters 
bound to the class are added to the type using _ as a separator. i.e. DSET(AD) becomes DSET_AD. 
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  165
If an attribute is contained by reference, then this is represented using XML ID/IDREF attributes. The 
reference SHALL be contained within same document. The attribute itself may make other constraints about 
where the target of the reference might be found. The reference may be a forward reference.
A.3  Data type flavours in XML
Data type flavours are used to signal the imposition of one or more sets of constrain ts. The flavours may be 
applied explicitly in the instance of the data type using the flavour property, or it may be applied implicitly by 
some other knowledge. However flavours are applied, they are not treated as types in the XML, as more than 
one flavour may be applied to a type, and XML Schema has no framework for treating types like this.
Instead, the constraints associated with each flavo ur defined in this International Standard  are represented as 
schematron rules to the degree that they can be captured as XPath rules, and are represented as such in the 
schema. While it is not required that flavours not defined in  this International Standard  be represented as 
schematron, the patterns laid down in this schema may be re-used by other information processing entities 
when using other data type flavours. 
A.4  UML/XML schema type mapping
This table lists the mapping from UML primitive types to XML schema types:
UML primitive type  XML Schema Type
Boolean  boolean
Integer  integer
Decimal  decimal
String  string
If the UML type has a stereotype Uri, then the W3C schema type anyURI is used instead of string.
A.5  XML Schema
An XML schema can be derived based on the mapping rules detailed above. A copy of one such schema is 
found in Annex D. This schema can be used to validate whether XML instances conform to the some of the 
rules laid out in this International Standard. The schema includes schematron statements that represent some 
of the OCL constraints in this International Standard.
The schema cannot provide full validation. The fact that any particular instance passes validation against this 
schema using a schema validation tool does not prove that the instance is conformant with regards to  this 
International Standard. Applications will have to undergo further data validation to check data intregrity rules 
that are not represented in the schema before conformance can be assumed. If an instance fails to pass 
validation using a schema tool, and it is not due to a bug or missing feature in the schema validation tool, then 
the instance is not conformant to this International Standard.
It is the responsibility of any importing schema to assign a namespace to the types declared in this schema. 
Any elements assigned types defined in this schema should not be declared as nillable. 
ISO/FDIS 21090:2009(E)
166  © ISO 2009 – All rights reserved
Annex B
(normative)
UML support types
B.1  Introduction
This  annex  declares some UML types that are needed to support the UML type declarations for the UML 
types above. See Figure B.1.
Figure B.1 — UML support datatypes
B.2  UML datatypes
B.2.1  Octet
Represents a number that can take values from 0-255 (also sometimes known as a byte). This is defined to 
allow a formal UML definition of binary. 
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  167
B.2.2  Binary
Represents a sequence of Octets. This type is specifically created to allow UML declarations to refer to binary 
content (also sometimes known as streams).
This type  has a stereotype <<Binary>> to assist with automated mappings to specific platforms, which 
generally provide specific types for dealing with binary content.
B.2.3  Code
A simple string that has a restricted set of possible values. Code is generally used where the code list is 
restricted by some external standard, such as an RFC.
B.2.4  Uid
A string that is an identifier, and therefore shall be either a string representation of an OID (see ISO/IEC 8824), 
a UUID (see Open Group, CDE 1.1 Remote Procedure Call specification, Appendix A), or a simple token 
taken from a list of controlled names for the context in whic h the Uid is used.
Uids shall always be represented in uppercase, and Uid comparison is always case sensitive
B.2.5  Uri
A simple internet URL or URI. This is an extension of string but has a stereotype <<URI>> to assist with 
automated mappings to specific platforms, which may provide a specific type for dealing with binary content.
B.2.6  XML
A placeholder for any XML content. This is used in the data class to allow for either binary content or an XML 
object model.
B.2.7  Decimal
A floating point number with known precision. Operations on the floating point number  shall  be precision 
aware. This type does not map to the simple real type defined in the UML kernel or  ISO/IEC 11404, as these 
are not precision aware.
NOTE 1  One use of the  decimal  type in this  International Standard  is to store monetary amounts, which have well -recognized special requirements for precision.
NOTE 2  The precision is only the precision of a decimal digit representation, not the accuracy of the real number value. 
The purpose of the precision is to faithfully capture the whole information presented to humans , in a number. The amount 
of decimal digits shown conveys information about the uncertainty (i.e., precision and accuracy) of a measured value.
The rules for which digits are significant are as follows:
1)  All non-zero digits are significant.
2)  All zeroes to the right of a significant digit are significant.
3)  When all digits in the number are zero the zero-digit immediately left to the decimal point is 
significant (and because of rule 2, all following zeroes are thus also significant).
NOTE 3  These rules of significance differ slightly from the more casual rules taught  at  school. Notably trailing zeroes 
before the decimal point are consistently regarded significant here. Elsewhere, e.g., 2000 is ambiguous as to whether the 
zeroes are significant. This deviation from the common custom is warranted for the purpose of unambiguous 
communication. 
ISO/FDIS 21090:2009(E)
168  © ISO 2009 – All rights reserved
Examples for the Precision of Real Number Literals.
Literal  Number of significant digits
2000  4
2e3
1
used if one would naturally say "2000" but precision is only 1.
0.001  4
1e-3
1
use this if one would naturally say "0.001" but precision is only 1.
0  1
0.0  2
0.1  2
.1  2
000.0  2
0.00  3
4.10  3
4.09  3
4.1  2
The precision of the representation is independent from uncertainty (precision accuracy) of a measurement 
result. If the uncertainty of a measurement result is important, one should specify uncertain values as PPD or 
CIVL.
The precision of the representation  should  match the uncertainty of the value. However, precision of the 
representation and uncertainty of the value are separate independent concepts. Refer to PPD<REAL> for 
details about uncertain real numbers.
For example "0.123" has 3 significant digits in the representation, but the uncertainty of the value may  be in 
any digit shown or not shown, i.e., the uncertainty may be 0.123   0.0005, 0.123   0.005 or 0.123   0.00005, 
etc. However, since the precision in the digit string is granular to 0.5 in the least significant digit, while 
uncertainty may be anywhere between these "grid lines", 0.123   0.005 would also be an adequate 
representation for the value between 0.118 and 0.128. 
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  169
Annex C
(informative)
RM-ODP viewpoint mappings
The  reference model  of  open distributed processing  (RM-ODP) is a joint effort by ISO/IEC and ITU-T which 
provides a  co-ordinating framework for the standardization of open distributed processing (ODP). The RM-ODP family of recommendations and International Standards  defines essential concepts necessary to specify 
open distributed processing systems from five prescribed  viewpoints and provides a well-developed 
framework for the structuring of specifications for large-scale, distributed systems.
RM-ODP defines five viewpoints for describing a system.
the  enterprise viewpoint, which is concerned with the purpose, scope and   policies governing the 
activities of the specified system within the organization of which it is a part;
the  information viewpoint, which is concerned with the kinds of information handled by the system and 
constraints on the use and interpretation of that information;
the computational viewpoint, which is concerned with the functional decomposition of the system into a 
set of objects that interact at interfaces – enabling system distribution;
the  engineering viewpoint, which is concerned with the infrastructure required to support system 
distribution;
the  technology viewpoint, which is concerned with the choice of technology to support system 
distribution.
Though there is not a direct mapping between any of these five viewpoints and this datatype specification, 
there are conceptual similarities between these views and the datatype specifications.
The HL7 V3 Abstract Data Types specification is conceptually similar to the information viewpoint: it is 
concerned with the kinds of information that  can  be handled, and constraints on the use and interpretation of 
the information. It is not directly concerned with computation questions that arise when systems are actually 
designed.
This International Standard is conceptually similar to the computational view point:  it is concerned with how to 
represent the informational view described in the HL7 V3 Abstract Data Types in a set of objects, and to deal 
with computational issues such as how null objects and null flavours interact with each other.
This International Standard  allows for tools to take the UML specifications and create genuine technology-bound implementations, such as generated code in a particular computing language. These generated 
specifications relate to the technology and engineering viewpoints and their interface with the computational 
viewpoint. 
ISO/FDIS 21090:2009(E)
170  © ISO 2009 – All rights reserved
Annex D
(informative)
HL7 V3 Abstract Data Types mapping
The HL7 V3 Abstract Data Types Specification (R2) describes the datatypes used by HL7 V3 in a purely 
semantic fashion. The datatypes are derived in a fashion that is completely independent of any other 
specification, in much the same fashion as ISO/IEC 11404 defines the general purpose datatypes.
NOTE 1  Combined, the Abstract Data Types and  this International Standard  introduce some non-backwards 
compatible changes from R1 of the HL7 V3 datatypes. This issue is further discussed in the ISO 21090 Conformance 
Statement in the HL7 V3 Specification.
This International Standard  is an implementation of the HL7 V3 Abstract Data Types (R2). This UML diagram 
(Figure D.1) summarizes the types defined in the HL7 V3 Abstract Data Types Specification
Figure D.1 — Abstract data types summary
NOTE 2  In this diagram, the HL7 Abstract Data Types are defined as interfaces. There is a custom stereotype used 
called ?mixin?. A mixin interface acts like a parameterized interface, but rather than expressing properties of the type of the 
parameter, the interface itself extends the interface that it takes as a parameter. This is a technique that is not supported 
in many implementation technologies, and is also not directly supported in UML.  
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  171
The following UML diagrams (Figures D.2 to D.11)  describe how the ISO datatype classes implement the HL7 
V3 Abstract Data Types.
Figure D.2 — Basic type mappings
Figure D.3 — Collection type mappings 
ISO/FDIS 21090:2009(E)
172  © ISO 2009 – All rights reserved
Figure D.4 — Text type mappings
Figure D.5 — Terminology type mappings 
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  173
Figure D.6 — Identification and location type mappings
Figure D.7 — Name and address type mappings 
ISO/FDIS 21090:2009(E)
174  © ISO 2009 – All rights reserved
Figure D.8 — Basic quantity type mappings
NOTE  The QTY attribute expression comes from the EXPR<T> type, the attributes uncertainty and uncertaintyType 
come from the PPD<T> type, and the attribute uncertainRange comes from the URG<T> type. 
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  175
Figure D.9 — Quantity type mappings 
ISO/FDIS 21090:2009(E)
176  © ISO 2009 – All rights reserved
Figure D.10 — Quantity set type mappings
Figure D.11 — Uncertainty set type mappings 
ISO/FDIS 21090:2009(E)
© ISO 2009 – All rights reserved  177
Annex E
(informative)
Schema for XML representation
The schema will be posted to the ISO web site when this standard becomes normative (and this section will 
be rewritten accordingly). For the period of the FDIS, the schema can be found at 
http://svn.hl7.nscee.edu/svn/hl7v3/hl7v3/trunk/dt/iso/iso-21090-datatypes.xsd 
(and http://svn.hl7.nscee.edu/svn/hl7v3/hl7v3/trunk/dt/iso/iso-21090-datatypes-tester.xsd) 
ISO/FDIS 21090:2009(E)
178  © ISO 2009 – All rights reserved
Bibliography
[1]  ISO 3166-1,  Codes for the representation of names of countries and their subdivisions —  Part 1: 
Country codes
[2]  ISO/IEC 11179 (all parts), Information technology — Metadata registries (MDR)
[3]  ISO/IEC 10646-1:2000,  Information technology —  Universal Multiple-Octet Coded Character Set 
(UCS) — Part 1: Architecture and Basic Multilingual Plane
[4]  ISO 13606 (all parts), Health informatics — Electronic health record communication
[5]  IETF RFC 2978 — IANA Charset Registration Procedures
[6]  OASIS CIQ — http://www.oasis-open.org/committees/ciq