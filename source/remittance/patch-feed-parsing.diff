diff --git build/implementations/java/org.hl7.fhir.instance/bin/.gitignore build/implementations/java/org.hl7.fhir.instance/bin/.gitignore
deleted file mode 100644
index e69de29..0000000
diff --git build/implementations/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/formats/XmlParserBase.java build/implementations/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/formats/XmlParserBase.java
index 02ae696..5d2d696 100644
--- build/implementations/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/formats/XmlParserBase.java
+++ build/implementations/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/formats/XmlParserBase.java
@@ -223,7 +223,7 @@ public abstract class XmlParserBase extends ParserBase implements Parser {
         res.setResource((T)p.parse(xpp));//TODO Refactor architecture to eliminate this unsafe cast and better support generics
         xpp.next();
         nextNoWhitespace(xpp);
-        if (xpp.getName() == null){
+        if (xpp.getName().equals("content")){
         	xpp.next();
         }
         
diff --git build/implementations/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/test/AtomParserTest.java build/implementations/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/test/AtomParserTest.java
index d89e7d3..33e7635 100644
--- build/implementations/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/test/AtomParserTest.java
+++ build/implementations/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/test/AtomParserTest.java
@@ -21,11 +21,11 @@ import org.junit.Test;
 public class AtomParserTest {
 	
 	private File file = null;
-	private String filepathResourceNotPretty = "C:\\cnanjo\\repository\\fhirTestInstances\\containedResource_notpretty.xml";
-	private String filepathResourcePretty = "C:\\cnanjo\\repository\\fhirTestInstances\\containedResource_pretty.xml";
-	private String filepathFeedNotPretty = "C:\\cnanjo\\repository\\fhirTestInstances\\containedFeed_notpretty.xml";
-	private String filepathFeedPretty = "C:\\cnanjo\\repository\\fhirTestInstances\\containedFeed_pretty.xml";
-	private String itemPath = "C:/cnanjo/repository/fhir/trunk/build/publish/examples/diagnosticreport-examples-lab-text.xml";
+	private String filepathResourceNotPretty = "/home/jmandel/smart/fhir/build/fixtures/containedResource_notpretty.xml";
+	private String filepathResourcePretty = "/home/jmandel/smart/fhir/build/fixtures/containedResource_pretty.xml";
+	private String filepathFeedNotPretty = "/home/jmandel/smart/fhir/build/fixtures/containedFeed_notpretty.xml";
+	private String filepathFeedPretty = "/home/jmandel/smart/fhir/build/fixtures/containedFeed_pretty.xml";
+	private String itemPath = "/home/jmandel/smart/fhir/build/publish/examples/diagnosticreport-examples-lab-text.xml";
 	private XmlParser parser = null;
 
 	@BeforeClass
@@ -47,7 +47,7 @@ public class AtomParserTest {
 	
 	@Test
 	public void validateParserAgainstResourceSet() {
-		File dir = new File("C:/cnanjo/repository/fhir/trunk/build/publish/examples");
+		File dir = new File("/home/jmandel/smart/fhir/build/publish/examples");
 		try {
 			for(File file : dir.listFiles()) {
 				parseFile(file);
diff --git build/implementations/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/utils/NarrativeGenerator.java build/implementations/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/utils/NarrativeGenerator.java
index 5fafda2..ae05f0a 100644
--- build/implementations/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/utils/NarrativeGenerator.java
+++ build/implementations/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/utils/NarrativeGenerator.java
@@ -40,7 +40,7 @@ public class NarrativeGenerator {
    * @param codeSystems
    * @throws Exception
    */
-  public <T extends Resource> void generate(ValueSet vs, Map<String, AtomEntry<T>> codeSystems, Map<String, AtomEntry<T>> valueSets) throws Exception {
+  public void generate(ValueSet vs, Map<String, AtomEntry<? extends Resource>> codeSystems, Map<String, AtomEntry<? extends Resource>> valueSets) throws Exception {
     XhtmlNode x = new XhtmlNode();
     x.setNodeType(NodeType.Element);
     x.setName("div");
@@ -140,7 +140,7 @@ public class NarrativeGenerator {
   }
 
 
-  private <T extends Resource> void generateComposition(XhtmlNode x, ValueSet vs, Map<String, AtomEntry<T>> codeSystems, Map<String, AtomEntry<T>> valueSets) throws Exception {
+  private void generateComposition(XhtmlNode x, ValueSet vs, Map<String, AtomEntry<? extends Resource>> codeSystems, Map<String, AtomEntry<? extends Resource>> valueSets) throws Exception {
     if (vs.getDefine() == null) {
       XhtmlNode h = x.addTag("h2");
       h.addText(vs.getNameSimple());
@@ -170,8 +170,9 @@ public class NarrativeGenerator {
     }
   }
 
-  private <T extends Resource> void AddVsRef(String value, XhtmlNode li, Map<String, AtomEntry<T>> codeSystems, Map<String, AtomEntry<T>> valueSets) {
-    AtomEntry<T> vs = valueSets.get(value);
+  private void AddVsRef(String value, XhtmlNode li, Map<String, AtomEntry<? extends Resource>> codeSystems, Map<String, AtomEntry<? extends Resource>> valueSets) {
+
+    AtomEntry<? extends Resource> vs = valueSets.get(value);
     if (vs == null) 
       vs = codeSystems.get(value); 
     if (vs == null)
@@ -184,10 +185,10 @@ public class NarrativeGenerator {
     }    
   }
 
-  private  <T extends Resource> void genInclude(XhtmlNode ul, ConceptSetComponent inc, String type, Map<String, AtomEntry<T>> codeSystems) throws Exception {
+  private  void genInclude(XhtmlNode ul, ConceptSetComponent inc, String type, Map<String, AtomEntry<? extends Resource>> codeSystems) throws Exception {
     XhtmlNode li;
     li = ul.addTag("li");
-    AtomEntry<T> e = codeSystems.get(inc.getSystemSimple().toString());
+    AtomEntry<? extends Resource> e = codeSystems.get(inc.getSystemSimple().toString());
     
     if (inc.getCode().size() == 0 && inc.getFilter().size() == 0) { 
       li.addText(type+" all codes defined in ");
diff --git build/temp/hl7/dload/.gitignore build/temp/hl7/dload/.gitignore
deleted file mode 100644
index e69de29..0000000
diff --git build/temp/hl7/web/.gitignore build/temp/hl7/web/.gitignore
deleted file mode 100644
index e69de29..0000000
diff --git build/tools/java/org.hl7.fhir.instance/bin/.gitignore build/tools/java/org.hl7.fhir.instance/bin/.gitignore
deleted file mode 100644
index e69de29..0000000
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/formats/JsonComposer.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/formats/JsonComposer.java
index 181381d..2cc153e 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/formats/JsonComposer.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/formats/JsonComposer.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.formats;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 import org.hl7.fhir.instance.model.*;
 import org.hl7.fhir.instance.model.Integer;
@@ -61,17 +61,18 @@ public class JsonComposer extends JsonComposerBase {
     }    
   }    
 
-  private void composeInteger(String name, Integer value) throws Exception {
-    if (value != null) {
+  private void composeId(String name, Id value) throws Exception {
+    if (value != null && (!Utilities.noString(value.getXmlId()) || value.hasExtensions() || !Utilities.noString(value.getValue()))) {
       open(name);
       composeElement(value);
-        prop("value", java.lang.Integer.valueOf(value.getValue()));
+      if (value.getValue() != null) 
+        prop("value", toString(value.getValue()));
       close();
     }    
   }    
 
-  private void composeDateTime(String name, DateTime value) throws Exception {
-    if (value != null && (!Utilities.noString(value.getXmlId()) || value.hasExtensions() || !Utilities.noString(value.getValue()))) {
+  private void composeBase64Binary(String name, Base64Binary value) throws Exception {
+    if (value != null && (!Utilities.noString(value.getXmlId()) || value.hasExtensions() || value.getValue() != null)) {
       open(name);
       composeElement(value);
       if (value.getValue() != null) 
@@ -80,7 +81,7 @@ public class JsonComposer extends JsonComposerBase {
     }    
   }    
 
-  private void composeCode(String name, Code value) throws Exception {
+  private void composeDateTime(String name, DateTime value) throws Exception {
     if (value != null && (!Utilities.noString(value.getXmlId()) || value.hasExtensions() || !Utilities.noString(value.getValue()))) {
       open(name);
       composeElement(value);
@@ -90,18 +91,17 @@ public class JsonComposer extends JsonComposerBase {
     }    
   }    
 
-  private void composeDate(String name, Date value) throws Exception {
-    if (value != null && (!Utilities.noString(value.getXmlId()) || value.hasExtensions() || !Utilities.noString(value.getValue()))) {
+  private void composeInteger(String name, Integer value) throws Exception {
+    if (value != null) {
       open(name);
       composeElement(value);
-      if (value.getValue() != null) 
-        prop("value", toString(value.getValue()));
+        prop("value", java.lang.Integer.valueOf(value.getValue()));
       close();
     }    
   }    
 
-  private void composeDecimal(String name, Decimal value) throws Exception {
-    if (value != null && (!Utilities.noString(value.getXmlId()) || value.hasExtensions() || value.getValue() != null)) {
+  private void composeOid(String name, Oid value) throws Exception {
+    if (value != null && (!Utilities.noString(value.getXmlId()) || value.hasExtensions() || !Utilities.noString(value.getValue()))) {
       open(name);
       composeElement(value);
       if (value.getValue() != null) 
@@ -110,8 +110,8 @@ public class JsonComposer extends JsonComposerBase {
     }    
   }    
 
-  private void composeUri(String name, Uri value) throws Exception {
-    if (value != null && (!Utilities.noString(value.getXmlId()) || value.hasExtensions() || value.getValue() != null)) {
+  private void composeString(String name, String_ value) throws Exception {
+    if (value != null && (!Utilities.noString(value.getXmlId()) || value.hasExtensions() || !Utilities.noString(value.getValue()))) {
       open(name);
       composeElement(value);
       if (value.getValue() != null) 
@@ -120,18 +120,17 @@ public class JsonComposer extends JsonComposerBase {
     }    
   }    
 
-  private void composeId(String name, Id value) throws Exception {
-    if (value != null && (!Utilities.noString(value.getXmlId()) || value.hasExtensions() || !Utilities.noString(value.getValue()))) {
+  private void composeBoolean(String name, Boolean value) throws Exception {
+    if (value != null) {
       open(name);
       composeElement(value);
-      if (value.getValue() != null) 
-        prop("value", toString(value.getValue()));
+        prop("value", value.getValue());
       close();
     }    
   }    
 
-  private void composeBase64Binary(String name, Base64Binary value) throws Exception {
-    if (value != null && (!Utilities.noString(value.getXmlId()) || value.hasExtensions() || value.getValue() != null)) {
+  private void composeUuid(String name, Uuid value) throws Exception {
+    if (value != null && (!Utilities.noString(value.getXmlId()) || value.hasExtensions() || !Utilities.noString(value.getValue()))) {
       open(name);
       composeElement(value);
       if (value.getValue() != null) 
@@ -140,7 +139,7 @@ public class JsonComposer extends JsonComposerBase {
     }    
   }    
 
-  private void composeOid(String name, Oid value) throws Exception {
+  private void composeCode(String name, Code value) throws Exception {
     if (value != null && (!Utilities.noString(value.getXmlId()) || value.hasExtensions() || !Utilities.noString(value.getValue()))) {
       open(name);
       composeElement(value);
@@ -150,7 +149,7 @@ public class JsonComposer extends JsonComposerBase {
     }    
   }    
 
-  private void composeString(String name, String_ value) throws Exception {
+  private void composeDate(String name, Date value) throws Exception {
     if (value != null && (!Utilities.noString(value.getXmlId()) || value.hasExtensions() || !Utilities.noString(value.getValue()))) {
       open(name);
       composeElement(value);
@@ -160,17 +159,18 @@ public class JsonComposer extends JsonComposerBase {
     }    
   }    
 
-  private void composeBoolean(String name, Boolean value) throws Exception {
-    if (value != null) {
+  private void composeUri(String name, Uri value) throws Exception {
+    if (value != null && (!Utilities.noString(value.getXmlId()) || value.hasExtensions() || value.getValue() != null)) {
       open(name);
       composeElement(value);
-        prop("value", value.getValue());
+      if (value.getValue() != null) 
+        prop("value", toString(value.getValue()));
       close();
     }    
   }    
 
-  private void composeUuid(String name, Uuid value) throws Exception {
-    if (value != null && (!Utilities.noString(value.getXmlId()) || value.hasExtensions() || !Utilities.noString(value.getValue()))) {
+  private void composeInstant(String name, Instant value) throws Exception {
+    if (value != null && (!Utilities.noString(value.getXmlId()) || value.hasExtensions() || value.getValue() != null)) {
       open(name);
       composeElement(value);
       if (value.getValue() != null) 
@@ -179,7 +179,7 @@ public class JsonComposer extends JsonComposerBase {
     }    
   }    
 
-  private void composeInstant(String name, Instant value) throws Exception {
+  private void composeDecimal(String name, Decimal value) throws Exception {
     if (value != null && (!Utilities.noString(value.getXmlId()) || value.hasExtensions() || value.getValue() != null)) {
       open(name);
       composeElement(value);
@@ -4189,22 +4189,14 @@ public class JsonComposer extends JsonComposerBase {
        composeAddress(prefix+"Address", (Address) type);
     else if (type instanceof HumanName)
        composeHumanName(prefix+"HumanName", (HumanName) type);
-    else if (type instanceof Integer)
-       composeInteger(prefix+"Integer", (Integer) type);
-    else if (type instanceof DateTime)
-       composeDateTime(prefix+"DateTime", (DateTime) type);
-    else if (type instanceof Code)
-       composeCode(prefix+"Code", (Code) type);
-    else if (type instanceof Date)
-       composeDate(prefix+"Date", (Date) type);
-    else if (type instanceof Decimal)
-       composeDecimal(prefix+"Decimal", (Decimal) type);
-    else if (type instanceof Uri)
-       composeUri(prefix+"Uri", (Uri) type);
     else if (type instanceof Id)
        composeId(prefix+"Id", (Id) type);
     else if (type instanceof Base64Binary)
        composeBase64Binary(prefix+"Base64Binary", (Base64Binary) type);
+    else if (type instanceof DateTime)
+       composeDateTime(prefix+"DateTime", (DateTime) type);
+    else if (type instanceof Integer)
+       composeInteger(prefix+"Integer", (Integer) type);
     else if (type instanceof Oid)
        composeOid(prefix+"Oid", (Oid) type);
     else if (type instanceof String_)
@@ -4213,8 +4205,16 @@ public class JsonComposer extends JsonComposerBase {
        composeBoolean(prefix+"Boolean", (Boolean) type);
     else if (type instanceof Uuid)
        composeUuid(prefix+"Uuid", (Uuid) type);
+    else if (type instanceof Code)
+       composeCode(prefix+"Code", (Code) type);
+    else if (type instanceof Date)
+       composeDate(prefix+"Date", (Date) type);
+    else if (type instanceof Uri)
+       composeUri(prefix+"Uri", (Uri) type);
     else if (type instanceof Instant)
        composeInstant(prefix+"Instant", (Instant) type);
+    else if (type instanceof Decimal)
+       composeDecimal(prefix+"Decimal", (Decimal) type);
     else
       throw new Exception("Unhanded type");
   }
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/formats/JsonComposerBase.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/formats/JsonComposerBase.java
index e33cc2e..df344eb 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/formats/JsonComposerBase.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/formats/JsonComposerBase.java
@@ -30,29 +30,23 @@ POSSIBILITY OF SUCH DAMAGE.
  */
 
 
-import java.io.FileOutputStream;
 import java.io.OutputStream;
 import java.io.OutputStreamWriter;
-import java.io.StringWriter;
-import java.io.Writer;
-import java.math.BigDecimal;
-import java.nio.file.OpenOption;
-import java.text.SimpleDateFormat;
-
-import org.apache.commons.codec.binary.Base64;
-import org.hl7.fhir.instance.model.*;
-import org.hl7.fhir.instance.model.Boolean;
-import org.hl7.fhir.instance.model.Integer;
+
+import org.hl7.fhir.instance.model.AtomEntry;
+import org.hl7.fhir.instance.model.AtomFeed;
+import org.hl7.fhir.instance.model.Binary;
+import org.hl7.fhir.instance.model.Resource;
 import org.hl7.fhir.utilities.Utilities;
-import org.hl7.fhir.utilities.xhtml.*;
-import org.hl7.fhir.utilities.xml.*;
+import org.hl7.fhir.utilities.xhtml.XhtmlComposer;
+import org.hl7.fhir.utilities.xhtml.XhtmlNode;
 
 
 public abstract class JsonComposerBase extends XmlBase implements Composer {
 
 	protected JsonWriter json;
 	private boolean htmlPretty;
-	private boolean jsonPretty;
+	//private boolean jsonPretty;
 
 	public void compose(OutputStream stream, Resource resource, boolean pretty) throws Exception {
 		OutputStreamWriter osw = new OutputStreamWriter(stream, "UTF-8");
@@ -132,7 +126,7 @@ public abstract class JsonComposerBase extends XmlBase implements Composer {
 
 		if (feed.getEntryList().size() > 0) {
 			openArray("entry");
-			for (AtomEntry e : feed.getEntryList())
+			for (AtomEntry<? extends Resource> e : feed.getEntryList())
 				composeEntry(e);
 			closeArray();
 		}
@@ -140,7 +134,7 @@ public abstract class JsonComposerBase extends XmlBase implements Composer {
 
   // standard order for round-tripping examples succesfully:
   // title, id, links, updated, published, authors 
-	private void composeEntry(AtomEntry e) throws Exception {
+	private <T extends Resource> void composeEntry(AtomEntry<T> e) throws Exception {
 		json.object();
 		prop("title", e.getTitle());
 		prop("id", e.getId());
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/formats/JsonParser.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/formats/JsonParser.java
index 4b11510..dee5790 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/formats/JsonParser.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/formats/JsonParser.java
@@ -29,21 +29,21 @@ package org.hl7.fhir.instance.formats;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
-import org.hl7.fhir.instance.model.Integer;
-import org.hl7.fhir.instance.model.DateTime;
-import org.hl7.fhir.instance.model.Code;
-import org.hl7.fhir.instance.model.Date;
-import org.hl7.fhir.instance.model.Decimal;
-import org.hl7.fhir.instance.model.Uri;
 import org.hl7.fhir.instance.model.Id;
 import org.hl7.fhir.instance.model.Base64Binary;
+import org.hl7.fhir.instance.model.DateTime;
+import org.hl7.fhir.instance.model.Integer;
 import org.hl7.fhir.instance.model.Oid;
 import org.hl7.fhir.instance.model.String_;
 import org.hl7.fhir.instance.model.Boolean;
 import org.hl7.fhir.instance.model.Uuid;
+import org.hl7.fhir.instance.model.Code;
+import org.hl7.fhir.instance.model.Date;
+import org.hl7.fhir.instance.model.Uri;
 import org.hl7.fhir.instance.model.Instant;
+import org.hl7.fhir.instance.model.Decimal;
 import org.hl7.fhir.instance.model.*;
 import org.json.JSONObject;
 import org.json.JSONArray;
@@ -73,107 +73,107 @@ public class JsonParser extends JsonParserBase {
     return res;
   }
 
-  private Integer parseInteger(JSONObject json) throws Exception {
-    Integer res = new Integer();
+  private Id parseId(JSONObject json) throws Exception {
+    Id res = new Id();
     parseElementProperties(json, res);
     if (json.has("value"))
-      res.setValue(parseIntegerPrimitive(json.getString("value")));
+      res.setValue(parseIdPrimitive(json.getString("value")));
     return res;
   }
 
-  private DateTime parseDateTime(JSONObject json) throws Exception {
-    DateTime res = new DateTime();
+  private Base64Binary parseBase64Binary(JSONObject json) throws Exception {
+    Base64Binary res = new Base64Binary();
     parseElementProperties(json, res);
     if (json.has("value"))
-      res.setValue(parseDateTimePrimitive(json.getString("value")));
+      res.setValue(parseBase64BinaryPrimitive(json.getString("value")));
     return res;
   }
 
-  private Code parseCode(JSONObject json) throws Exception {
-    Code res = new Code();
+  private DateTime parseDateTime(JSONObject json) throws Exception {
+    DateTime res = new DateTime();
     parseElementProperties(json, res);
     if (json.has("value"))
-      res.setValue(parseCodePrimitive(json.getString("value")));
+      res.setValue(parseDateTimePrimitive(json.getString("value")));
     return res;
   }
 
-  private Date parseDate(JSONObject json) throws Exception {
-    Date res = new Date();
+  private Integer parseInteger(JSONObject json) throws Exception {
+    Integer res = new Integer();
     parseElementProperties(json, res);
     if (json.has("value"))
-      res.setValue(parseDatePrimitive(json.getString("value")));
+      res.setValue(parseIntegerPrimitive(json.getString("value")));
     return res;
   }
 
-  private Decimal parseDecimal(JSONObject json) throws Exception {
-    Decimal res = new Decimal();
+  private Oid parseOid(JSONObject json) throws Exception {
+    Oid res = new Oid();
     parseElementProperties(json, res);
     if (json.has("value"))
-      res.setValue(parseDecimalPrimitive(json.getString("value")));
+      res.setValue(parseOidPrimitive(json.getString("value")));
     return res;
   }
 
-  private Uri parseUri(JSONObject json) throws Exception {
-    Uri res = new Uri();
+  private String_ parseString(JSONObject json) throws Exception {
+    String_ res = new String_();
     parseElementProperties(json, res);
     if (json.has("value"))
-      res.setValue(parseUriPrimitive(json.getString("value")));
+      res.setValue(parseStringPrimitive(json.getString("value")));
     return res;
   }
 
-  private Id parseId(JSONObject json) throws Exception {
-    Id res = new Id();
+  private Boolean parseBoolean(JSONObject json) throws Exception {
+    Boolean res = new Boolean();
     parseElementProperties(json, res);
     if (json.has("value"))
-      res.setValue(parseIdPrimitive(json.getString("value")));
+      res.setValue(json.getBoolean("value"));
     return res;
   }
 
-  private Base64Binary parseBase64Binary(JSONObject json) throws Exception {
-    Base64Binary res = new Base64Binary();
+  private Uuid parseUuid(JSONObject json) throws Exception {
+    Uuid res = new Uuid();
     parseElementProperties(json, res);
     if (json.has("value"))
-      res.setValue(parseBase64BinaryPrimitive(json.getString("value")));
+      res.setValue(parseUuidPrimitive(json.getString("value")));
     return res;
   }
 
-  private Oid parseOid(JSONObject json) throws Exception {
-    Oid res = new Oid();
+  private Code parseCode(JSONObject json) throws Exception {
+    Code res = new Code();
     parseElementProperties(json, res);
     if (json.has("value"))
-      res.setValue(parseOidPrimitive(json.getString("value")));
+      res.setValue(parseCodePrimitive(json.getString("value")));
     return res;
   }
 
-  private String_ parseString(JSONObject json) throws Exception {
-    String_ res = new String_();
+  private Date parseDate(JSONObject json) throws Exception {
+    Date res = new Date();
     parseElementProperties(json, res);
     if (json.has("value"))
-      res.setValue(parseStringPrimitive(json.getString("value")));
+      res.setValue(parseDatePrimitive(json.getString("value")));
     return res;
   }
 
-  private Boolean parseBoolean(JSONObject json) throws Exception {
-    Boolean res = new Boolean();
+  private Uri parseUri(JSONObject json) throws Exception {
+    Uri res = new Uri();
     parseElementProperties(json, res);
     if (json.has("value"))
-      res.setValue(json.getBoolean("value"));
+      res.setValue(parseUriPrimitive(json.getString("value")));
     return res;
   }
 
-  private Uuid parseUuid(JSONObject json) throws Exception {
-    Uuid res = new Uuid();
+  private Instant parseInstant(JSONObject json) throws Exception {
+    Instant res = new Instant();
     parseElementProperties(json, res);
     if (json.has("value"))
-      res.setValue(parseUuidPrimitive(json.getString("value")));
+      res.setValue(parseInstantPrimitive(json.getString("value")));
     return res;
   }
 
-  private Instant parseInstant(JSONObject json) throws Exception {
-    Instant res = new Instant();
+  private Decimal parseDecimal(JSONObject json) throws Exception {
+    Decimal res = new Decimal();
     parseElementProperties(json, res);
     if (json.has("value"))
-      res.setValue(parseInstantPrimitive(json.getString("value")));
+      res.setValue(parseDecimalPrimitive(json.getString("value")));
     return res;
   }
 
@@ -4506,22 +4506,14 @@ public class JsonParser extends JsonParserBase {
       return parseAddress(json.getJSONObject(prefix+"Address"));
     else if (json.has(prefix+"HumanName"))
       return parseHumanName(json.getJSONObject(prefix+"HumanName"));
-    else if (json.has(prefix+"Integer"))
-      return parseInteger(json.getJSONObject(prefix+"Integer"));
-    else if (json.has(prefix+"DateTime"))
-      return parseDateTime(json.getJSONObject(prefix+"DateTime"));
-    else if (json.has(prefix+"Code"))
-      return parseCode(json.getJSONObject(prefix+"Code"));
-    else if (json.has(prefix+"Date"))
-      return parseDate(json.getJSONObject(prefix+"Date"));
-    else if (json.has(prefix+"Decimal"))
-      return parseDecimal(json.getJSONObject(prefix+"Decimal"));
-    else if (json.has(prefix+"Uri"))
-      return parseUri(json.getJSONObject(prefix+"Uri"));
     else if (json.has(prefix+"Id"))
       return parseId(json.getJSONObject(prefix+"Id"));
     else if (json.has(prefix+"Base64Binary"))
       return parseBase64Binary(json.getJSONObject(prefix+"Base64Binary"));
+    else if (json.has(prefix+"DateTime"))
+      return parseDateTime(json.getJSONObject(prefix+"DateTime"));
+    else if (json.has(prefix+"Integer"))
+      return parseInteger(json.getJSONObject(prefix+"Integer"));
     else if (json.has(prefix+"Oid"))
       return parseOid(json.getJSONObject(prefix+"Oid"));
     else if (json.has(prefix+"String"))
@@ -4530,8 +4522,16 @@ public class JsonParser extends JsonParserBase {
       return parseBoolean(json.getJSONObject(prefix+"Boolean"));
     else if (json.has(prefix+"Uuid"))
       return parseUuid(json.getJSONObject(prefix+"Uuid"));
+    else if (json.has(prefix+"Code"))
+      return parseCode(json.getJSONObject(prefix+"Code"));
+    else if (json.has(prefix+"Date"))
+      return parseDate(json.getJSONObject(prefix+"Date"));
+    else if (json.has(prefix+"Uri"))
+      return parseUri(json.getJSONObject(prefix+"Uri"));
     else if (json.has(prefix+"Instant"))
       return parseInstant(json.getJSONObject(prefix+"Instant"));
+    else if (json.has(prefix+"Decimal"))
+      return parseDecimal(json.getJSONObject(prefix+"Decimal"));
     return null;
   }
 
@@ -4674,22 +4674,14 @@ public class JsonParser extends JsonParserBase {
       return true;
     if (json.has(prefix+"ValueSet"))
       return true;
-    if (json.has(prefix+"Integer"))
-      return true;
-    if (json.has(prefix+"DateTime"))
-      return true;
-    if (json.has(prefix+"Code"))
-      return true;
-    if (json.has(prefix+"Date"))
-      return true;
-    if (json.has(prefix+"Decimal"))
-      return true;
-    if (json.has(prefix+"Uri"))
-      return true;
     if (json.has(prefix+"Id"))
       return true;
     if (json.has(prefix+"Base64Binary"))
       return true;
+    if (json.has(prefix+"DateTime"))
+      return true;
+    if (json.has(prefix+"Integer"))
+      return true;
     if (json.has(prefix+"Oid"))
       return true;
     if (json.has(prefix+"String"))
@@ -4698,8 +4690,16 @@ public class JsonParser extends JsonParserBase {
       return true;
     if (json.has(prefix+"Uuid"))
       return true;
+    if (json.has(prefix+"Code"))
+      return true;
+    if (json.has(prefix+"Date"))
+      return true;
+    if (json.has(prefix+"Uri"))
+      return true;
     if (json.has(prefix+"Instant"))
       return true;
+    if (json.has(prefix+"Decimal"))
+      return true;
     return false;
   }
 }
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/formats/JsonParserBase.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/formats/JsonParserBase.java
index 23cc6c4..004091b 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/formats/JsonParserBase.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/formats/JsonParserBase.java
@@ -29,24 +29,20 @@ POSSIBILITY OF SUCH DAMAGE.
 */
 
 import java.io.InputStream;
-import java.math.BigDecimal;
-import java.net.URI;
-import java.util.Calendar;
-import java.util.HashMap;
-import java.util.List;
 import java.util.Map;
 
 import org.apache.commons.codec.binary.Base64;
-import org.hl7.fhir.instance.model.*;
-import org.hl7.fhir.instance.model.Boolean;
-import org.hl7.fhir.instance.model.Integer;
+import org.hl7.fhir.instance.model.AtomEntry;
+import org.hl7.fhir.instance.model.AtomFeed;
+import org.hl7.fhir.instance.model.Binary;
+import org.hl7.fhir.instance.model.Element;
+import org.hl7.fhir.instance.model.Resource;
 import org.hl7.fhir.utilities.TextFile;
 import org.hl7.fhir.utilities.Utilities;
 import org.hl7.fhir.utilities.xhtml.XhtmlNode;
 import org.hl7.fhir.utilities.xhtml.XhtmlParser;
 import org.json.JSONArray;
 import org.json.JSONObject;
-import org.xmlpull.v1.XmlPullParser;
 
 public abstract class JsonParserBase extends ParserBase implements Parser {
 
@@ -137,8 +133,8 @@ public abstract class JsonParserBase extends ParserBase implements Parser {
     links.put(json.getString("rel"), json.getString("href"));    
   }
 
-  private AtomEntry parseEntry(JSONObject json) throws Exception {
-    AtomEntry res = new AtomEntry();
+  private <T extends Resource> AtomEntry<T> parseEntry(JSONObject json) throws Exception {
+    AtomEntry<T> res = new AtomEntry<T>();
     if (json.has("title"))
       res.setTitle(json.getString("title"));
     if (json.has("id"))
@@ -168,7 +164,7 @@ public abstract class JsonParserBase extends ParserBase implements Parser {
     if (json.has("summary"))
       res.setSummary(new XhtmlParser().parse(json.getString("summary"), "div").getChildNodes().get(0));
     if (json.has("content"))
-      res.setResource(new JsonParser().parse(json.getJSONObject("content")));
+      res.setResource((T)new JsonParser().parse(json.getJSONObject("content")));//TODO Architecture needs to be refactor to prevent this unsafe cast and better support generics
     return res;
   }
   
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/formats/ParserBase.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/formats/ParserBase.java
index aa7ab5d..745089e 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/formats/ParserBase.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/formats/ParserBase.java
@@ -1,7 +1,6 @@
 package org.hl7.fhir.instance.formats;
 
 import java.math.BigDecimal;
-import java.net.URI;
 import java.util.Calendar;
 import java.util.HashMap;
 import java.util.Map;
@@ -10,7 +9,6 @@ import org.apache.commons.codec.binary.Base64;
 import org.hl7.fhir.instance.model.AtomFeed;
 import org.hl7.fhir.instance.model.Resource;
 import org.hl7.fhir.utilities.Utilities;
-import org.xmlpull.v1.XmlPullParser;
 
 public abstract class ParserBase extends XmlBase {
 
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/formats/XmlBase.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/formats/XmlBase.java
index 1ececca..a33d34d 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/formats/XmlBase.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/formats/XmlBase.java
@@ -34,7 +34,6 @@ import java.io.InputStream;
 import java.math.BigDecimal;
 import java.net.URI;
 import java.text.ParseException;
-import java.text.SimpleDateFormat;
 import java.util.Calendar;
 
 import org.apache.commons.codec.binary.Base64;
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/formats/XmlComposer.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/formats/XmlComposer.java
index 5db48a5..3fecb68 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/formats/XmlComposer.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/formats/XmlComposer.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.formats;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 import org.hl7.fhir.instance.model.*;
 import org.hl7.fhir.instance.model.Integer;
@@ -58,9 +58,10 @@ public class XmlComposer extends XmlComposerBase {
     }    
   }    
 
-  private void composeInteger(String name, Integer value) throws Exception {
-    if (value != null) {
+  private void composeId(String name, Id value) throws Exception {
+    if (value != null && (!Utilities.noString(value.getXmlId()) || value.hasExtensions() || !Utilities.noString(value.getValue()))) {
       composeElementAttributes(value);
+      if (value.getValue() != null) 
         xml.attribute("value", toString(value.getValue()));
         
       xml.open(FHIR_NS, name);
@@ -69,8 +70,8 @@ public class XmlComposer extends XmlComposerBase {
     }    
   }    
 
-  private void composeDateTime(String name, DateTime value) throws Exception {
-    if (value != null && (!Utilities.noString(value.getXmlId()) || value.hasExtensions() || !Utilities.noString(value.getValue()))) {
+  private void composeBase64Binary(String name, Base64Binary value) throws Exception {
+    if (value != null && (!Utilities.noString(value.getXmlId()) || value.hasExtensions() || value.getValue() != null)) {
       composeElementAttributes(value);
       if (value.getValue() != null) 
         xml.attribute("value", toString(value.getValue()));
@@ -81,7 +82,7 @@ public class XmlComposer extends XmlComposerBase {
     }    
   }    
 
-  private void composeCode(String name, Code value) throws Exception {
+  private void composeDateTime(String name, DateTime value) throws Exception {
     if (value != null && (!Utilities.noString(value.getXmlId()) || value.hasExtensions() || !Utilities.noString(value.getValue()))) {
       composeElementAttributes(value);
       if (value.getValue() != null) 
@@ -93,10 +94,9 @@ public class XmlComposer extends XmlComposerBase {
     }    
   }    
 
-  private void composeDate(String name, Date value) throws Exception {
-    if (value != null && (!Utilities.noString(value.getXmlId()) || value.hasExtensions() || !Utilities.noString(value.getValue()))) {
+  private void composeInteger(String name, Integer value) throws Exception {
+    if (value != null) {
       composeElementAttributes(value);
-      if (value.getValue() != null) 
         xml.attribute("value", toString(value.getValue()));
         
       xml.open(FHIR_NS, name);
@@ -105,8 +105,8 @@ public class XmlComposer extends XmlComposerBase {
     }    
   }    
 
-  private void composeDecimal(String name, Decimal value) throws Exception {
-    if (value != null && (!Utilities.noString(value.getXmlId()) || value.hasExtensions() || value.getValue() != null)) {
+  private void composeOid(String name, Oid value) throws Exception {
+    if (value != null && (!Utilities.noString(value.getXmlId()) || value.hasExtensions() || !Utilities.noString(value.getValue()))) {
       composeElementAttributes(value);
       if (value.getValue() != null) 
         xml.attribute("value", toString(value.getValue()));
@@ -117,8 +117,8 @@ public class XmlComposer extends XmlComposerBase {
     }    
   }    
 
-  private void composeUri(String name, Uri value) throws Exception {
-    if (value != null && (!Utilities.noString(value.getXmlId()) || value.hasExtensions() || value.getValue() != null)) {
+  private void composeString(String name, String_ value) throws Exception {
+    if (value != null && (!Utilities.noString(value.getXmlId()) || value.hasExtensions() || !Utilities.noString(value.getValue()))) {
       composeElementAttributes(value);
       if (value.getValue() != null) 
         xml.attribute("value", toString(value.getValue()));
@@ -129,10 +129,9 @@ public class XmlComposer extends XmlComposerBase {
     }    
   }    
 
-  private void composeId(String name, Id value) throws Exception {
-    if (value != null && (!Utilities.noString(value.getXmlId()) || value.hasExtensions() || !Utilities.noString(value.getValue()))) {
+  private void composeBoolean(String name, Boolean value) throws Exception {
+    if (value != null) {
       composeElementAttributes(value);
-      if (value.getValue() != null) 
         xml.attribute("value", toString(value.getValue()));
         
       xml.open(FHIR_NS, name);
@@ -141,8 +140,8 @@ public class XmlComposer extends XmlComposerBase {
     }    
   }    
 
-  private void composeBase64Binary(String name, Base64Binary value) throws Exception {
-    if (value != null && (!Utilities.noString(value.getXmlId()) || value.hasExtensions() || value.getValue() != null)) {
+  private void composeUuid(String name, Uuid value) throws Exception {
+    if (value != null && (!Utilities.noString(value.getXmlId()) || value.hasExtensions() || !Utilities.noString(value.getValue()))) {
       composeElementAttributes(value);
       if (value.getValue() != null) 
         xml.attribute("value", toString(value.getValue()));
@@ -153,7 +152,7 @@ public class XmlComposer extends XmlComposerBase {
     }    
   }    
 
-  private void composeOid(String name, Oid value) throws Exception {
+  private void composeCode(String name, Code value) throws Exception {
     if (value != null && (!Utilities.noString(value.getXmlId()) || value.hasExtensions() || !Utilities.noString(value.getValue()))) {
       composeElementAttributes(value);
       if (value.getValue() != null) 
@@ -165,7 +164,7 @@ public class XmlComposer extends XmlComposerBase {
     }    
   }    
 
-  private void composeString(String name, String_ value) throws Exception {
+  private void composeDate(String name, Date value) throws Exception {
     if (value != null && (!Utilities.noString(value.getXmlId()) || value.hasExtensions() || !Utilities.noString(value.getValue()))) {
       composeElementAttributes(value);
       if (value.getValue() != null) 
@@ -177,9 +176,10 @@ public class XmlComposer extends XmlComposerBase {
     }    
   }    
 
-  private void composeBoolean(String name, Boolean value) throws Exception {
-    if (value != null) {
+  private void composeUri(String name, Uri value) throws Exception {
+    if (value != null && (!Utilities.noString(value.getXmlId()) || value.hasExtensions() || value.getValue() != null)) {
       composeElementAttributes(value);
+      if (value.getValue() != null) 
         xml.attribute("value", toString(value.getValue()));
         
       xml.open(FHIR_NS, name);
@@ -188,8 +188,8 @@ public class XmlComposer extends XmlComposerBase {
     }    
   }    
 
-  private void composeUuid(String name, Uuid value) throws Exception {
-    if (value != null && (!Utilities.noString(value.getXmlId()) || value.hasExtensions() || !Utilities.noString(value.getValue()))) {
+  private void composeInstant(String name, Instant value) throws Exception {
+    if (value != null && (!Utilities.noString(value.getXmlId()) || value.hasExtensions() || value.getValue() != null)) {
       composeElementAttributes(value);
       if (value.getValue() != null) 
         xml.attribute("value", toString(value.getValue()));
@@ -200,7 +200,7 @@ public class XmlComposer extends XmlComposerBase {
     }    
   }    
 
-  private void composeInstant(String name, Instant value) throws Exception {
+  private void composeDecimal(String name, Decimal value) throws Exception {
     if (value != null && (!Utilities.noString(value.getXmlId()) || value.hasExtensions() || value.getValue() != null)) {
       composeElementAttributes(value);
       if (value.getValue() != null) 
@@ -3438,22 +3438,14 @@ public class XmlComposer extends XmlComposerBase {
        composeAddress(prefix+"Address", (Address) type);
     else if (type instanceof HumanName)
        composeHumanName(prefix+"HumanName", (HumanName) type);
-    else if (type instanceof Integer)
-       composeInteger(prefix+"Integer", (Integer) type);
-    else if (type instanceof DateTime)
-       composeDateTime(prefix+"DateTime", (DateTime) type);
-    else if (type instanceof Code)
-       composeCode(prefix+"Code", (Code) type);
-    else if (type instanceof Date)
-       composeDate(prefix+"Date", (Date) type);
-    else if (type instanceof Decimal)
-       composeDecimal(prefix+"Decimal", (Decimal) type);
-    else if (type instanceof Uri)
-       composeUri(prefix+"Uri", (Uri) type);
     else if (type instanceof Id)
        composeId(prefix+"Id", (Id) type);
     else if (type instanceof Base64Binary)
        composeBase64Binary(prefix+"Base64Binary", (Base64Binary) type);
+    else if (type instanceof DateTime)
+       composeDateTime(prefix+"DateTime", (DateTime) type);
+    else if (type instanceof Integer)
+       composeInteger(prefix+"Integer", (Integer) type);
     else if (type instanceof Oid)
        composeOid(prefix+"Oid", (Oid) type);
     else if (type instanceof String_)
@@ -3462,8 +3454,16 @@ public class XmlComposer extends XmlComposerBase {
        composeBoolean(prefix+"Boolean", (Boolean) type);
     else if (type instanceof Uuid)
        composeUuid(prefix+"Uuid", (Uuid) type);
+    else if (type instanceof Code)
+       composeCode(prefix+"Code", (Code) type);
+    else if (type instanceof Date)
+       composeDate(prefix+"Date", (Date) type);
+    else if (type instanceof Uri)
+       composeUri(prefix+"Uri", (Uri) type);
     else if (type instanceof Instant)
        composeInstant(prefix+"Instant", (Instant) type);
+    else if (type instanceof Decimal)
+       composeDecimal(prefix+"Decimal", (Decimal) type);
     else
       throw new Exception("Unhanded type");
   }
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/formats/XmlComposerBase.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/formats/XmlComposerBase.java
index 3abeebd..404e33e 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/formats/XmlComposerBase.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/formats/XmlComposerBase.java
@@ -30,21 +30,19 @@ POSSIBILITY OF SUCH DAMAGE.
  */
 
 
-import java.io.IOException;
 import java.io.OutputStream;
-import java.math.BigDecimal;
-import java.net.URI;
-import java.text.SimpleDateFormat;
-import java.util.Calendar;
-
-import org.apache.commons.codec.binary.Base64;
-import org.hl7.fhir.instance.model.*;
-import org.hl7.fhir.instance.model.Boolean;
-import org.hl7.fhir.instance.model.Integer;
-import org.hl7.fhir.instance.model.CarePlan.CarePlanStatusEnumFactory;
+
+import org.hl7.fhir.instance.model.AtomEntry;
+import org.hl7.fhir.instance.model.AtomFeed;
+import org.hl7.fhir.instance.model.Binary;
+import org.hl7.fhir.instance.model.Element;
+import org.hl7.fhir.instance.model.Resource;
+import org.hl7.fhir.instance.model.Type;
 import org.hl7.fhir.utilities.Utilities;
-import org.hl7.fhir.utilities.xhtml.*;
-import org.hl7.fhir.utilities.xml.*;
+import org.hl7.fhir.utilities.xhtml.XhtmlComposer;
+import org.hl7.fhir.utilities.xhtml.XhtmlNode;
+import org.hl7.fhir.utilities.xml.IXMLWriter;
+import org.hl7.fhir.utilities.xml.XMLWriter;
 
 public abstract class XmlComposerBase extends XmlBase implements Composer {
 
@@ -114,15 +112,15 @@ public abstract class XmlComposerBase extends XmlBase implements Composer {
         xml.element(ATOM_NS, "uri", feed.getAuthorUri());
       xml.close(ATOM_NS, "author");
     }
-    for (AtomEntry e : feed.getEntryList())
+    for (AtomEntry<? extends Resource> e : feed.getEntryList())
       composeEntry(e);
     xml.close(ATOM_NS, "feed");
 
   
 	}
 	
-	private void composeEntry(AtomEntry entry) throws Exception {
-		AtomEntry e = entry;
+	private <T extends Resource>void composeEntry(AtomEntry<T> entry) throws Exception {
+		AtomEntry<T> e = entry;
 	  if (entry.isDeleted()) {
 	    xml.setDefaultNamespace("http://purl.org/atompub/tombstones/1.0");
 	    xml.attribute("ref", entry.getId());
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/formats/XmlParser.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/formats/XmlParser.java
index 1207c56..01fbd35 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/formats/XmlParser.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/formats/XmlParser.java
@@ -29,21 +29,21 @@ package org.hl7.fhir.instance.formats;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
-import org.hl7.fhir.instance.model.Integer;
-import org.hl7.fhir.instance.model.DateTime;
-import org.hl7.fhir.instance.model.Code;
-import org.hl7.fhir.instance.model.Date;
-import org.hl7.fhir.instance.model.Decimal;
-import org.hl7.fhir.instance.model.Uri;
 import org.hl7.fhir.instance.model.Id;
 import org.hl7.fhir.instance.model.Base64Binary;
+import org.hl7.fhir.instance.model.DateTime;
+import org.hl7.fhir.instance.model.Integer;
 import org.hl7.fhir.instance.model.Oid;
 import org.hl7.fhir.instance.model.String_;
 import org.hl7.fhir.instance.model.Boolean;
 import org.hl7.fhir.instance.model.Uuid;
+import org.hl7.fhir.instance.model.Code;
+import org.hl7.fhir.instance.model.Date;
+import org.hl7.fhir.instance.model.Uri;
 import org.hl7.fhir.instance.model.Instant;
+import org.hl7.fhir.instance.model.Decimal;
 import org.hl7.fhir.instance.model.*;
 import org.xmlpull.v1.*;
 
@@ -83,10 +83,10 @@ public class XmlParser extends XmlParserBase {
     return res;
   }
 
-  private Integer parseInteger(XmlPullParser xpp) throws Exception {
-    Integer res = new Integer();
+  private Id parseId(XmlPullParser xpp) throws Exception {
+    Id res = new Id();
     parseElementAttributes(xpp, res);
-    res.setValue(parseIntegerPrimitive(xpp.getAttributeValue(null, "value")));
+    res.setValue(parseIdPrimitive(xpp.getAttributeValue(null, "value")));
     xpp.next();
     int eventType = nextNoWhitespace(xpp);
     while (eventType != XmlPullParser.END_TAG) {
@@ -98,10 +98,10 @@ public class XmlParser extends XmlParserBase {
     return res;
   }
 
-  private DateTime parseDateTime(XmlPullParser xpp) throws Exception {
-    DateTime res = new DateTime();
+  private Base64Binary parseBase64Binary(XmlPullParser xpp) throws Exception {
+    Base64Binary res = new Base64Binary();
     parseElementAttributes(xpp, res);
-    res.setValue(parseDateTimePrimitive(xpp.getAttributeValue(null, "value")));
+    res.setValue(parseBase64BinaryPrimitive(xpp.getAttributeValue(null, "value")));
     xpp.next();
     int eventType = nextNoWhitespace(xpp);
     while (eventType != XmlPullParser.END_TAG) {
@@ -113,10 +113,10 @@ public class XmlParser extends XmlParserBase {
     return res;
   }
 
-  private Code parseCode(XmlPullParser xpp) throws Exception {
-    Code res = new Code();
+  private DateTime parseDateTime(XmlPullParser xpp) throws Exception {
+    DateTime res = new DateTime();
     parseElementAttributes(xpp, res);
-    res.setValue(parseCodePrimitive(xpp.getAttributeValue(null, "value")));
+    res.setValue(parseDateTimePrimitive(xpp.getAttributeValue(null, "value")));
     xpp.next();
     int eventType = nextNoWhitespace(xpp);
     while (eventType != XmlPullParser.END_TAG) {
@@ -128,10 +128,10 @@ public class XmlParser extends XmlParserBase {
     return res;
   }
 
-  private Date parseDate(XmlPullParser xpp) throws Exception {
-    Date res = new Date();
+  private Integer parseInteger(XmlPullParser xpp) throws Exception {
+    Integer res = new Integer();
     parseElementAttributes(xpp, res);
-    res.setValue(parseDatePrimitive(xpp.getAttributeValue(null, "value")));
+    res.setValue(parseIntegerPrimitive(xpp.getAttributeValue(null, "value")));
     xpp.next();
     int eventType = nextNoWhitespace(xpp);
     while (eventType != XmlPullParser.END_TAG) {
@@ -143,10 +143,10 @@ public class XmlParser extends XmlParserBase {
     return res;
   }
 
-  private Decimal parseDecimal(XmlPullParser xpp) throws Exception {
-    Decimal res = new Decimal();
+  private Oid parseOid(XmlPullParser xpp) throws Exception {
+    Oid res = new Oid();
     parseElementAttributes(xpp, res);
-    res.setValue(parseDecimalPrimitive(xpp.getAttributeValue(null, "value")));
+    res.setValue(parseOidPrimitive(xpp.getAttributeValue(null, "value")));
     xpp.next();
     int eventType = nextNoWhitespace(xpp);
     while (eventType != XmlPullParser.END_TAG) {
@@ -158,10 +158,10 @@ public class XmlParser extends XmlParserBase {
     return res;
   }
 
-  private Uri parseUri(XmlPullParser xpp) throws Exception {
-    Uri res = new Uri();
+  private String_ parseString(XmlPullParser xpp) throws Exception {
+    String_ res = new String_();
     parseElementAttributes(xpp, res);
-    res.setValue(parseUriPrimitive(xpp.getAttributeValue(null, "value")));
+    res.setValue(parseStringPrimitive(xpp.getAttributeValue(null, "value")));
     xpp.next();
     int eventType = nextNoWhitespace(xpp);
     while (eventType != XmlPullParser.END_TAG) {
@@ -173,10 +173,10 @@ public class XmlParser extends XmlParserBase {
     return res;
   }
 
-  private Id parseId(XmlPullParser xpp) throws Exception {
-    Id res = new Id();
+  private Boolean parseBoolean(XmlPullParser xpp) throws Exception {
+    Boolean res = new Boolean();
     parseElementAttributes(xpp, res);
-    res.setValue(parseIdPrimitive(xpp.getAttributeValue(null, "value")));
+    res.setValue(parseBooleanPrimitive(xpp.getAttributeValue(null, "value")));
     xpp.next();
     int eventType = nextNoWhitespace(xpp);
     while (eventType != XmlPullParser.END_TAG) {
@@ -188,10 +188,10 @@ public class XmlParser extends XmlParserBase {
     return res;
   }
 
-  private Base64Binary parseBase64Binary(XmlPullParser xpp) throws Exception {
-    Base64Binary res = new Base64Binary();
+  private Uuid parseUuid(XmlPullParser xpp) throws Exception {
+    Uuid res = new Uuid();
     parseElementAttributes(xpp, res);
-    res.setValue(parseBase64BinaryPrimitive(xpp.getAttributeValue(null, "value")));
+    res.setValue(parseUuidPrimitive(xpp.getAttributeValue(null, "value")));
     xpp.next();
     int eventType = nextNoWhitespace(xpp);
     while (eventType != XmlPullParser.END_TAG) {
@@ -203,10 +203,10 @@ public class XmlParser extends XmlParserBase {
     return res;
   }
 
-  private Oid parseOid(XmlPullParser xpp) throws Exception {
-    Oid res = new Oid();
+  private Code parseCode(XmlPullParser xpp) throws Exception {
+    Code res = new Code();
     parseElementAttributes(xpp, res);
-    res.setValue(parseOidPrimitive(xpp.getAttributeValue(null, "value")));
+    res.setValue(parseCodePrimitive(xpp.getAttributeValue(null, "value")));
     xpp.next();
     int eventType = nextNoWhitespace(xpp);
     while (eventType != XmlPullParser.END_TAG) {
@@ -218,10 +218,10 @@ public class XmlParser extends XmlParserBase {
     return res;
   }
 
-  private String_ parseString(XmlPullParser xpp) throws Exception {
-    String_ res = new String_();
+  private Date parseDate(XmlPullParser xpp) throws Exception {
+    Date res = new Date();
     parseElementAttributes(xpp, res);
-    res.setValue(parseStringPrimitive(xpp.getAttributeValue(null, "value")));
+    res.setValue(parseDatePrimitive(xpp.getAttributeValue(null, "value")));
     xpp.next();
     int eventType = nextNoWhitespace(xpp);
     while (eventType != XmlPullParser.END_TAG) {
@@ -233,10 +233,10 @@ public class XmlParser extends XmlParserBase {
     return res;
   }
 
-  private Boolean parseBoolean(XmlPullParser xpp) throws Exception {
-    Boolean res = new Boolean();
+  private Uri parseUri(XmlPullParser xpp) throws Exception {
+    Uri res = new Uri();
     parseElementAttributes(xpp, res);
-    res.setValue(parseBooleanPrimitive(xpp.getAttributeValue(null, "value")));
+    res.setValue(parseUriPrimitive(xpp.getAttributeValue(null, "value")));
     xpp.next();
     int eventType = nextNoWhitespace(xpp);
     while (eventType != XmlPullParser.END_TAG) {
@@ -248,10 +248,10 @@ public class XmlParser extends XmlParserBase {
     return res;
   }
 
-  private Uuid parseUuid(XmlPullParser xpp) throws Exception {
-    Uuid res = new Uuid();
+  private Instant parseInstant(XmlPullParser xpp) throws Exception {
+    Instant res = new Instant();
     parseElementAttributes(xpp, res);
-    res.setValue(parseUuidPrimitive(xpp.getAttributeValue(null, "value")));
+    res.setValue(parseInstantPrimitive(xpp.getAttributeValue(null, "value")));
     xpp.next();
     int eventType = nextNoWhitespace(xpp);
     while (eventType != XmlPullParser.END_TAG) {
@@ -263,10 +263,10 @@ public class XmlParser extends XmlParserBase {
     return res;
   }
 
-  private Instant parseInstant(XmlPullParser xpp) throws Exception {
-    Instant res = new Instant();
+  private Decimal parseDecimal(XmlPullParser xpp) throws Exception {
+    Decimal res = new Decimal();
     parseElementAttributes(xpp, res);
-    res.setValue(parseInstantPrimitive(xpp.getAttributeValue(null, "value")));
+    res.setValue(parseDecimalPrimitive(xpp.getAttributeValue(null, "value")));
     xpp.next();
     int eventType = nextNoWhitespace(xpp);
     while (eventType != XmlPullParser.END_TAG) {
@@ -5228,22 +5228,14 @@ public class XmlParser extends XmlParserBase {
       return parseAddress(xpp);
     else if (xpp.getName().equals(prefix+"HumanName"))
       return parseHumanName(xpp);
-    else if (xpp.getName().equals(prefix+"Integer"))
-      return parseInteger(xpp);
-    else if (xpp.getName().equals(prefix+"DateTime"))
-      return parseDateTime(xpp);
-    else if (xpp.getName().equals(prefix+"Code"))
-      return parseCode(xpp);
-    else if (xpp.getName().equals(prefix+"Date"))
-      return parseDate(xpp);
-    else if (xpp.getName().equals(prefix+"Decimal"))
-      return parseDecimal(xpp);
-    else if (xpp.getName().equals(prefix+"Uri"))
-      return parseUri(xpp);
     else if (xpp.getName().equals(prefix+"Id"))
       return parseId(xpp);
     else if (xpp.getName().equals(prefix+"Base64Binary"))
       return parseBase64Binary(xpp);
+    else if (xpp.getName().equals(prefix+"DateTime"))
+      return parseDateTime(xpp);
+    else if (xpp.getName().equals(prefix+"Integer"))
+      return parseInteger(xpp);
     else if (xpp.getName().equals(prefix+"Oid"))
       return parseOid(xpp);
     else if (xpp.getName().equals(prefix+"String"))
@@ -5252,8 +5244,16 @@ public class XmlParser extends XmlParserBase {
       return parseBoolean(xpp);
     else if (xpp.getName().equals(prefix+"Uuid"))
       return parseUuid(xpp);
+    else if (xpp.getName().equals(prefix+"Code"))
+      return parseCode(xpp);
+    else if (xpp.getName().equals(prefix+"Date"))
+      return parseDate(xpp);
+    else if (xpp.getName().equals(prefix+"Uri"))
+      return parseUri(xpp);
     else if (xpp.getName().equals(prefix+"Instant"))
       return parseInstant(xpp);
+    else if (xpp.getName().equals(prefix+"Decimal"))
+      return parseDecimal(xpp);
     throw new Exception("Unknown type "+xpp.getName());
   }
 
@@ -5400,22 +5400,14 @@ public class XmlParser extends XmlParserBase {
       return parseSupply(xpp);
     else if (type.equals("ValueSet"))
       return parseValueSet(xpp);
-    else if (type.equals("integer"))
-      return parseInteger(xpp);
-    else if (type.equals("dateTime"))
-      return parseDateTime(xpp);
-    else if (type.equals("code"))
-      return parseCode(xpp);
-    else if (type.equals("date"))
-      return parseDate(xpp);
-    else if (type.equals("decimal"))
-      return parseDecimal(xpp);
-    else if (type.equals("uri"))
-      return parseUri(xpp);
     else if (type.equals("id"))
       return parseId(xpp);
     else if (type.equals("base64Binary"))
       return parseBase64Binary(xpp);
+    else if (type.equals("dateTime"))
+      return parseDateTime(xpp);
+    else if (type.equals("integer"))
+      return parseInteger(xpp);
     else if (type.equals("oid"))
       return parseOid(xpp);
     else if (type.equals("string"))
@@ -5424,8 +5416,16 @@ public class XmlParser extends XmlParserBase {
       return parseBoolean(xpp);
     else if (type.equals("uuid"))
       return parseUuid(xpp);
+    else if (type.equals("code"))
+      return parseCode(xpp);
+    else if (type.equals("date"))
+      return parseDate(xpp);
+    else if (type.equals("uri"))
+      return parseUri(xpp);
     else if (type.equals("instant"))
       return parseInstant(xpp);
+    else if (type.equals("decimal"))
+      return parseDecimal(xpp);
     throw new Exception("Unknown type "+type);
   }
 
@@ -5568,22 +5568,14 @@ public class XmlParser extends XmlParserBase {
       return true;
     if (xpp.getName().equals(prefix+"ValueSet"))
       return true;
-    if (xpp.getName().equals(prefix+"Integer"))
-      return true;
-    if (xpp.getName().equals(prefix+"DateTime"))
-      return true;
-    if (xpp.getName().equals(prefix+"Code"))
-      return true;
-    if (xpp.getName().equals(prefix+"Date"))
-      return true;
-    if (xpp.getName().equals(prefix+"Decimal"))
-      return true;
-    if (xpp.getName().equals(prefix+"Uri"))
-      return true;
     if (xpp.getName().equals(prefix+"Id"))
       return true;
     if (xpp.getName().equals(prefix+"Base64Binary"))
       return true;
+    if (xpp.getName().equals(prefix+"DateTime"))
+      return true;
+    if (xpp.getName().equals(prefix+"Integer"))
+      return true;
     if (xpp.getName().equals(prefix+"Oid"))
       return true;
     if (xpp.getName().equals(prefix+"String"))
@@ -5592,8 +5584,16 @@ public class XmlParser extends XmlParserBase {
       return true;
     if (xpp.getName().equals(prefix+"Uuid"))
       return true;
+    if (xpp.getName().equals(prefix+"Code"))
+      return true;
+    if (xpp.getName().equals(prefix+"Date"))
+      return true;
+    if (xpp.getName().equals(prefix+"Uri"))
+      return true;
     if (xpp.getName().equals(prefix+"Instant"))
       return true;
+    if (xpp.getName().equals(prefix+"Decimal"))
+      return true;
     return false;
   }
 }
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/formats/XmlParserBase.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/formats/XmlParserBase.java
index 457a847..ae44b76 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/formats/XmlParserBase.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/formats/XmlParserBase.java
@@ -29,17 +29,15 @@ POSSIBILITY OF SUCH DAMAGE.
 */
 
 import java.io.InputStream;
-import java.math.BigDecimal;
-import java.net.URI;
 import java.util.Calendar;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
 
 import org.apache.commons.codec.binary.Base64;
-import org.hl7.fhir.instance.model.*;
-import org.hl7.fhir.instance.model.Boolean;
-import org.hl7.fhir.instance.model.Integer;
+import org.hl7.fhir.instance.model.AtomEntry;
+import org.hl7.fhir.instance.model.AtomFeed;
+import org.hl7.fhir.instance.model.Binary;
+import org.hl7.fhir.instance.model.Element;
+import org.hl7.fhir.instance.model.Resource;
+import org.hl7.fhir.instance.model.Type;
 import org.hl7.fhir.utilities.xhtml.XhtmlNode;
 import org.hl7.fhir.utilities.xhtml.XhtmlParser;
 import org.xmlpull.v1.XmlPullParser;
@@ -183,8 +181,8 @@ public abstract class XmlParserBase extends ParserBase implements Parser {
     return res;  
   }
 
-  private AtomEntry parseEntry(XmlPullParser xpp) throws Exception {
-    AtomEntry res = new AtomEntry();
+  private <T extends Resource> AtomEntry<T> parseEntry(XmlPullParser xpp) throws Exception {
+    AtomEntry<T> res = new AtomEntry<T>();
     
     xpp.next();    
     int eventType = nextNoWhitespace(xpp);
@@ -222,7 +220,7 @@ public abstract class XmlParserBase extends ParserBase implements Parser {
         xpp.next();
         nextNoWhitespace(xpp);
         XmlParser p = new XmlParser();
-        res.setResource(p.parse(xpp));
+        res.setResource((T)p.parse(xpp));//TODO Refactor architecture to eliminate this unsafe cast and better support generics
         xpp.next();
         nextNoWhitespace(xpp);
         xpp.next();
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Address.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Address.java
index 5447e58..3892647 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Address.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Address.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 import java.util.*;
 
@@ -184,6 +184,20 @@ public class Address extends Type {
       return this.line;
     }
 
+    // syntactic sugar
+    public String_ addLine() { 
+      String_ t = new String_();
+      this.line.add(t);
+      return t;
+    }
+
+    public String_ addLineSimple(String value) { 
+      String_ t = new String_();
+      t.setValue(value);
+      this.line.add(t);
+      return t;
+    }
+
     public String_ getCity() { 
       return this.city;
     }
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/AdverseReaction.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/AdverseReaction.java
index 4d1275c..c015352 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/AdverseReaction.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/AdverseReaction.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 import java.util.*;
 
@@ -450,10 +450,24 @@ public class AdverseReaction extends Resource {
       return this.symptom;
     }
 
+    // syntactic sugar
+    public AdverseReactionSymptomComponent addSymptom() { 
+      AdverseReactionSymptomComponent t = new AdverseReactionSymptomComponent();
+      this.symptom.add(t);
+      return t;
+    }
+
     public List<AdverseReactionExposureComponent> getExposure() { 
       return this.exposure;
     }
 
+    // syntactic sugar
+    public AdverseReactionExposureComponent addExposure() { 
+      AdverseReactionExposureComponent t = new AdverseReactionExposureComponent();
+      this.exposure.add(t);
+      return t;
+    }
+
       public AdverseReaction copy() {
         AdverseReaction dst = new AdverseReaction();
         dst.reactionDate = reactionDate == null ? null : reactionDate.copy();
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Age.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Age.java
index 41ad8bd..7281fb9 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Age.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Age.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 /**
  * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Alert.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Alert.java
index 4cf5f7f..c90ea6f 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Alert.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Alert.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 /**
  * Prospective warnings of potential issues when providing care to the patient.
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/AllergyIntolerance.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/AllergyIntolerance.java
index 3866297..10dc285 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/AllergyIntolerance.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/AllergyIntolerance.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 import java.util.*;
 
@@ -370,10 +370,24 @@ public class AllergyIntolerance extends Resource {
       return this.reaction;
     }
 
+    // syntactic sugar
+    public ResourceReference addReaction() { 
+      ResourceReference t = new ResourceReference();
+      this.reaction.add(t);
+      return t;
+    }
+
     public List<ResourceReference> getSensitivityTest() { 
       return this.sensitivityTest;
     }
 
+    // syntactic sugar
+    public ResourceReference addSensitivityTest() { 
+      ResourceReference t = new ResourceReference();
+      this.sensitivityTest.add(t);
+      return t;
+    }
+
       public AllergyIntolerance copy() {
         AllergyIntolerance dst = new AllergyIntolerance();
         dst.identifier = identifier == null ? null : identifier.copy();
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Appointment.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Appointment.java
index d79ed00..f5c15eb 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Appointment.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Appointment.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 /**
  * null
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/AtomEntry.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/AtomEntry.java
index 378b2a2..8671168 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/AtomEntry.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/AtomEntry.java
@@ -28,16 +28,12 @@ POSSIBILITY OF SUCH DAMAGE.
 
 */
 
-import java.util.HashMap;
-import java.util.LinkedHashMap;
-import java.util.Map;
-
 import org.hl7.fhir.utilities.xhtml.XhtmlNode;
 
-public class AtomEntry extends AtomBase {
+public class AtomEntry<T extends Resource> extends AtomBase {
   private boolean deleted;
   private java.util.Calendar published;
-  private Resource resource;
+  private T resource;
   private XhtmlNode summary;
   
   
@@ -47,10 +43,10 @@ public class AtomEntry extends AtomBase {
   public void setPublished(java.util.Calendar published) {
     this.published = published;
   }
-  public Resource getResource() {
+  public T getResource() {
     return resource;
   }
-  public void setResource(Resource resource) {
+  public void setResource(T resource) {
     this.resource = resource;
   }
   public XhtmlNode getSummary() {
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/AtomFeed.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/AtomFeed.java
index ddc8ab1..15ef943d 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/AtomFeed.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/AtomFeed.java
@@ -29,17 +29,14 @@ POSSIBILITY OF SUCH DAMAGE.
  */
 
 import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.LinkedHashMap;
 import java.util.List;
-import java.util.Map;
 
 public class AtomFeed extends AtomBase {
 	private java.lang.Integer totalResults;
 
-	private List<AtomEntry> entryList = new ArrayList<AtomEntry>();
+	private List<AtomEntry<? extends Resource>> entryList = new ArrayList<AtomEntry<? extends Resource>>();
 
-	public List<AtomEntry> getEntryList() {
+	public List<AtomEntry<? extends Resource>> getEntryList() {
 		return entryList;
 	}
 
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Attachment.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Attachment.java
index 2d74ccb..dfc32b3 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Attachment.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Attachment.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 /**
  * For referring to data content defined in other formats.
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/CarePlan.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/CarePlan.java
index 37b485e..d5c7a78 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/CarePlan.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/CarePlan.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 import java.util.*;
 
@@ -578,6 +578,13 @@ public class CarePlan extends Resource {
           return this.performer;
         }
 
+    // syntactic sugar
+        public ResourceReference addPerformer() { 
+          ResourceReference t = new ResourceReference();
+          this.performer.add(t);
+          return t;
+        }
+
         public ResourceReference getProduct() { 
           return this.product;
         }
@@ -628,6 +635,13 @@ public class CarePlan extends Resource {
           return this.actionTaken;
         }
 
+    // syntactic sugar
+        public ResourceReference addActionTaken() { 
+          ResourceReference t = new ResourceReference();
+          this.actionTaken.add(t);
+          return t;
+        }
+
         public String_ getNotes() { 
           return this.notes;
         }
@@ -792,18 +806,46 @@ public class CarePlan extends Resource {
       return this.concern;
     }
 
+    // syntactic sugar
+    public ResourceReference addConcern() { 
+      ResourceReference t = new ResourceReference();
+      this.concern.add(t);
+      return t;
+    }
+
     public List<CarePlanParticipantComponent> getParticipant() { 
       return this.participant;
     }
 
+    // syntactic sugar
+    public CarePlanParticipantComponent addParticipant() { 
+      CarePlanParticipantComponent t = new CarePlanParticipantComponent();
+      this.participant.add(t);
+      return t;
+    }
+
     public List<CarePlanGoalComponent> getGoal() { 
       return this.goal;
     }
 
+    // syntactic sugar
+    public CarePlanGoalComponent addGoal() { 
+      CarePlanGoalComponent t = new CarePlanGoalComponent();
+      this.goal.add(t);
+      return t;
+    }
+
     public List<CarePlanActivityComponent> getActivity() { 
       return this.activity;
     }
 
+    // syntactic sugar
+    public CarePlanActivityComponent addActivity() { 
+      CarePlanActivityComponent t = new CarePlanActivityComponent();
+      this.activity.add(t);
+      return t;
+    }
+
     public String_ getNotes() { 
       return this.notes;
     }
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Choice.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Choice.java
index 37cc200..c535acf 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Choice.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Choice.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 import java.util.*;
 
@@ -139,6 +139,13 @@ public class Choice extends Type {
       return this.option;
     }
 
+    // syntactic sugar
+    public ChoiceOptionComponent addOption() { 
+      ChoiceOptionComponent t = new ChoiceOptionComponent();
+      this.option.add(t);
+      return t;
+    }
+
     public Boolean getIsOrdered() { 
       return this.isOrdered;
     }
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/CodeableConcept.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/CodeableConcept.java
index 04bd35b..43d8ce3 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/CodeableConcept.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/CodeableConcept.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 import java.util.*;
 
@@ -57,6 +57,13 @@ public class CodeableConcept extends Type {
       return this.coding;
     }
 
+    // syntactic sugar
+    public Coding addCoding() { 
+      Coding t = new Coding();
+      this.coding.add(t);
+      return t;
+    }
+
     public String_ getText() { 
       return this.text;
     }
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Coding.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Coding.java
index 66b8cec..6abcc5a 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Coding.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Coding.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 /**
  * A reference to a code defined by a terminology system.
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Condition.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Condition.java
index 3207c40..7b0bba4 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Condition.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Condition.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 import java.util.*;
 
@@ -161,6 +161,13 @@ public class Condition extends Resource {
           return this.assessment;
         }
 
+    // syntactic sugar
+        public ResourceReference addAssessment() { 
+          ResourceReference t = new ResourceReference();
+          this.assessment.add(t);
+          return t;
+        }
+
       public ConditionStageComponent copy(Condition e) {
         ConditionStageComponent dst = e.new ConditionStageComponent();
         dst.summary = summary == null ? null : summary.copy();
@@ -195,6 +202,13 @@ public class Condition extends Resource {
           return this.detail;
         }
 
+    // syntactic sugar
+        public ResourceReference addDetail() { 
+          ResourceReference t = new ResourceReference();
+          this.detail.add(t);
+          return t;
+        }
+
       public ConditionEvidenceComponent copy(Condition e) {
         ConditionEvidenceComponent dst = e.new ConditionEvidenceComponent();
         dst.code = code == null ? null : code.copy();
@@ -520,14 +534,35 @@ public class Condition extends Resource {
       return this.evidence;
     }
 
+    // syntactic sugar
+    public ConditionEvidenceComponent addEvidence() { 
+      ConditionEvidenceComponent t = new ConditionEvidenceComponent();
+      this.evidence.add(t);
+      return t;
+    }
+
     public List<ConditionLocationComponent> getLocation() { 
       return this.location;
     }
 
+    // syntactic sugar
+    public ConditionLocationComponent addLocation() { 
+      ConditionLocationComponent t = new ConditionLocationComponent();
+      this.location.add(t);
+      return t;
+    }
+
     public List<ConditionRelatedItemComponent> getRelatedItem() { 
       return this.relatedItem;
     }
 
+    // syntactic sugar
+    public ConditionRelatedItemComponent addRelatedItem() { 
+      ConditionRelatedItemComponent t = new ConditionRelatedItemComponent();
+      this.relatedItem.add(t);
+      return t;
+    }
+
     public String_ getNotes() { 
       return this.notes;
     }
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Conformance.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Conformance.java
index 08726df..fcc672b 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Conformance.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Conformance.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 import java.util.*;
 
@@ -646,6 +646,13 @@ public class Conformance extends Resource {
           return this.resource;
         }
 
+    // syntactic sugar
+        public ConformanceRestResourceComponent addResource() { 
+          ConformanceRestResourceComponent t = new ConformanceRestResourceComponent();
+          this.resource.add(t);
+          return t;
+        }
+
         public Boolean getBatch() { 
           return this.batch;
         }
@@ -694,6 +701,13 @@ public class Conformance extends Resource {
           return this.query;
         }
 
+    // syntactic sugar
+        public ConformanceRestQueryComponent addQuery() { 
+          ConformanceRestQueryComponent t = new ConformanceRestQueryComponent();
+          this.query.add(t);
+          return t;
+        }
+
       public ConformanceRestComponent copy(Conformance e) {
         ConformanceRestComponent dst = e.new ConformanceRestComponent();
         dst.mode = mode == null ? null : mode.copy();
@@ -732,6 +746,13 @@ public class Conformance extends Resource {
           return this.service;
         }
 
+    // syntactic sugar
+        public CodeableConcept addService() { 
+          CodeableConcept t = new CodeableConcept();
+          this.service.add(t);
+          return t;
+        }
+
         public String_ getDescription() { 
           return this.description;
         }
@@ -758,6 +779,13 @@ public class Conformance extends Resource {
           return this.certificate;
         }
 
+    // syntactic sugar
+        public ConformanceRestSecurityCertificateComponent addCertificate() { 
+          ConformanceRestSecurityCertificateComponent t = new ConformanceRestSecurityCertificateComponent();
+          this.certificate.add(t);
+          return t;
+        }
+
       public ConformanceRestSecurityComponent copy(Conformance e) {
         ConformanceRestSecurityComponent dst = e.new ConformanceRestSecurityComponent();
         dst.service = new ArrayList<CodeableConcept>();
@@ -897,6 +925,13 @@ public class Conformance extends Resource {
           return this.operation;
         }
 
+    // syntactic sugar
+        public ConformanceRestResourceOperationComponent addOperation() { 
+          ConformanceRestResourceOperationComponent t = new ConformanceRestResourceOperationComponent();
+          this.operation.add(t);
+          return t;
+        }
+
         public Boolean getReadHistory() { 
           return this.readHistory;
         }
@@ -923,10 +958,31 @@ public class Conformance extends Resource {
           return this.searchInclude;
         }
 
+    // syntactic sugar
+        public String_ addSearchInclude() { 
+          String_ t = new String_();
+          this.searchInclude.add(t);
+          return t;
+        }
+
+        public String_ addSearchIncludeSimple(String value) { 
+          String_ t = new String_();
+          t.setValue(value);
+          this.searchInclude.add(t);
+          return t;
+        }
+
         public List<ConformanceRestResourceSearchParamComponent> getSearchParam() { 
           return this.searchParam;
         }
 
+    // syntactic sugar
+        public ConformanceRestResourceSearchParamComponent addSearchParam() { 
+          ConformanceRestResourceSearchParamComponent t = new ConformanceRestResourceSearchParamComponent();
+          this.searchParam.add(t);
+          return t;
+        }
+
       public ConformanceRestResourceComponent copy(Conformance e) {
         ConformanceRestResourceComponent dst = e.new ConformanceRestResourceComponent();
         dst.type = type == null ? null : type.copy();
@@ -1144,10 +1200,38 @@ public class Conformance extends Resource {
           return this.target;
         }
 
+    // syntactic sugar
+        public Code addTarget() { 
+          Code t = new Code();
+          this.target.add(t);
+          return t;
+        }
+
+        public Code addTargetSimple(String value) { 
+          Code t = new Code();
+          t.setValue(value);
+          this.target.add(t);
+          return t;
+        }
+
         public List<String_> getChain() { 
           return this.chain;
         }
 
+    // syntactic sugar
+        public String_ addChain() { 
+          String_ t = new String_();
+          this.chain.add(t);
+          return t;
+        }
+
+        public String_ addChainSimple(String value) { 
+          String_ t = new String_();
+          t.setValue(value);
+          this.chain.add(t);
+          return t;
+        }
+
       public ConformanceRestResourceSearchParamComponent copy(Conformance e) {
         ConformanceRestResourceSearchParamComponent dst = e.new ConformanceRestResourceSearchParamComponent();
         dst.name = name == null ? null : name.copy();
@@ -1222,6 +1306,13 @@ public class Conformance extends Resource {
           return this.parameter;
         }
 
+    // syntactic sugar
+        public ConformanceRestResourceSearchParamComponent addParameter() { 
+          ConformanceRestResourceSearchParamComponent t = new ConformanceRestResourceSearchParamComponent();
+          this.parameter.add(t);
+          return t;
+        }
+
       public ConformanceRestQueryComponent copy(Conformance e) {
         ConformanceRestQueryComponent dst = e.new ConformanceRestQueryComponent();
         dst.name = name == null ? null : name.copy();
@@ -1325,6 +1416,13 @@ public class Conformance extends Resource {
           return this.event;
         }
 
+    // syntactic sugar
+        public ConformanceMessagingEventComponent addEvent() { 
+          ConformanceMessagingEventComponent t = new ConformanceMessagingEventComponent();
+          this.event.add(t);
+          return t;
+        }
+
       public ConformanceMessagingComponent copy(Conformance e) {
         ConformanceMessagingComponent dst = e.new ConformanceMessagingComponent();
         dst.endpoint = endpoint == null ? null : endpoint.copy();
@@ -1414,6 +1512,13 @@ public class Conformance extends Resource {
           return this.protocol;
         }
 
+    // syntactic sugar
+        public Coding addProtocol() { 
+          Coding t = new Coding();
+          this.protocol.add(t);
+          return t;
+        }
+
         public Code getFocus() { 
           return this.focus;
         }
@@ -1733,6 +1838,13 @@ public class Conformance extends Resource {
       return this.telecom;
     }
 
+    // syntactic sugar
+    public Contact addTelecom() { 
+      Contact t = new Contact();
+      this.telecom.add(t);
+      return t;
+    }
+
     public String_ getDescription() { 
       return this.description;
     }
@@ -1873,18 +1985,53 @@ public class Conformance extends Resource {
       return this.format;
     }
 
+    // syntactic sugar
+    public Code addFormat() { 
+      Code t = new Code();
+      this.format.add(t);
+      return t;
+    }
+
+    public Code addFormatSimple(String value) { 
+      Code t = new Code();
+      t.setValue(value);
+      this.format.add(t);
+      return t;
+    }
+
     public List<ConformanceRestComponent> getRest() { 
       return this.rest;
     }
 
+    // syntactic sugar
+    public ConformanceRestComponent addRest() { 
+      ConformanceRestComponent t = new ConformanceRestComponent();
+      this.rest.add(t);
+      return t;
+    }
+
     public List<ConformanceMessagingComponent> getMessaging() { 
       return this.messaging;
     }
 
+    // syntactic sugar
+    public ConformanceMessagingComponent addMessaging() { 
+      ConformanceMessagingComponent t = new ConformanceMessagingComponent();
+      this.messaging.add(t);
+      return t;
+    }
+
     public List<ConformanceDocumentComponent> getDocument() { 
       return this.document;
     }
 
+    // syntactic sugar
+    public ConformanceDocumentComponent addDocument() { 
+      ConformanceDocumentComponent t = new ConformanceDocumentComponent();
+      this.document.add(t);
+      return t;
+    }
+
       public Conformance copy() {
         Conformance dst = new Conformance();
         dst.identifier = identifier == null ? null : identifier.copy();
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Contact.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Contact.java
index 204df17..0769d43 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Contact.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Contact.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 /**
  * All kinds of technology mediated contact details for a person or organisation, including telephone, email, etc.
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Count.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Count.java
index 7ae0940..a8dc864 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Count.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Count.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 /**
  * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Coverage.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Coverage.java
index 468102d..5bf473c 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Coverage.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Coverage.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 /**
  * Financial instrument by which payment information for health care.
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Device.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Device.java
index 21e4bbf..e7f7516 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Device.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Device.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 import java.util.*;
 
@@ -302,6 +302,13 @@ public class Device extends Resource {
       return this.assignedId;
     }
 
+    // syntactic sugar
+    public Identifier addAssignedId() { 
+      Identifier t = new Identifier();
+      this.assignedId.add(t);
+      return t;
+    }
+
     public ResourceReference getLocation() { 
       return this.location;
     }
@@ -322,6 +329,13 @@ public class Device extends Resource {
       return this.contact;
     }
 
+    // syntactic sugar
+    public Contact addContact() { 
+      Contact t = new Contact();
+      this.contact.add(t);
+      return t;
+    }
+
     public Uri getUrl() { 
       return this.url;
     }
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/DeviceCapabilities.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/DeviceCapabilities.java
index e1b65c1..cc68ca9 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/DeviceCapabilities.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/DeviceCapabilities.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 import java.util.*;
 
@@ -128,6 +128,13 @@ public class DeviceCapabilities extends Resource {
           return this.channel;
         }
 
+    // syntactic sugar
+        public DeviceCapabilitiesVirtualDeviceChannelComponent addChannel() { 
+          DeviceCapabilitiesVirtualDeviceChannelComponent t = new DeviceCapabilitiesVirtualDeviceChannelComponent();
+          this.channel.add(t);
+          return t;
+        }
+
       public DeviceCapabilitiesVirtualDeviceComponent copy(DeviceCapabilities e) {
         DeviceCapabilitiesVirtualDeviceComponent dst = e.new DeviceCapabilitiesVirtualDeviceComponent();
         dst.code = code == null ? null : code.copy();
@@ -162,6 +169,13 @@ public class DeviceCapabilities extends Resource {
           return this.metric;
         }
 
+    // syntactic sugar
+        public DeviceCapabilitiesVirtualDeviceChannelMetricComponent addMetric() { 
+          DeviceCapabilitiesVirtualDeviceChannelMetricComponent t = new DeviceCapabilitiesVirtualDeviceChannelMetricComponent();
+          this.metric.add(t);
+          return t;
+        }
+
       public DeviceCapabilitiesVirtualDeviceChannelComponent copy(DeviceCapabilities e) {
         DeviceCapabilitiesVirtualDeviceChannelComponent dst = e.new DeviceCapabilitiesVirtualDeviceChannelComponent();
         dst.code = code == null ? null : code.copy();
@@ -232,6 +246,13 @@ public class DeviceCapabilities extends Resource {
           return this.facet;
         }
 
+    // syntactic sugar
+        public DeviceCapabilitiesVirtualDeviceChannelMetricFacetComponent addFacet() { 
+          DeviceCapabilitiesVirtualDeviceChannelMetricFacetComponent t = new DeviceCapabilitiesVirtualDeviceChannelMetricFacetComponent();
+          this.facet.add(t);
+          return t;
+        }
+
       public DeviceCapabilitiesVirtualDeviceChannelMetricComponent copy(DeviceCapabilities e) {
         DeviceCapabilitiesVirtualDeviceChannelMetricComponent dst = e.new DeviceCapabilitiesVirtualDeviceChannelMetricComponent();
         dst.code = code == null ? null : code.copy();
@@ -552,6 +573,13 @@ public class DeviceCapabilities extends Resource {
       return this.virtualDevice;
     }
 
+    // syntactic sugar
+    public DeviceCapabilitiesVirtualDeviceComponent addVirtualDevice() { 
+      DeviceCapabilitiesVirtualDeviceComponent t = new DeviceCapabilitiesVirtualDeviceComponent();
+      this.virtualDevice.add(t);
+      return t;
+    }
+
       public DeviceCapabilities copy() {
         DeviceCapabilities dst = new DeviceCapabilities();
         dst.name = name == null ? null : name.copy();
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/DeviceLog.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/DeviceLog.java
index 7566f3e..c17878d 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/DeviceLog.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/DeviceLog.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 import java.util.*;
 
@@ -228,6 +228,20 @@ public class DeviceLog extends Resource {
           return this.flag;
         }
 
+    // syntactic sugar
+        public Enumeration<DeviceValueFlag> addFlag() { 
+          Enumeration<DeviceValueFlag> t = new Enumeration<DeviceValueFlag>();
+          this.flag.add(t);
+          return t;
+        }
+
+        public Enumeration<DeviceValueFlag> addFlagSimple(DeviceValueFlag value) { 
+          Enumeration<DeviceValueFlag> t = new Enumeration<DeviceValueFlag>();
+          t.setValue(value);
+          this.flag.add(t);
+          return t;
+        }
+
       public DeviceLogItemComponent copy(DeviceLog e) {
         DeviceLogItemComponent dst = e.new DeviceLogItemComponent();
         dst.key = key == null ? null : key.copy();
@@ -302,6 +316,13 @@ public class DeviceLog extends Resource {
       return this.item;
     }
 
+    // syntactic sugar
+    public DeviceLogItemComponent addItem() { 
+      DeviceLogItemComponent t = new DeviceLogItemComponent();
+      this.item.add(t);
+      return t;
+    }
+
       public DeviceLog copy() {
         DeviceLog dst = new DeviceLog();
         dst.instant = instant == null ? null : instant.copy();
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/DeviceObservation.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/DeviceObservation.java
index 372c182..49ca748 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/DeviceObservation.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/DeviceObservation.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 import java.util.*;
 
@@ -80,6 +80,13 @@ public class DeviceObservation extends Resource {
       return this.identifier;
     }
 
+    // syntactic sugar
+    public Identifier addIdentifier() { 
+      Identifier t = new Identifier();
+      this.identifier.add(t);
+      return t;
+    }
+
     public Instant getIssued() { 
       return this.issued;
     }
@@ -118,6 +125,13 @@ public class DeviceObservation extends Resource {
       return this.measurement;
     }
 
+    // syntactic sugar
+    public ResourceReference addMeasurement() { 
+      ResourceReference t = new ResourceReference();
+      this.measurement.add(t);
+      return t;
+    }
+
       public DeviceObservation copy() {
         DeviceObservation dst = new DeviceObservation();
         dst.code = code == null ? null : code.copy();
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/DiagnosticOrder.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/DiagnosticOrder.java
index 5abcaf1..ff969a8 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/DiagnosticOrder.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/DiagnosticOrder.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 import java.util.*;
 
@@ -294,6 +294,13 @@ public class DiagnosticOrder extends Resource {
           return this.specimen;
         }
 
+    // syntactic sugar
+        public ResourceReference addSpecimen() { 
+          ResourceReference t = new ResourceReference();
+          this.specimen.add(t);
+          return t;
+        }
+
         public CodeableConcept getBodySite() { 
           return this.bodySite;
         }
@@ -328,6 +335,13 @@ public class DiagnosticOrder extends Resource {
           return this.event;
         }
 
+    // syntactic sugar
+        public DiagnosticOrderEventComponent addEvent() { 
+          DiagnosticOrderEventComponent t = new DiagnosticOrderEventComponent();
+          this.event.add(t);
+          return t;
+        }
+
       public DiagnosticOrderItemComponent copy(DiagnosticOrder e) {
         DiagnosticOrderItemComponent dst = e.new DiagnosticOrderItemComponent();
         dst.code = code == null ? null : code.copy();
@@ -414,6 +428,13 @@ public class DiagnosticOrder extends Resource {
       return this.identifier;
     }
 
+    // syntactic sugar
+    public Identifier addIdentifier() { 
+      Identifier t = new Identifier();
+      this.identifier.add(t);
+      return t;
+    }
+
     public ResourceReference getEncounter() { 
       return this.encounter;
     }
@@ -448,6 +469,13 @@ public class DiagnosticOrder extends Resource {
       return this.specimen;
     }
 
+    // syntactic sugar
+    public ResourceReference addSpecimen() { 
+      ResourceReference t = new ResourceReference();
+      this.specimen.add(t);
+      return t;
+    }
+
     public Enumeration<DiagnosticOrderStatus> getStatus() { 
       return this.status;
     }
@@ -496,10 +524,24 @@ public class DiagnosticOrder extends Resource {
       return this.event;
     }
 
+    // syntactic sugar
+    public DiagnosticOrderEventComponent addEvent() { 
+      DiagnosticOrderEventComponent t = new DiagnosticOrderEventComponent();
+      this.event.add(t);
+      return t;
+    }
+
     public List<DiagnosticOrderItemComponent> getItem() { 
       return this.item;
     }
 
+    // syntactic sugar
+    public DiagnosticOrderItemComponent addItem() { 
+      DiagnosticOrderItemComponent t = new DiagnosticOrderItemComponent();
+      this.item.add(t);
+      return t;
+    }
+
       public DiagnosticOrder copy() {
         DiagnosticOrder dst = new DiagnosticOrder();
         dst.subject = subject == null ? null : subject.copy();
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/DiagnosticReport.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/DiagnosticReport.java
index cf17e35..45185ac 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/DiagnosticReport.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/DiagnosticReport.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 import java.util.*;
 
@@ -176,6 +176,13 @@ public class DiagnosticReport extends Resource {
           return this.requestTest;
         }
 
+    // syntactic sugar
+        public CodeableConcept addRequestTest() { 
+          CodeableConcept t = new CodeableConcept();
+          this.requestTest.add(t);
+          return t;
+        }
+
         public CodeableConcept getBodySite() { 
           return this.bodySite;
         }
@@ -271,10 +278,24 @@ public class DiagnosticReport extends Resource {
           return this.group;
         }
 
+    // syntactic sugar
+        public ResultGroupComponent addGroup() { 
+          ResultGroupComponent t = new ResultGroupComponent();
+          this.group.add(t);
+          return t;
+        }
+
         public List<ResourceReference> getResult() { 
           return this.result;
         }
 
+    // syntactic sugar
+        public ResourceReference addResult() { 
+          ResourceReference t = new ResourceReference();
+          this.result.add(t);
+          return t;
+        }
+
       public ResultGroupComponent copy(DiagnosticReport e) {
         ResultGroupComponent dst = e.new ResultGroupComponent();
         dst.name = name == null ? null : name.copy();
@@ -419,6 +440,13 @@ public class DiagnosticReport extends Resource {
       return this.requestDetail;
     }
 
+    // syntactic sugar
+    public DiagnosticReportRequestDetailComponent addRequestDetail() { 
+      DiagnosticReportRequestDetailComponent t = new DiagnosticReportRequestDetailComponent();
+      this.requestDetail.add(t);
+      return t;
+    }
+
     public CodeableConcept getServiceCategory() { 
       return this.serviceCategory;
     }
@@ -457,6 +485,13 @@ public class DiagnosticReport extends Resource {
       return this.image;
     }
 
+    // syntactic sugar
+    public ResourceReference addImage() { 
+      ResourceReference t = new ResourceReference();
+      this.image.add(t);
+      return t;
+    }
+
     public String_ getConclusion() { 
       return this.conclusion;
     }
@@ -483,10 +518,24 @@ public class DiagnosticReport extends Resource {
       return this.codedDiagnosis;
     }
 
+    // syntactic sugar
+    public CodeableConcept addCodedDiagnosis() { 
+      CodeableConcept t = new CodeableConcept();
+      this.codedDiagnosis.add(t);
+      return t;
+    }
+
     public List<Attachment> getRepresentation() { 
       return this.representation;
     }
 
+    // syntactic sugar
+    public Attachment addRepresentation() { 
+      Attachment t = new Attachment();
+      this.representation.add(t);
+      return t;
+    }
+
       public DiagnosticReport copy() {
         DiagnosticReport dst = new DiagnosticReport();
         dst.status = status == null ? null : status.copy();
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Distance.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Distance.java
index cc876c2..7ba789e 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Distance.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Distance.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 /**
  * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Document.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Document.java
index 45b59fd..41b1d85 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Document.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Document.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 import java.util.*;
 
@@ -248,6 +248,13 @@ public class Document extends Resource {
           return this.code;
         }
 
+    // syntactic sugar
+        public CodeableConcept addCode() { 
+          CodeableConcept t = new CodeableConcept();
+          this.code.add(t);
+          return t;
+        }
+
         public Period getPeriod() { 
           return this.period;
         }
@@ -260,6 +267,13 @@ public class Document extends Resource {
           return this.detail;
         }
 
+    // syntactic sugar
+        public ResourceReference addDetail() { 
+          ResourceReference t = new ResourceReference();
+          this.detail.add(t);
+          return t;
+        }
+
       public DocumentEventComponent copy(Document e) {
         DocumentEventComponent dst = e.new DocumentEventComponent();
         dst.code = new ArrayList<CodeableConcept>();
@@ -323,6 +337,13 @@ public class Document extends Resource {
           return this.section;
         }
 
+    // syntactic sugar
+        public SectionComponent addSection() { 
+          SectionComponent t = new SectionComponent();
+          this.section.add(t);
+          return t;
+        }
+
       public SectionComponent copy(Document e) {
         SectionComponent dst = e.new SectionComponent();
         dst.code = code == null ? null : code.copy();
@@ -541,10 +562,24 @@ public class Document extends Resource {
       return this.author;
     }
 
+    // syntactic sugar
+    public ResourceReference addAuthor() { 
+      ResourceReference t = new ResourceReference();
+      this.author.add(t);
+      return t;
+    }
+
     public List<DocumentAttesterComponent> getAttester() { 
       return this.attester;
     }
 
+    // syntactic sugar
+    public DocumentAttesterComponent addAttester() { 
+      DocumentAttesterComponent t = new DocumentAttesterComponent();
+      this.attester.add(t);
+      return t;
+    }
+
     public ResourceReference getCustodian() { 
       return this.custodian;
     }
@@ -595,6 +630,13 @@ public class Document extends Resource {
       return this.provenance;
     }
 
+    // syntactic sugar
+    public ResourceReference addProvenance() { 
+      ResourceReference t = new ResourceReference();
+      this.provenance.add(t);
+      return t;
+    }
+
     public Attachment getStylesheet() { 
       return this.stylesheet;
     }
@@ -615,6 +657,13 @@ public class Document extends Resource {
       return this.section;
     }
 
+    // syntactic sugar
+    public SectionComponent addSection() { 
+      SectionComponent t = new SectionComponent();
+      this.section.add(t);
+      return t;
+    }
+
       public Document copy() {
         Document dst = new Document();
         dst.identifier = identifier == null ? null : identifier.copy();
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/DocumentReference.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/DocumentReference.java
index f1a24b0..b914ee2 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/DocumentReference.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/DocumentReference.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 import java.util.*;
 
@@ -138,6 +138,13 @@ public class DocumentReference extends Resource {
           return this.parameter;
         }
 
+    // syntactic sugar
+        public DocumentReferenceServiceParameterComponent addParameter() { 
+          DocumentReferenceServiceParameterComponent t = new DocumentReferenceServiceParameterComponent();
+          this.parameter.add(t);
+          return t;
+        }
+
       public DocumentReferenceServiceComponent copy(DocumentReference e) {
         DocumentReferenceServiceComponent dst = e.new DocumentReferenceServiceComponent();
         dst.type = type == null ? null : type.copy();
@@ -230,6 +237,13 @@ public class DocumentReference extends Resource {
           return this.code;
         }
 
+    // syntactic sugar
+        public CodeableConcept addCode() { 
+          CodeableConcept t = new CodeableConcept();
+          this.code.add(t);
+          return t;
+        }
+
         public Period getPeriod() { 
           return this.period;
         }
@@ -385,6 +399,13 @@ public class DocumentReference extends Resource {
       return this.identifier;
     }
 
+    // syntactic sugar
+    public Identifier addIdentifier() { 
+      Identifier t = new Identifier();
+      this.identifier.add(t);
+      return t;
+    }
+
     public ResourceReference getSubject() { 
       return this.subject;
     }
@@ -413,6 +434,13 @@ public class DocumentReference extends Resource {
       return this.author;
     }
 
+    // syntactic sugar
+    public ResourceReference addAuthor() { 
+      ResourceReference t = new ResourceReference();
+      this.author.add(t);
+      return t;
+    }
+
     public ResourceReference getCustodian() { 
       return this.custodian;
     }
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Duration.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Duration.java
index 79400e0..07b9b24 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Duration.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Duration.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 /**
  * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Encounter.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Encounter.java
index f66513e..da9a658 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Encounter.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Encounter.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 import java.util.*;
 
@@ -283,6 +283,20 @@ public class Encounter extends Resource {
           return this.type;
         }
 
+    // syntactic sugar
+        public Enumeration<ParticipantType> addType() { 
+          Enumeration<ParticipantType> t = new Enumeration<ParticipantType>();
+          this.type.add(t);
+          return t;
+        }
+
+        public Enumeration<ParticipantType> addTypeSimple(ParticipantType value) { 
+          Enumeration<ParticipantType> t = new Enumeration<ParticipantType>();
+          t.setValue(value);
+          this.type.add(t);
+          return t;
+        }
+
         public ResourceReference getPractitioner() { 
           return this.practitioner;
         }
@@ -394,6 +408,13 @@ public class Encounter extends Resource {
           return this.accomodation;
         }
 
+    // syntactic sugar
+        public EncounterHospitalizationAccomodationComponent addAccomodation() { 
+          EncounterHospitalizationAccomodationComponent t = new EncounterHospitalizationAccomodationComponent();
+          this.accomodation.add(t);
+          return t;
+        }
+
         public CodeableConcept getDiet() { 
           return this.diet;
         }
@@ -406,10 +427,24 @@ public class Encounter extends Resource {
           return this.specialCourtesy;
         }
 
+    // syntactic sugar
+        public CodeableConcept addSpecialCourtesy() { 
+          CodeableConcept t = new CodeableConcept();
+          this.specialCourtesy.add(t);
+          return t;
+        }
+
         public List<CodeableConcept> getSpecialArrangement() { 
           return this.specialArrangement;
         }
 
+    // syntactic sugar
+        public CodeableConcept addSpecialArrangement() { 
+          CodeableConcept t = new CodeableConcept();
+          this.specialArrangement.add(t);
+          return t;
+        }
+
         public ResourceReference getDestination() { 
           return this.destination;
         }
@@ -628,6 +663,13 @@ public class Encounter extends Resource {
       return this.identifier;
     }
 
+    // syntactic sugar
+    public Identifier addIdentifier() { 
+      Identifier t = new Identifier();
+      this.identifier.add(t);
+      return t;
+    }
+
     public Enumeration<EncounterState> getStatus() { 
       return this.status;
     }
@@ -668,6 +710,13 @@ public class Encounter extends Resource {
       return this.type;
     }
 
+    // syntactic sugar
+    public CodeableConcept addType() { 
+      CodeableConcept t = new CodeableConcept();
+      this.type.add(t);
+      return t;
+    }
+
     public ResourceReference getSubject() { 
       return this.subject;
     }
@@ -680,6 +729,13 @@ public class Encounter extends Resource {
       return this.participant;
     }
 
+    // syntactic sugar
+    public EncounterParticipantComponent addParticipant() { 
+      EncounterParticipantComponent t = new EncounterParticipantComponent();
+      this.participant.add(t);
+      return t;
+    }
+
     public ResourceReference getFulfills() { 
       return this.fulfills;
     }
@@ -754,6 +810,13 @@ public class Encounter extends Resource {
       return this.location;
     }
 
+    // syntactic sugar
+    public EncounterLocationComponent addLocation() { 
+      EncounterLocationComponent t = new EncounterLocationComponent();
+      this.location.add(t);
+      return t;
+    }
+
     public ResourceReference getServiceProvider() { 
       return this.serviceProvider;
     }
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Extension.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Extension.java
index 4ddd254..abf67b1 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Extension.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Extension.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 /**
  * Optional Extensions Element - found in all resources.
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/FamilyHistory.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/FamilyHistory.java
index a9955f7..5102bfb 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/FamilyHistory.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/FamilyHistory.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 import java.util.*;
 
@@ -128,6 +128,13 @@ public class FamilyHistory extends Resource {
           return this.condition;
         }
 
+    // syntactic sugar
+        public FamilyHistoryRelationConditionComponent addCondition() { 
+          FamilyHistoryRelationConditionComponent t = new FamilyHistoryRelationConditionComponent();
+          this.condition.add(t);
+          return t;
+        }
+
       public FamilyHistoryRelationComponent copy(FamilyHistory e) {
         FamilyHistoryRelationComponent dst = e.new FamilyHistoryRelationComponent();
         dst.name = name == null ? null : name.copy();
@@ -269,6 +276,13 @@ public class FamilyHistory extends Resource {
       return this.relation;
     }
 
+    // syntactic sugar
+    public FamilyHistoryRelationComponent addRelation() { 
+      FamilyHistoryRelationComponent t = new FamilyHistoryRelationComponent();
+      this.relation.add(t);
+      return t;
+    }
+
       public FamilyHistory copy() {
         FamilyHistory dst = new FamilyHistory();
         dst.subject = subject == null ? null : subject.copy();
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Group.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Group.java
index 51ba364..500d1e8 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Group.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Group.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 import java.util.*;
 
@@ -304,10 +304,24 @@ public class Group extends Resource {
       return this.characteristic;
     }
 
+    // syntactic sugar
+    public GroupCharacteristicComponent addCharacteristic() { 
+      GroupCharacteristicComponent t = new GroupCharacteristicComponent();
+      this.characteristic.add(t);
+      return t;
+    }
+
     public List<ResourceReference> getMember() { 
       return this.member;
     }
 
+    // syntactic sugar
+    public ResourceReference addMember() { 
+      ResourceReference t = new ResourceReference();
+      this.member.add(t);
+      return t;
+    }
+
       public Group copy() {
         Group dst = new Group();
         dst.identifier = identifier == null ? null : identifier.copy();
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/HumanName.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/HumanName.java
index ed2d93f..5047741 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/HumanName.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/HumanName.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 import java.util.*;
 
@@ -203,18 +203,74 @@ public class HumanName extends Type {
       return this.family;
     }
 
+    // syntactic sugar
+    public String_ addFamily() { 
+      String_ t = new String_();
+      this.family.add(t);
+      return t;
+    }
+
+    public String_ addFamilySimple(String value) { 
+      String_ t = new String_();
+      t.setValue(value);
+      this.family.add(t);
+      return t;
+    }
+
     public List<String_> getGiven() { 
       return this.given;
     }
 
+    // syntactic sugar
+    public String_ addGiven() { 
+      String_ t = new String_();
+      this.given.add(t);
+      return t;
+    }
+
+    public String_ addGivenSimple(String value) { 
+      String_ t = new String_();
+      t.setValue(value);
+      this.given.add(t);
+      return t;
+    }
+
     public List<String_> getPrefix() { 
       return this.prefix;
     }
 
+    // syntactic sugar
+    public String_ addPrefix() { 
+      String_ t = new String_();
+      this.prefix.add(t);
+      return t;
+    }
+
+    public String_ addPrefixSimple(String value) { 
+      String_ t = new String_();
+      t.setValue(value);
+      this.prefix.add(t);
+      return t;
+    }
+
     public List<String_> getSuffix() { 
       return this.suffix;
     }
 
+    // syntactic sugar
+    public String_ addSuffix() { 
+      String_ t = new String_();
+      this.suffix.add(t);
+      return t;
+    }
+
+    public String_ addSuffixSimple(String value) { 
+      String_ t = new String_();
+      t.setValue(value);
+      this.suffix.add(t);
+      return t;
+    }
+
     public Period getPeriod() { 
       return this.period;
     }
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Identifier.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Identifier.java
index b86f457..9218ce1 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Identifier.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Identifier.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 /**
  * A technical identifier - identifies some entity uniquely and unambiguously.
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/ImagingStudy.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/ImagingStudy.java
index f527088..5bd85a4 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/ImagingStudy.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/ImagingStudy.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 import java.util.*;
 
@@ -1087,6 +1087,13 @@ public class ImagingStudy extends Resource {
           return this.instance;
         }
 
+    // syntactic sugar
+        public ImagingStudySeriesInstanceComponent addInstance() { 
+          ImagingStudySeriesInstanceComponent t = new ImagingStudySeriesInstanceComponent();
+          this.instance.add(t);
+          return t;
+        }
+
       public ImagingStudySeriesComponent copy(ImagingStudy e) {
         ImagingStudySeriesComponent dst = e.new ImagingStudySeriesComponent();
         dst.number = number == null ? null : number.copy();
@@ -1428,10 +1435,31 @@ public class ImagingStudy extends Resource {
       return this.identifier;
     }
 
+    // syntactic sugar
+    public Identifier addIdentifier() { 
+      Identifier t = new Identifier();
+      this.identifier.add(t);
+      return t;
+    }
+
     public List<Enumeration<ImagingModality>> getModality() { 
       return this.modality;
     }
 
+    // syntactic sugar
+    public Enumeration<ImagingModality> addModality() { 
+      Enumeration<ImagingModality> t = new Enumeration<ImagingModality>();
+      this.modality.add(t);
+      return t;
+    }
+
+    public Enumeration<ImagingModality> addModalitySimple(ImagingModality value) { 
+      Enumeration<ImagingModality> t = new Enumeration<ImagingModality>();
+      t.setValue(value);
+      this.modality.add(t);
+      return t;
+    }
+
     public ResourceReference getReferrer() { 
       return this.referrer;
     }
@@ -1546,6 +1574,13 @@ public class ImagingStudy extends Resource {
       return this.procedure;
     }
 
+    // syntactic sugar
+    public Coding addProcedure() { 
+      Coding t = new Coding();
+      this.procedure.add(t);
+      return t;
+    }
+
     public ResourceReference getInterpreter() { 
       return this.interpreter;
     }
@@ -1580,6 +1615,13 @@ public class ImagingStudy extends Resource {
       return this.series;
     }
 
+    // syntactic sugar
+    public ImagingStudySeriesComponent addSeries() { 
+      ImagingStudySeriesComponent t = new ImagingStudySeriesComponent();
+      this.series.add(t);
+      return t;
+    }
+
       public ImagingStudy copy() {
         ImagingStudy dst = new ImagingStudy();
         dst.dateTime = dateTime == null ? null : dateTime.copy();
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Immunization.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Immunization.java
index 1e2ced2..4e5472b 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Immunization.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Immunization.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 import java.util.*;
 
@@ -53,10 +53,24 @@ public class Immunization extends Resource {
           return this.reason;
         }
 
+    // syntactic sugar
+        public CodeableConcept addReason() { 
+          CodeableConcept t = new CodeableConcept();
+          this.reason.add(t);
+          return t;
+        }
+
         public List<CodeableConcept> getRefusalReason() { 
           return this.refusalReason;
         }
 
+    // syntactic sugar
+        public CodeableConcept addRefusalReason() { 
+          CodeableConcept t = new CodeableConcept();
+          this.refusalReason.add(t);
+          return t;
+        }
+
       public ImmunizationExplanationComponent copy(Immunization e) {
         ImmunizationExplanationComponent dst = e.new ImmunizationExplanationComponent();
         dst.reason = new ArrayList<CodeableConcept>();
@@ -587,6 +601,13 @@ public class Immunization extends Resource {
       return this.reaction;
     }
 
+    // syntactic sugar
+    public ImmunizationReactionComponent addReaction() { 
+      ImmunizationReactionComponent t = new ImmunizationReactionComponent();
+      this.reaction.add(t);
+      return t;
+    }
+
     public ImmunizationVaccinationProtocolComponent getVaccinationProtocol() { 
       return this.vaccinationProtocol;
     }
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/ImmunizationProfile.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/ImmunizationProfile.java
index 2afe820..49b0e77 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/ImmunizationProfile.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/ImmunizationProfile.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 import java.util.*;
 
@@ -188,6 +188,13 @@ public class ImmunizationProfile extends Resource {
           return this.dateCriterion;
         }
 
+    // syntactic sugar
+        public ImmunizationProfileRecommendationDateCriterionComponent addDateCriterion() { 
+          ImmunizationProfileRecommendationDateCriterionComponent t = new ImmunizationProfileRecommendationDateCriterionComponent();
+          this.dateCriterion.add(t);
+          return t;
+        }
+
         public ImmunizationProfileRecommendationProtocolComponent getProtocol() { 
           return this.protocol;
         }
@@ -200,14 +207,35 @@ public class ImmunizationProfile extends Resource {
           return this.supportingImmunization;
         }
 
+    // syntactic sugar
+        public ResourceReference addSupportingImmunization() { 
+          ResourceReference t = new ResourceReference();
+          this.supportingImmunization.add(t);
+          return t;
+        }
+
         public List<ImmunizationProfileRecommendationSupportingAdverseEventReportComponent> getSupportingAdverseEventReport() { 
           return this.supportingAdverseEventReport;
         }
 
+    // syntactic sugar
+        public ImmunizationProfileRecommendationSupportingAdverseEventReportComponent addSupportingAdverseEventReport() { 
+          ImmunizationProfileRecommendationSupportingAdverseEventReportComponent t = new ImmunizationProfileRecommendationSupportingAdverseEventReportComponent();
+          this.supportingAdverseEventReport.add(t);
+          return t;
+        }
+
         public List<ResourceReference> getSupportingPatientObservation() { 
           return this.supportingPatientObservation;
         }
 
+    // syntactic sugar
+        public ResourceReference addSupportingPatientObservation() { 
+          ResourceReference t = new ResourceReference();
+          this.supportingPatientObservation.add(t);
+          return t;
+        }
+
       public ImmunizationProfileRecommendationComponent copy(ImmunizationProfile e) {
         ImmunizationProfileRecommendationComponent dst = e.new ImmunizationProfileRecommendationComponent();
         dst.recommendationDate = recommendationDate == null ? null : recommendationDate.copy();
@@ -414,6 +442,20 @@ public class ImmunizationProfile extends Resource {
           return this.identifier;
         }
 
+    // syntactic sugar
+        public Id addIdentifier() { 
+          Id t = new Id();
+          this.identifier.add(t);
+          return t;
+        }
+
+        public Id addIdentifierSimple(String value) { 
+          Id t = new Id();
+          t.setValue(value);
+          this.identifier.add(t);
+          return t;
+        }
+
         public CodeableConcept getReportType() { 
           return this.reportType;
         }
@@ -470,6 +512,13 @@ public class ImmunizationProfile extends Resource {
           return this.reaction;
         }
 
+    // syntactic sugar
+        public ResourceReference addReaction() { 
+          ResourceReference t = new ResourceReference();
+          this.reaction.add(t);
+          return t;
+        }
+
       public ImmunizationProfileRecommendationSupportingAdverseEventReportComponent copy(ImmunizationProfile e) {
         ImmunizationProfileRecommendationSupportingAdverseEventReportComponent dst = e.new ImmunizationProfileRecommendationSupportingAdverseEventReportComponent();
         dst.identifier = new ArrayList<Id>();
@@ -508,6 +557,13 @@ public class ImmunizationProfile extends Resource {
       return this.recommendation;
     }
 
+    // syntactic sugar
+    public ImmunizationProfileRecommendationComponent addRecommendation() { 
+      ImmunizationProfileRecommendationComponent t = new ImmunizationProfileRecommendationComponent();
+      this.recommendation.add(t);
+      return t;
+    }
+
       public ImmunizationProfile copy() {
         ImmunizationProfile dst = new ImmunizationProfile();
         dst.subject = subject == null ? null : subject.copy();
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/InterestOfCare.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/InterestOfCare.java
index a9f3101..563b8ee 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/InterestOfCare.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/InterestOfCare.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 /**
  * null
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/List_.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/List_.java
index 322c071..217f32c 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/List_.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/List_.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 import java.util.*;
 
@@ -113,6 +113,13 @@ public class List_ extends Resource {
           return this.flag;
         }
 
+    // syntactic sugar
+        public CodeableConcept addFlag() { 
+          CodeableConcept t = new CodeableConcept();
+          this.flag.add(t);
+          return t;
+        }
+
         public Boolean getDeleted() { 
           return this.deleted;
         }
@@ -295,6 +302,13 @@ public class List_ extends Resource {
       return this.entry;
     }
 
+    // syntactic sugar
+    public ListEntryComponent addEntry() { 
+      ListEntryComponent t = new ListEntryComponent();
+      this.entry.add(t);
+      return t;
+    }
+
     public CodeableConcept getEmptyReason() { 
       return this.emptyReason;
     }
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Location.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Location.java
index 1ba392d..868fb25 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Location.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Location.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 import java.util.*;
 
@@ -212,6 +212,13 @@ public class Location extends Resource {
       return this.type;
     }
 
+    // syntactic sugar
+    public CodeableConcept addType() { 
+      CodeableConcept t = new CodeableConcept();
+      this.type.add(t);
+      return t;
+    }
+
     public Contact getTelecom() { 
       return this.telecom;
     }
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Media.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Media.java
index e309818..9f7e1b3 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Media.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Media.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 import java.util.*;
 
@@ -188,6 +188,13 @@ public class Media extends Resource {
       return this.identifier;
     }
 
+    // syntactic sugar
+    public Identifier addIdentifier() { 
+      Identifier t = new Identifier();
+      this.identifier.add(t);
+      return t;
+    }
+
     public DateTime getDateTime() { 
       return this.dateTime;
     }
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Medication.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Medication.java
index faaac64..55e7afd 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Medication.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Medication.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 import java.util.*;
 
@@ -103,6 +103,13 @@ public class Medication extends Resource {
           return this.ingredient;
         }
 
+    // syntactic sugar
+        public MedicationProductIngredientComponent addIngredient() { 
+          MedicationProductIngredientComponent t = new MedicationProductIngredientComponent();
+          this.ingredient.add(t);
+          return t;
+        }
+
       public MedicationProductComponent copy(Medication e) {
         MedicationProductComponent dst = e.new MedicationProductComponent();
         dst.form = form == null ? null : form.copy();
@@ -173,6 +180,13 @@ public class Medication extends Resource {
           return this.content;
         }
 
+    // syntactic sugar
+        public MedicationPackageContentComponent addContent() { 
+          MedicationPackageContentComponent t = new MedicationPackageContentComponent();
+          this.content.add(t);
+          return t;
+        }
+
       public MedicationPackageComponent copy(Medication e) {
         MedicationPackageComponent dst = e.new MedicationPackageComponent();
         dst.container = container == null ? null : container.copy();
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/MedicationAdministration.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/MedicationAdministration.java
index 642e5f5..33188f2 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/MedicationAdministration.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/MedicationAdministration.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 import java.util.*;
 
@@ -280,6 +280,13 @@ Use only if isNegated is set to TRUE.
       return this.identifier;
     }
 
+    // syntactic sugar
+    public Identifier addIdentifier() { 
+      Identifier t = new Identifier();
+      this.identifier.add(t);
+      return t;
+    }
+
     public Enumeration<MedicationAdminStatus> getStatus() { 
       return this.status;
     }
@@ -356,6 +363,13 @@ Use only if isNegated is set to TRUE.
       return this.reasonNotGiven;
     }
 
+    // syntactic sugar
+    public CodeableConcept addReasonNotGiven() { 
+      CodeableConcept t = new CodeableConcept();
+      this.reasonNotGiven.add(t);
+      return t;
+    }
+
     public Period getWhenGiven() { 
       return this.whenGiven;
     }
@@ -376,10 +390,24 @@ Use only if isNegated is set to TRUE.
       return this.administrationDevice;
     }
 
+    // syntactic sugar
+    public ResourceReference addAdministrationDevice() { 
+      ResourceReference t = new ResourceReference();
+      this.administrationDevice.add(t);
+      return t;
+    }
+
     public List<MedicationAdministrationDosageComponent> getDosage() { 
       return this.dosage;
     }
 
+    // syntactic sugar
+    public MedicationAdministrationDosageComponent addDosage() { 
+      MedicationAdministrationDosageComponent t = new MedicationAdministrationDosageComponent();
+      this.dosage.add(t);
+      return t;
+    }
+
       public MedicationAdministration copy() {
         MedicationAdministration dst = new MedicationAdministration();
         dst.identifier = new ArrayList<Identifier>();
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/MedicationDispense.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/MedicationDispense.java
index 62d4481..a1f2674 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/MedicationDispense.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/MedicationDispense.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 import java.util.*;
 
@@ -237,10 +237,24 @@ public class MedicationDispense extends Resource {
           return this.receiver;
         }
 
+    // syntactic sugar
+        public ResourceReference addReceiver() { 
+          ResourceReference t = new ResourceReference();
+          this.receiver.add(t);
+          return t;
+        }
+
         public List<MedicationDispenseDispenseDosageComponent> getDosage() { 
           return this.dosage;
         }
 
+    // syntactic sugar
+        public MedicationDispenseDispenseDosageComponent addDosage() { 
+          MedicationDispenseDispenseDosageComponent t = new MedicationDispenseDispenseDosageComponent();
+          this.dosage.add(t);
+          return t;
+        }
+
       public MedicationDispenseDispenseComponent copy(MedicationDispense e) {
         MedicationDispenseDispenseComponent dst = e.new MedicationDispenseDispenseComponent();
         dst.identifier = identifier == null ? null : identifier.copy();
@@ -412,10 +426,24 @@ Terminologies used often pre-coordinate this term with the route and or form of
           return this.reason;
         }
 
+    // syntactic sugar
+        public CodeableConcept addReason() { 
+          CodeableConcept t = new CodeableConcept();
+          this.reason.add(t);
+          return t;
+        }
+
         public List<ResourceReference> getResponsibleParty() { 
           return this.responsibleParty;
         }
 
+    // syntactic sugar
+        public ResourceReference addResponsibleParty() { 
+          ResourceReference t = new ResourceReference();
+          this.responsibleParty.add(t);
+          return t;
+        }
+
       public MedicationDispenseSubstitutionComponent copy(MedicationDispense e) {
         MedicationDispenseSubstitutionComponent dst = e.new MedicationDispenseSubstitutionComponent();
         dst.type = type == null ? null : type.copy();
@@ -515,10 +543,24 @@ Terminologies used often pre-coordinate this term with the route and or form of
       return this.authorizingPrescription;
     }
 
+    // syntactic sugar
+    public ResourceReference addAuthorizingPrescription() { 
+      ResourceReference t = new ResourceReference();
+      this.authorizingPrescription.add(t);
+      return t;
+    }
+
     public List<MedicationDispenseDispenseComponent> getDispense() { 
       return this.dispense;
     }
 
+    // syntactic sugar
+    public MedicationDispenseDispenseComponent addDispense() { 
+      MedicationDispenseDispenseComponent t = new MedicationDispenseDispenseComponent();
+      this.dispense.add(t);
+      return t;
+    }
+
     public MedicationDispenseSubstitutionComponent getSubstitution() { 
       return this.substitution;
     }
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/MedicationPrescription.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/MedicationPrescription.java
index 4e47eaf..d6574bd 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/MedicationPrescription.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/MedicationPrescription.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 import java.util.*;
 
@@ -453,6 +453,13 @@ In some situations, this attribute may be used instead of quantity to identify t
       return this.identifier;
     }
 
+    // syntactic sugar
+    public Identifier addIdentifier() { 
+      Identifier t = new Identifier();
+      this.identifier.add(t);
+      return t;
+    }
+
     public DateTime getDateWritten() { 
       return this.dateWritten;
     }
@@ -541,6 +548,13 @@ In some situations, this attribute may be used instead of quantity to identify t
       return this.dosageInstruction;
     }
 
+    // syntactic sugar
+    public MedicationPrescriptionDosageInstructionComponent addDosageInstruction() { 
+      MedicationPrescriptionDosageInstructionComponent t = new MedicationPrescriptionDosageInstructionComponent();
+      this.dosageInstruction.add(t);
+      return t;
+    }
+
     public MedicationPrescriptionDispenseComponent getDispense() { 
       return this.dispense;
     }
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/MedicationStatement.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/MedicationStatement.java
index 91af805..ffcc710 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/MedicationStatement.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/MedicationStatement.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 import java.util.*;
 
@@ -192,6 +192,13 @@ Use only if isNegated is set to TRUE.
       return this.identifier;
     }
 
+    // syntactic sugar
+    public Identifier addIdentifier() { 
+      Identifier t = new Identifier();
+      this.identifier.add(t);
+      return t;
+    }
+
     public ResourceReference getPatient() { 
       return this.patient;
     }
@@ -226,6 +233,13 @@ Use only if isNegated is set to TRUE.
       return this.reasonNotGiven;
     }
 
+    // syntactic sugar
+    public CodeableConcept addReasonNotGiven() { 
+      CodeableConcept t = new CodeableConcept();
+      this.reasonNotGiven.add(t);
+      return t;
+    }
+
     public Period getWhenGiven() { 
       return this.whenGiven;
     }
@@ -246,10 +260,24 @@ Use only if isNegated is set to TRUE.
       return this.administrationDevice;
     }
 
+    // syntactic sugar
+    public ResourceReference addAdministrationDevice() { 
+      ResourceReference t = new ResourceReference();
+      this.administrationDevice.add(t);
+      return t;
+    }
+
     public List<MedicationStatementDosageComponent> getDosage() { 
       return this.dosage;
     }
 
+    // syntactic sugar
+    public MedicationStatementDosageComponent addDosage() { 
+      MedicationStatementDosageComponent t = new MedicationStatementDosageComponent();
+      this.dosage.add(t);
+      return t;
+    }
+
       public MedicationStatement copy() {
         MedicationStatement dst = new MedicationStatement();
         dst.identifier = new ArrayList<Identifier>();
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Message.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Message.java
index 2216627..2706ad6 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Message.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Message.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 import java.util.*;
 
@@ -569,6 +569,13 @@ public class Message extends Resource {
       return this.data;
     }
 
+    // syntactic sugar
+    public ResourceReference addData() { 
+      ResourceReference t = new ResourceReference();
+      this.data.add(t);
+      return t;
+    }
+
       public Message copy() {
         Message dst = new Message();
         dst.identifier = identifier == null ? null : identifier.copy();
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Money.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Money.java
index bdfde94..0cf95b5 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Money.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Money.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 /**
  * A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Narrative.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Narrative.java
index 8623043..487488e 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Narrative.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Narrative.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 import org.hl7.fhir.utilities.xhtml.XhtmlNode;
 
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Observation.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Observation.java
index 6108005..8669428 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Observation.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Observation.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 import java.util.*;
 
@@ -497,10 +497,24 @@ public class Observation extends Resource {
       return this.referenceRange;
     }
 
+    // syntactic sugar
+    public ObservationReferenceRangeComponent addReferenceRange() { 
+      ObservationReferenceRangeComponent t = new ObservationReferenceRangeComponent();
+      this.referenceRange.add(t);
+      return t;
+    }
+
     public List<ObservationComponentComponent> getComponent() { 
       return this.component;
     }
 
+    // syntactic sugar
+    public ObservationComponentComponent addComponent() { 
+      ObservationComponentComponent t = new ObservationComponentComponent();
+      this.component.add(t);
+      return t;
+    }
+
       public Observation copy() {
         Observation dst = new Observation();
         dst.name = name == null ? null : name.copy();
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/OperationOutcome.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/OperationOutcome.java
index 7f433d3..92d2cc1 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/OperationOutcome.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/OperationOutcome.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 import java.util.*;
 
@@ -169,6 +169,20 @@ public class OperationOutcome extends Resource {
           return this.location;
         }
 
+    // syntactic sugar
+        public String_ addLocation() { 
+          String_ t = new String_();
+          this.location.add(t);
+          return t;
+        }
+
+        public String_ addLocationSimple(String value) { 
+          String_ t = new String_();
+          t.setValue(value);
+          this.location.add(t);
+          return t;
+        }
+
       public OperationOutcomeIssueComponent copy(OperationOutcome e) {
         OperationOutcomeIssueComponent dst = e.new OperationOutcomeIssueComponent();
         dst.severity = severity == null ? null : severity.copy();
@@ -191,6 +205,13 @@ public class OperationOutcome extends Resource {
       return this.issue;
     }
 
+    // syntactic sugar
+    public OperationOutcomeIssueComponent addIssue() { 
+      OperationOutcomeIssueComponent t = new OperationOutcomeIssueComponent();
+      this.issue.add(t);
+      return t;
+    }
+
       public OperationOutcome copy() {
         OperationOutcome dst = new OperationOutcome();
         dst.issue = new ArrayList<OperationOutcomeIssueComponent>();
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Order.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Order.java
index 43929b9..96b1985 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Order.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Order.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 import java.util.*;
 
@@ -202,6 +202,13 @@ public class Order extends Resource {
       return this.detail;
     }
 
+    // syntactic sugar
+    public ResourceReference addDetail() { 
+      ResourceReference t = new ResourceReference();
+      this.detail.add(t);
+      return t;
+    }
+
       public Order copy() {
         Order dst = new Order();
         dst.date = date == null ? null : date.copy();
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/OrderResponse.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/OrderResponse.java
index 835adea..3b840ac 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/OrderResponse.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/OrderResponse.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 import java.util.*;
 
@@ -266,6 +266,13 @@ public class OrderResponse extends Resource {
       return this.fulfillment;
     }
 
+    // syntactic sugar
+    public ResourceReference addFulfillment() { 
+      ResourceReference t = new ResourceReference();
+      this.fulfillment.add(t);
+      return t;
+    }
+
       public OrderResponse copy() {
         OrderResponse dst = new OrderResponse();
         dst.request = request == null ? null : request.copy();
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Organization.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Organization.java
index 60d4f9c..38e42b7 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Organization.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Organization.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 import java.util.*;
 
@@ -84,6 +84,13 @@ public class Organization extends Resource {
           return this.telecom;
         }
 
+    // syntactic sugar
+        public Contact addTelecom() { 
+          Contact t = new Contact();
+          this.telecom.add(t);
+          return t;
+        }
+
         public Address getAddress() { 
           return this.address;
         }
@@ -158,6 +165,13 @@ public class Organization extends Resource {
       return this.identifier;
     }
 
+    // syntactic sugar
+    public Identifier addIdentifier() { 
+      Identifier t = new Identifier();
+      this.identifier.add(t);
+      return t;
+    }
+
     public String_ getName() { 
       return this.name;
     }
@@ -192,10 +206,24 @@ public class Organization extends Resource {
       return this.telecom;
     }
 
+    // syntactic sugar
+    public Contact addTelecom() { 
+      Contact t = new Contact();
+      this.telecom.add(t);
+      return t;
+    }
+
     public List<Address> getAddress() { 
       return this.address;
     }
 
+    // syntactic sugar
+    public Address addAddress() { 
+      Address t = new Address();
+      this.address.add(t);
+      return t;
+    }
+
     public ResourceReference getPartOf() { 
       return this.partOf;
     }
@@ -208,6 +236,13 @@ public class Organization extends Resource {
       return this.contact;
     }
 
+    // syntactic sugar
+    public OrganizationContactComponent addContact() { 
+      OrganizationContactComponent t = new OrganizationContactComponent();
+      this.contact.add(t);
+      return t;
+    }
+
     public Boolean getActive() { 
       return this.active;
     }
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Other.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Other.java
index 0fcb6b9..21adc92 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Other.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Other.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 /**
  * Other is a conformant for handling resource concepts not yet defined for FHIR or outside HL7's scope of interest.
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Patient.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Patient.java
index 53189fc..3a33291 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Patient.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Patient.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 import java.util.*;
 
@@ -73,6 +73,13 @@ public class Patient extends Resource {
           return this.relationship;
         }
 
+    // syntactic sugar
+        public CodeableConcept addRelationship() { 
+          CodeableConcept t = new CodeableConcept();
+          this.relationship.add(t);
+          return t;
+        }
+
         public HumanName getName() { 
           return this.name;
         }
@@ -85,6 +92,13 @@ public class Patient extends Resource {
           return this.telecom;
         }
 
+    // syntactic sugar
+        public Contact addTelecom() { 
+          Contact t = new Contact();
+          this.telecom.add(t);
+          return t;
+        }
+
         public Address getAddress() { 
           return this.address;
         }
@@ -260,14 +274,35 @@ public class Patient extends Resource {
       return this.identifier;
     }
 
+    // syntactic sugar
+    public Identifier addIdentifier() { 
+      Identifier t = new Identifier();
+      this.identifier.add(t);
+      return t;
+    }
+
     public List<HumanName> getName() { 
       return this.name;
     }
 
+    // syntactic sugar
+    public HumanName addName() { 
+      HumanName t = new HumanName();
+      this.name.add(t);
+      return t;
+    }
+
     public List<Contact> getTelecom() { 
       return this.telecom;
     }
 
+    // syntactic sugar
+    public Contact addTelecom() { 
+      Contact t = new Contact();
+      this.telecom.add(t);
+      return t;
+    }
+
     public CodeableConcept getGender() { 
       return this.gender;
     }
@@ -310,6 +345,13 @@ public class Patient extends Resource {
       return this.address;
     }
 
+    // syntactic sugar
+    public Address addAddress() { 
+      Address t = new Address();
+      this.address.add(t);
+      return t;
+    }
+
     public CodeableConcept getMaritalStatus() { 
       return this.maritalStatus;
     }
@@ -330,10 +372,24 @@ public class Patient extends Resource {
       return this.photo;
     }
 
+    // syntactic sugar
+    public Attachment addPhoto() { 
+      Attachment t = new Attachment();
+      this.photo.add(t);
+      return t;
+    }
+
     public List<ContactComponent> getContact() { 
       return this.contact;
     }
 
+    // syntactic sugar
+    public ContactComponent addContact() { 
+      ContactComponent t = new ContactComponent();
+      this.contact.add(t);
+      return t;
+    }
+
     public AnimalComponent getAnimal() { 
       return this.animal;
     }
@@ -346,6 +402,13 @@ public class Patient extends Resource {
       return this.communication;
     }
 
+    // syntactic sugar
+    public CodeableConcept addCommunication() { 
+      CodeableConcept t = new CodeableConcept();
+      this.communication.add(t);
+      return t;
+    }
+
     public ResourceReference getProvider() { 
       return this.provider;
     }
@@ -358,6 +421,13 @@ public class Patient extends Resource {
       return this.link;
     }
 
+    // syntactic sugar
+    public ResourceReference addLink() { 
+      ResourceReference t = new ResourceReference();
+      this.link.add(t);
+      return t;
+    }
+
     public Boolean getActive() { 
       return this.active;
     }
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Period.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Period.java
index 792e3d5..5b2fb8f 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Period.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Period.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 /**
  * A time period defined by a start and end time.
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Practitioner.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Practitioner.java
index 41a8fea..1e85c54 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Practitioner.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Practitioner.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 import java.util.*;
 
@@ -157,6 +157,13 @@ public class Practitioner extends Resource {
       return this.identifier;
     }
 
+    // syntactic sugar
+    public Identifier addIdentifier() { 
+      Identifier t = new Identifier();
+      this.identifier.add(t);
+      return t;
+    }
+
     public HumanName getName() { 
       return this.name;
     }
@@ -169,6 +176,13 @@ public class Practitioner extends Resource {
       return this.telecom;
     }
 
+    // syntactic sugar
+    public Contact addTelecom() { 
+      Contact t = new Contact();
+      this.telecom.add(t);
+      return t;
+    }
+
     public Address getAddress() { 
       return this.address;
     }
@@ -211,6 +225,13 @@ public class Practitioner extends Resource {
       return this.photo;
     }
 
+    // syntactic sugar
+    public Attachment addPhoto() { 
+      Attachment t = new Attachment();
+      this.photo.add(t);
+      return t;
+    }
+
     public ResourceReference getOrganization() { 
       return this.organization;
     }
@@ -223,10 +244,24 @@ public class Practitioner extends Resource {
       return this.role;
     }
 
+    // syntactic sugar
+    public CodeableConcept addRole() { 
+      CodeableConcept t = new CodeableConcept();
+      this.role.add(t);
+      return t;
+    }
+
     public List<CodeableConcept> getSpecialty() { 
       return this.specialty;
     }
 
+    // syntactic sugar
+    public CodeableConcept addSpecialty() { 
+      CodeableConcept t = new CodeableConcept();
+      this.specialty.add(t);
+      return t;
+    }
+
     public Period getPeriod() { 
       return this.period;
     }
@@ -239,10 +274,24 @@ public class Practitioner extends Resource {
       return this.qualification;
     }
 
+    // syntactic sugar
+    public PractitionerQualificationComponent addQualification() { 
+      PractitionerQualificationComponent t = new PractitionerQualificationComponent();
+      this.qualification.add(t);
+      return t;
+    }
+
     public List<CodeableConcept> getCommunication() { 
       return this.communication;
     }
 
+    // syntactic sugar
+    public CodeableConcept addCommunication() { 
+      CodeableConcept t = new CodeableConcept();
+      this.communication.add(t);
+      return t;
+    }
+
       public Practitioner copy() {
         Practitioner dst = new Practitioner();
         dst.identifier = new ArrayList<Identifier>();
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Procedure.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Procedure.java
index c4c1dc1..aab66e5 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Procedure.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Procedure.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 import java.util.*;
 
@@ -251,6 +251,13 @@ public class Procedure extends Resource {
       return this.bodySite;
     }
 
+    // syntactic sugar
+    public CodeableConcept addBodySite() { 
+      CodeableConcept t = new CodeableConcept();
+      this.bodySite.add(t);
+      return t;
+    }
+
     public String_ getIndication() { 
       return this.indication;
     }
@@ -277,6 +284,13 @@ public class Procedure extends Resource {
       return this.performer;
     }
 
+    // syntactic sugar
+    public ProcedurePerformerComponent addPerformer() { 
+      ProcedurePerformerComponent t = new ProcedurePerformerComponent();
+      this.performer.add(t);
+      return t;
+    }
+
     public Period getDate() { 
       return this.date;
     }
@@ -319,6 +333,13 @@ public class Procedure extends Resource {
       return this.report;
     }
 
+    // syntactic sugar
+    public ResourceReference addReport() { 
+      ResourceReference t = new ResourceReference();
+      this.report.add(t);
+      return t;
+    }
+
     public String_ getComplication() { 
       return this.complication;
     }
@@ -367,6 +388,13 @@ public class Procedure extends Resource {
       return this.relatedItem;
     }
 
+    // syntactic sugar
+    public ProcedureRelatedItemComponent addRelatedItem() { 
+      ProcedureRelatedItemComponent t = new ProcedureRelatedItemComponent();
+      this.relatedItem.add(t);
+      return t;
+    }
+
     public String_ getNotes() { 
       return this.notes;
     }
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Profile.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Profile.java
index 9a2c91b..6ae71a4 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Profile.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Profile.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 import java.util.*;
 
@@ -402,6 +402,13 @@ public class Profile extends Resource {
           return this.element;
         }
 
+    // syntactic sugar
+        public ElementComponent addElement() { 
+          ElementComponent t = new ElementComponent();
+          this.element.add(t);
+          return t;
+        }
+
       public ProfileStructureComponent copy(Profile e) {
         ProfileStructureComponent dst = e.new ProfileStructureComponent();
         dst.type = type == null ? null : type.copy();
@@ -759,6 +766,20 @@ public class Profile extends Resource {
           return this.synonym;
         }
 
+    // syntactic sugar
+        public String_ addSynonym() { 
+          String_ t = new String_();
+          this.synonym.add(t);
+          return t;
+        }
+
+        public String_ addSynonymSimple(String value) { 
+          String_ t = new String_();
+          t.setValue(value);
+          this.synonym.add(t);
+          return t;
+        }
+
         public Integer getMin() { 
           return this.min;
         }
@@ -799,6 +820,13 @@ public class Profile extends Resource {
           return this.type;
         }
 
+    // syntactic sugar
+        public TypeRefComponent addType() { 
+          TypeRefComponent t = new TypeRefComponent();
+          this.type.add(t);
+          return t;
+        }
+
         public String_ getNameReference() { 
           return this.nameReference;
         }
@@ -863,10 +891,31 @@ public class Profile extends Resource {
           return this.condition;
         }
 
+    // syntactic sugar
+        public Id addCondition() { 
+          Id t = new Id();
+          this.condition.add(t);
+          return t;
+        }
+
+        public Id addConditionSimple(String value) { 
+          Id t = new Id();
+          t.setValue(value);
+          this.condition.add(t);
+          return t;
+        }
+
         public List<ElementDefinitionConstraintComponent> getConstraint() { 
           return this.constraint;
         }
 
+    // syntactic sugar
+        public ElementDefinitionConstraintComponent addConstraint() { 
+          ElementDefinitionConstraintComponent t = new ElementDefinitionConstraintComponent();
+          this.constraint.add(t);
+          return t;
+        }
+
         public Boolean getMustSupport() { 
           return this.mustSupport;
         }
@@ -933,6 +982,13 @@ public class Profile extends Resource {
           return this.mapping;
         }
 
+    // syntactic sugar
+        public ElementDefinitionMappingComponent addMapping() { 
+          ElementDefinitionMappingComponent t = new ElementDefinitionMappingComponent();
+          this.mapping.add(t);
+          return t;
+        }
+
       public ElementDefinitionComponent copy(Profile e) {
         ElementDefinitionComponent dst = e.new ElementDefinitionComponent();
         dst.short_ = short_ == null ? null : short_.copy();
@@ -1337,6 +1393,20 @@ public class Profile extends Resource {
           return this.context;
         }
 
+    // syntactic sugar
+        public String_ addContext() { 
+          String_ t = new String_();
+          this.context.add(t);
+          return t;
+        }
+
+        public String_ addContextSimple(String value) { 
+          String_ t = new String_();
+          t.setValue(value);
+          this.context.add(t);
+          return t;
+        }
+
         public ElementDefinitionComponent getDefinition() { 
           return this.definition;
         }
@@ -1646,6 +1716,13 @@ public class Profile extends Resource {
       return this.telecom;
     }
 
+    // syntactic sugar
+    public Contact addTelecom() { 
+      Contact t = new Contact();
+      this.telecom.add(t);
+      return t;
+    }
+
     public String_ getDescription() { 
       return this.description;
     }
@@ -1672,6 +1749,13 @@ public class Profile extends Resource {
       return this.code;
     }
 
+    // syntactic sugar
+    public Coding addCode() { 
+      Coding t = new Coding();
+      this.code.add(t);
+      return t;
+    }
+
     public Enumeration<ResourceProfileStatus> getStatus() { 
       return this.status;
     }
@@ -1760,14 +1844,35 @@ public class Profile extends Resource {
       return this.structure;
     }
 
+    // syntactic sugar
+    public ProfileStructureComponent addStructure() { 
+      ProfileStructureComponent t = new ProfileStructureComponent();
+      this.structure.add(t);
+      return t;
+    }
+
     public List<ProfileExtensionDefnComponent> getExtensionDefn() { 
       return this.extensionDefn;
     }
 
+    // syntactic sugar
+    public ProfileExtensionDefnComponent addExtensionDefn() { 
+      ProfileExtensionDefnComponent t = new ProfileExtensionDefnComponent();
+      this.extensionDefn.add(t);
+      return t;
+    }
+
     public List<ProfileBindingComponent> getBinding() { 
       return this.binding;
     }
 
+    // syntactic sugar
+    public ProfileBindingComponent addBinding() { 
+      ProfileBindingComponent t = new ProfileBindingComponent();
+      this.binding.add(t);
+      return t;
+    }
+
       public Profile copy() {
         Profile dst = new Profile();
         dst.identifier = identifier == null ? null : identifier.copy();
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Provenance.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Provenance.java
index e3bdcd0..f74e2ad 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Provenance.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Provenance.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 import java.util.*;
 
@@ -345,6 +345,13 @@ public class Provenance extends Resource {
       return this.target;
     }
 
+    // syntactic sugar
+    public ResourceReference addTarget() { 
+      ResourceReference t = new ResourceReference();
+      this.target.add(t);
+      return t;
+    }
+
     public Period getPeriod() { 
       return this.period;
     }
@@ -391,14 +398,42 @@ public class Provenance extends Resource {
       return this.policy;
     }
 
+    // syntactic sugar
+    public Uri addPolicy() { 
+      Uri t = new Uri();
+      this.policy.add(t);
+      return t;
+    }
+
+    public Uri addPolicySimple(String value) { 
+      Uri t = new Uri();
+      t.setValue(value);
+      this.policy.add(t);
+      return t;
+    }
+
     public List<ProvenanceAgentComponent> getAgent() { 
       return this.agent;
     }
 
+    // syntactic sugar
+    public ProvenanceAgentComponent addAgent() { 
+      ProvenanceAgentComponent t = new ProvenanceAgentComponent();
+      this.agent.add(t);
+      return t;
+    }
+
     public List<ProvenanceEntityComponent> getEntity() { 
       return this.entity;
     }
 
+    // syntactic sugar
+    public ProvenanceEntityComponent addEntity() { 
+      ProvenanceEntityComponent t = new ProvenanceEntityComponent();
+      this.entity.add(t);
+      return t;
+    }
+
     public String_ getSignature() { 
       return this.signature;
     }
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Quantity.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Quantity.java
index ec6f1f5..701e8e7 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Quantity.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Quantity.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 
 import java.math.*;
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Query.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Query.java
index 9c799d4..8d8922c 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Query.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Query.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 import java.util.*;
 
@@ -204,26 +204,68 @@ public class Query extends Resource {
           return this.parameter;
         }
 
+    // syntactic sugar
+        public Extension addParameter() { 
+          Extension t = new Extension();
+          this.parameter.add(t);
+          return t;
+        }
+
         public List<Extension> getFirst() { 
           return this.first;
         }
 
+    // syntactic sugar
+        public Extension addFirst() { 
+          Extension t = new Extension();
+          this.first.add(t);
+          return t;
+        }
+
         public List<Extension> getPrevious() { 
           return this.previous;
         }
 
+    // syntactic sugar
+        public Extension addPrevious() { 
+          Extension t = new Extension();
+          this.previous.add(t);
+          return t;
+        }
+
         public List<Extension> getNext() { 
           return this.next;
         }
 
+    // syntactic sugar
+        public Extension addNext() { 
+          Extension t = new Extension();
+          this.next.add(t);
+          return t;
+        }
+
         public List<Extension> getLast() { 
           return this.last;
         }
 
+    // syntactic sugar
+        public Extension addLast() { 
+          Extension t = new Extension();
+          this.last.add(t);
+          return t;
+        }
+
         public List<ResourceReference> getReference() { 
           return this.reference;
         }
 
+    // syntactic sugar
+        public ResourceReference addReference() { 
+          ResourceReference t = new ResourceReference();
+          this.reference.add(t);
+          return t;
+        }
+
       public QueryResponseComponent copy(Query e) {
         QueryResponseComponent dst = e.new QueryResponseComponent();
         dst.identifier = identifier == null ? null : identifier.copy();
@@ -289,6 +331,13 @@ public class Query extends Resource {
       return this.parameter;
     }
 
+    // syntactic sugar
+    public Extension addParameter() { 
+      Extension t = new Extension();
+      this.parameter.add(t);
+      return t;
+    }
+
     public QueryResponseComponent getResponse() { 
       return this.response;
     }
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Questionnaire.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Questionnaire.java
index 1467808..08c3def 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Questionnaire.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Questionnaire.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 import java.util.*;
 
@@ -190,6 +190,13 @@ public class Questionnaire extends Resource {
           return this.choice;
         }
 
+    // syntactic sugar
+        public Coding addChoice() { 
+          Coding t = new Coding();
+          this.choice.add(t);
+          return t;
+        }
+
         public Type getOptions() { 
           return this.options;
         }
@@ -339,10 +346,24 @@ public class Questionnaire extends Resource {
           return this.question;
         }
 
+    // syntactic sugar
+        public QuestionComponent addQuestion() { 
+          QuestionComponent t = new QuestionComponent();
+          this.question.add(t);
+          return t;
+        }
+
         public List<GroupComponent> getGroup() { 
           return this.group;
         }
 
+    // syntactic sugar
+        public GroupComponent addGroup() { 
+          GroupComponent t = new GroupComponent();
+          this.group.add(t);
+          return t;
+        }
+
       public GroupComponent copy(Questionnaire e) {
         GroupComponent dst = e.new GroupComponent();
         dst.name = name == null ? null : name.copy();
@@ -498,10 +519,24 @@ public class Questionnaire extends Resource {
       return this.question;
     }
 
+    // syntactic sugar
+    public QuestionComponent addQuestion() { 
+      QuestionComponent t = new QuestionComponent();
+      this.question.add(t);
+      return t;
+    }
+
     public List<GroupComponent> getGroup() { 
       return this.group;
     }
 
+    // syntactic sugar
+    public GroupComponent addGroup() { 
+      GroupComponent t = new GroupComponent();
+      this.group.add(t);
+      return t;
+    }
+
       public Questionnaire copy() {
         Questionnaire dst = new Questionnaire();
         dst.status = status == null ? null : status.copy();
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Range.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Range.java
index 5dc63d6..5e40830 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Range.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Range.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 /**
  * A set of ordered Quantities defined by a low and high limit.
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Ratio.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Ratio.java
index 99ce0a2..f35911c 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Ratio.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Ratio.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 /**
  * A ratio of two Quantity values - a numerator and a denominator.
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/RelatedPerson.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/RelatedPerson.java
index 6383137..c870508 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/RelatedPerson.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/RelatedPerson.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 import java.util.*;
 
@@ -82,6 +82,13 @@ public class RelatedPerson extends Resource {
       return this.identifier;
     }
 
+    // syntactic sugar
+    public Identifier addIdentifier() { 
+      Identifier t = new Identifier();
+      this.identifier.add(t);
+      return t;
+    }
+
     public ResourceReference getPatient() { 
       return this.patient;
     }
@@ -110,6 +117,13 @@ public class RelatedPerson extends Resource {
       return this.telecom;
     }
 
+    // syntactic sugar
+    public Contact addTelecom() { 
+      Contact t = new Contact();
+      this.telecom.add(t);
+      return t;
+    }
+
     public CodeableConcept getGender() { 
       return this.gender;
     }
@@ -130,6 +144,13 @@ public class RelatedPerson extends Resource {
       return this.photo;
     }
 
+    // syntactic sugar
+    public Attachment addPhoto() { 
+      Attachment t = new Attachment();
+      this.photo.add(t);
+      return t;
+    }
+
       public RelatedPerson copy() {
         RelatedPerson dst = new RelatedPerson();
         dst.identifier = new ArrayList<Identifier>();
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/ResourceFactory.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/ResourceFactory.java
index d015ab9..51c4df4 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/ResourceFactory.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/ResourceFactory.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 public class ResourceFactory {
 
@@ -116,10 +116,10 @@ public class ResourceFactory {
             return new FamilyHistory();
         if ("Location".equals(name))
             return new Location();
-        if ("AllergyIntolerance".equals(name))
-            return new AllergyIntolerance();
         if ("Observation".equals(name))
             return new Observation();
+        if ("AllergyIntolerance".equals(name))
+            return new AllergyIntolerance();
         if ("ImmunizationProfile".equals(name))
             return new ImmunizationProfile();
         if ("RelatedPerson".equals(name))
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/ResourceReference.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/ResourceReference.java
index 9d5b307..2c67160 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/ResourceReference.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/ResourceReference.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 /**
  * A reference from one resource to another.
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/ResourceType.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/ResourceType.java
index fda127d..0e0c263 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/ResourceType.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/ResourceType.java
@@ -1,54 +1,54 @@
 package org.hl7.fhir.instance.model;
 
 public enum ResourceType {
+    Provenance,
     Condition,
-    Supply,
-    Organization,
-    Group,
-    ValueSet,
-    Coverage,
-    MedicationDispense,
-    DeviceLog,
-    MedicationPrescription,
-    DeviceCapabilities,
-    MedicationStatement,
-    Questionnaire,
-    OperationOutcome,
-    Conformance,
-    Media,
-    Other,
-    Profile,
-    DocumentReference,
-    Immunization,
-    OrderResponse,
-    ImagingStudy,
-    Practitioner,
     CarePlan,
-    Provenance,
+    Supply,
     Device,
     Query,
     Order,
+    Organization,
     Procedure,
     Substance,
     DiagnosticReport,
+    Group,
+    ValueSet,
     Medication,
+    Coverage,
+    MedicationDispense,
+    MedicationPrescription,
+    DeviceLog,
     MedicationAdministration,
     Encounter,
+    DeviceCapabilities,
     SecurityEvent,
+    MedicationStatement,
     List,
+    Questionnaire,
+    OperationOutcome,
+    Conformance,
     Document,
+    Media,
     Message,
     FamilyHistory,
+    Other,
+    Profile,
     Location,
-    AllergyIntolerance,
     Observation,
+    AllergyIntolerance,
+    DocumentReference,
+    Immunization,
     ImmunizationProfile,
     RelatedPerson,
     Specimen,
+    OrderResponse,
     DeviceObservation,
     Alert,
     Patient,
+    Practitioner,
     AdverseReaction,
+    ImagingStudy,
     DiagnosticOrder,
     Appointment,
     InterestOfCare,
@@ -56,102 +56,102 @@ public enum ResourceType {
 
     public String getPath() {;
       switch (this) {
+    case Provenance:
+      return "provenance";
     case Condition:
       return "condition";
-    case Supply:
-      return "supply";
-    case Organization:
-      return "organization";
-    case Group:
-      return "group";
-    case ValueSet:
-      return "valueset";
-    case Coverage:
-      return "coverage";
-    case MedicationDispense:
-      return "medicationdispense";
-    case DeviceLog:
-      return "devicelog";
-    case MedicationPrescription:
-      return "medicationprescription";
-    case DeviceCapabilities:
-      return "devicecapabilities";
-    case MedicationStatement:
-      return "medicationstatement";
-    case Questionnaire:
-      return "questionnaire";
-    case OperationOutcome:
-      return "operationoutcome";
-    case Conformance:
-      return "conformance";
-    case Media:
-      return "media";
-    case Other:
-      return "other";
-    case Profile:
-      return "profile";
-    case DocumentReference:
-      return "documentreference";
-    case Immunization:
-      return "immunization";
-    case OrderResponse:
-      return "orderresponse";
-    case ImagingStudy:
-      return "imagingstudy";
-    case Practitioner:
-      return "practitioner";
     case CarePlan:
       return "careplan";
-    case Provenance:
-      return "provenance";
+    case Supply:
+      return "supply";
     case Device:
       return "device";
     case Query:
       return "query";
     case Order:
       return "order";
+    case Organization:
+      return "organization";
     case Procedure:
       return "procedure";
     case Substance:
       return "substance";
     case DiagnosticReport:
       return "diagnosticreport";
+    case Group:
+      return "group";
+    case ValueSet:
+      return "valueset";
     case Medication:
       return "medication";
+    case Coverage:
+      return "coverage";
+    case MedicationDispense:
+      return "medicationdispense";
+    case MedicationPrescription:
+      return "medicationprescription";
+    case DeviceLog:
+      return "devicelog";
     case MedicationAdministration:
       return "medicationadministration";
     case Encounter:
       return "encounter";
+    case DeviceCapabilities:
+      return "devicecapabilities";
     case SecurityEvent:
       return "securityevent";
+    case MedicationStatement:
+      return "medicationstatement";
     case List:
       return "list";
+    case Questionnaire:
+      return "questionnaire";
+    case OperationOutcome:
+      return "operationoutcome";
+    case Conformance:
+      return "conformance";
     case Document:
       return "document";
+    case Media:
+      return "media";
     case Message:
       return "message";
     case FamilyHistory:
       return "familyhistory";
+    case Other:
+      return "other";
+    case Profile:
+      return "profile";
     case Location:
       return "location";
-    case AllergyIntolerance:
-      return "allergyintolerance";
     case Observation:
       return "observation";
+    case AllergyIntolerance:
+      return "allergyintolerance";
+    case DocumentReference:
+      return "documentreference";
+    case Immunization:
+      return "immunization";
     case ImmunizationProfile:
       return "immunizationprofile";
     case RelatedPerson:
       return "relatedperson";
     case Specimen:
       return "specimen";
+    case OrderResponse:
+      return "orderresponse";
     case DeviceObservation:
       return "deviceobservation";
     case Alert:
       return "alert";
     case Patient:
       return "patient";
+    case Practitioner:
+      return "practitioner";
     case AdverseReaction:
       return "adversereaction";
+    case ImagingStudy:
+      return "imagingstudy";
     case DiagnosticOrder:
       return "diagnosticorder";
     case Appointment:
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/SampledData.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/SampledData.java
index 64f573e..4738287 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/SampledData.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/SampledData.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 
 import java.math.*;
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Schedule.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Schedule.java
index 66836a6..6028d2a 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Schedule.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Schedule.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 import java.util.*;
 
@@ -409,6 +409,13 @@ public class Schedule extends Type {
       return this.event;
     }
 
+    // syntactic sugar
+    public Period addEvent() { 
+      Period t = new Period();
+      this.event.add(t);
+      return t;
+    }
+
     public ScheduleRepeatComponent getRepeat() { 
       return this.repeat;
     }
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/SecurityEvent.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/SecurityEvent.java
index c8875d8..55d96d9 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/SecurityEvent.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/SecurityEvent.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 import java.util.*;
 
@@ -693,6 +693,13 @@ public class SecurityEvent extends Resource {
           return this.subtype;
         }
 
+    // syntactic sugar
+        public CodeableConcept addSubtype() { 
+          CodeableConcept t = new CodeableConcept();
+          this.subtype.add(t);
+          return t;
+        }
+
         public Enumeration<SecurityEventAction> getAction() { 
           return this.action;
         }
@@ -837,6 +844,13 @@ public class SecurityEvent extends Resource {
           return this.role;
         }
 
+    // syntactic sugar
+        public CodeableConcept addRole() { 
+          CodeableConcept t = new CodeableConcept();
+          this.role.add(t);
+          return t;
+        }
+
         public ResourceReference getReference() { 
           return this.reference;
         }
@@ -1086,6 +1100,13 @@ public class SecurityEvent extends Resource {
           return this.type;
         }
 
+    // syntactic sugar
+        public Coding addType() { 
+          Coding t = new Coding();
+          this.type.add(t);
+          return t;
+        }
+
       public SecurityEventSourceComponent copy(SecurityEvent e) {
         SecurityEventSourceComponent dst = e.new SecurityEventSourceComponent();
         dst.site = site == null ? null : site.copy();
@@ -1282,6 +1303,13 @@ public class SecurityEvent extends Resource {
           return this.detail;
         }
 
+    // syntactic sugar
+        public SecurityEventObjectDetailComponent addDetail() { 
+          SecurityEventObjectDetailComponent t = new SecurityEventObjectDetailComponent();
+          this.detail.add(t);
+          return t;
+        }
+
       public SecurityEventObjectComponent copy(SecurityEvent e) {
         SecurityEventObjectComponent dst = e.new SecurityEventObjectComponent();
         dst.identifier = identifier == null ? null : identifier.copy();
@@ -1388,6 +1416,13 @@ public class SecurityEvent extends Resource {
       return this.participant;
     }
 
+    // syntactic sugar
+    public SecurityEventParticipantComponent addParticipant() { 
+      SecurityEventParticipantComponent t = new SecurityEventParticipantComponent();
+      this.participant.add(t);
+      return t;
+    }
+
     public SecurityEventSourceComponent getSource() { 
       return this.source;
     }
@@ -1400,6 +1435,13 @@ public class SecurityEvent extends Resource {
       return this.object;
     }
 
+    // syntactic sugar
+    public SecurityEventObjectComponent addObject() { 
+      SecurityEventObjectComponent t = new SecurityEventObjectComponent();
+      this.object.add(t);
+      return t;
+    }
+
       public SecurityEvent copy() {
         SecurityEvent dst = new SecurityEvent();
         dst.event = event == null ? null : event.copy(dst);
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Specimen.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Specimen.java
index 7c1b4f8..4343554 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Specimen.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Specimen.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 import java.util.*;
 
@@ -113,6 +113,13 @@ public class Specimen extends Resource {
           return this.target;
         }
 
+    // syntactic sugar
+        public ResourceReference addTarget() { 
+          ResourceReference t = new ResourceReference();
+          this.target.add(t);
+          return t;
+        }
+
       public SpecimenSourceComponent copy(Specimen e) {
         SpecimenSourceComponent dst = e.new SpecimenSourceComponent();
         dst.relationship = relationship == null ? null : relationship.copy();
@@ -167,6 +174,20 @@ public class Specimen extends Resource {
           return this.comment;
         }
 
+    // syntactic sugar
+        public String_ addComment() { 
+          String_ t = new String_();
+          this.comment.add(t);
+          return t;
+        }
+
+        public String_ addCommentSimple(String value) { 
+          String_ t = new String_();
+          t.setValue(value);
+          this.comment.add(t);
+          return t;
+        }
+
         public DateTime getCollectedTime() { 
           return this.collectedTime;
         }
@@ -274,6 +295,13 @@ public class Specimen extends Resource {
           return this.additive;
         }
 
+    // syntactic sugar
+        public ResourceReference addAdditive() { 
+          ResourceReference t = new ResourceReference();
+          this.additive.add(t);
+          return t;
+        }
+
       public SpecimenTreatmentComponent copy(Specimen e) {
         SpecimenTreatmentComponent dst = e.new SpecimenTreatmentComponent();
         dst.description = description == null ? null : description.copy();
@@ -321,6 +349,13 @@ public class Specimen extends Resource {
           return this.identifier;
         }
 
+    // syntactic sugar
+        public Identifier addIdentifier() { 
+          Identifier t = new Identifier();
+          this.identifier.add(t);
+          return t;
+        }
+
         public String_ getDescription() { 
           return this.description;
         }
@@ -455,6 +490,13 @@ public class Specimen extends Resource {
       return this.source;
     }
 
+    // syntactic sugar
+    public SpecimenSourceComponent addSource() { 
+      SpecimenSourceComponent t = new SpecimenSourceComponent();
+      this.source.add(t);
+      return t;
+    }
+
     public ResourceReference getSubject() { 
       return this.subject;
     }
@@ -467,6 +509,13 @@ public class Specimen extends Resource {
       return this.accessionIdentifier;
     }
 
+    // syntactic sugar
+    public Identifier addAccessionIdentifier() { 
+      Identifier t = new Identifier();
+      this.accessionIdentifier.add(t);
+      return t;
+    }
+
     public DateTime getReceivedTime() { 
       return this.receivedTime;
     }
@@ -501,10 +550,24 @@ public class Specimen extends Resource {
       return this.treatment;
     }
 
+    // syntactic sugar
+    public SpecimenTreatmentComponent addTreatment() { 
+      SpecimenTreatmentComponent t = new SpecimenTreatmentComponent();
+      this.treatment.add(t);
+      return t;
+    }
+
     public List<SpecimenContainerComponent> getContainer() { 
       return this.container;
     }
 
+    // syntactic sugar
+    public SpecimenContainerComponent addContainer() { 
+      SpecimenContainerComponent t = new SpecimenContainerComponent();
+      this.container.add(t);
+      return t;
+    }
+
       public Specimen copy() {
         Specimen dst = new Specimen();
         dst.identifier = identifier == null ? null : identifier.copy();
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Substance.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Substance.java
index 388330d..f419796 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Substance.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Substance.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 import java.util.*;
 
@@ -167,6 +167,13 @@ public class Substance extends Resource {
       return this.ingredient;
     }
 
+    // syntactic sugar
+    public ResourceReference addIngredient() { 
+      ResourceReference t = new ResourceReference();
+      this.ingredient.add(t);
+      return t;
+    }
+
     public CodeableConcept getQuantityMode() { 
       return this.quantityMode;
     }
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Supply.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Supply.java
index 14cf6ae..e2a330f 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Supply.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/Supply.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 import java.util.*;
 
@@ -179,6 +179,13 @@ public class Supply extends Resource {
           return this.receiver;
         }
 
+    // syntactic sugar
+        public ResourceReference addReceiver() { 
+          ResourceReference t = new ResourceReference();
+          this.receiver.add(t);
+          return t;
+        }
+
       public SupplyDispenseComponent copy(Supply e) {
         SupplyDispenseComponent dst = e.new SupplyDispenseComponent();
         dst.identifier = identifier == null ? null : identifier.copy();
@@ -286,6 +293,13 @@ public class Supply extends Resource {
       return this.dispense;
     }
 
+    // syntactic sugar
+    public SupplyDispenseComponent addDispense() { 
+      SupplyDispenseComponent t = new SupplyDispenseComponent();
+      this.dispense.add(t);
+      return t;
+    }
+
       public Supply copy() {
         Supply dst = new Supply();
         dst.name = name == null ? null : name.copy();
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/ValueSet.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/ValueSet.java
index 1cb39ea..3d40ad8 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/ValueSet.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/model/ValueSet.java
@@ -29,7 +29,7 @@ package org.hl7.fhir.instance.model;
   
 */
 
-// Generated on Fri, Sep 6, 2013 22:32+1000 for FHIR v0.11
+// Generated on Sat, Sep 21, 2013 16:33-0400 for FHIR v0.11
 
 import java.util.*;
 
@@ -206,6 +206,13 @@ public class ValueSet extends Resource {
           return this.concept;
         }
 
+    // syntactic sugar
+        public ValueSetDefineConceptComponent addConcept() { 
+          ValueSetDefineConceptComponent t = new ValueSetDefineConceptComponent();
+          this.concept.add(t);
+          return t;
+        }
+
       public ValueSetDefineComponent copy(ValueSet e) {
         ValueSetDefineComponent dst = e.new ValueSetDefineComponent();
         dst.system = system == null ? null : system.copy();
@@ -332,6 +339,13 @@ public class ValueSet extends Resource {
           return this.concept;
         }
 
+    // syntactic sugar
+        public ValueSetDefineConceptComponent addConcept() { 
+          ValueSetDefineConceptComponent t = new ValueSetDefineConceptComponent();
+          this.concept.add(t);
+          return t;
+        }
+
       public ValueSetDefineConceptComponent copy(ValueSet e) {
         ValueSetDefineConceptComponent dst = e.new ValueSetDefineConceptComponent();
         dst.code = code == null ? null : code.copy();
@@ -366,14 +380,42 @@ public class ValueSet extends Resource {
           return this.import_;
         }
 
+    // syntactic sugar
+        public Uri addImport() { 
+          Uri t = new Uri();
+          this.import_.add(t);
+          return t;
+        }
+
+        public Uri addImportSimple(String value) { 
+          Uri t = new Uri();
+          t.setValue(value);
+          this.import_.add(t);
+          return t;
+        }
+
         public List<ConceptSetComponent> getInclude() { 
           return this.include;
         }
 
+    // syntactic sugar
+        public ConceptSetComponent addInclude() { 
+          ConceptSetComponent t = new ConceptSetComponent();
+          this.include.add(t);
+          return t;
+        }
+
         public List<ConceptSetComponent> getExclude() { 
           return this.exclude;
         }
 
+    // syntactic sugar
+        public ConceptSetComponent addExclude() { 
+          ConceptSetComponent t = new ConceptSetComponent();
+          this.exclude.add(t);
+          return t;
+        }
+
       public ValueSetComposeComponent copy(ValueSet e) {
         ValueSetComposeComponent dst = e.new ValueSetComposeComponent();
         dst.import_ = new ArrayList<Uri>();
@@ -455,10 +497,31 @@ public class ValueSet extends Resource {
           return this.code;
         }
 
+    // syntactic sugar
+        public Code addCode() { 
+          Code t = new Code();
+          this.code.add(t);
+          return t;
+        }
+
+        public Code addCodeSimple(String value) { 
+          Code t = new Code();
+          t.setValue(value);
+          this.code.add(t);
+          return t;
+        }
+
         public List<ConceptSetFilterComponent> getFilter() { 
           return this.filter;
         }
 
+    // syntactic sugar
+        public ConceptSetFilterComponent addFilter() { 
+          ConceptSetFilterComponent t = new ConceptSetFilterComponent();
+          this.filter.add(t);
+          return t;
+        }
+
       public ConceptSetComponent copy(ValueSet e) {
         ConceptSetComponent dst = e.new ConceptSetComponent();
         dst.system = system == null ? null : system.copy();
@@ -587,6 +650,13 @@ public class ValueSet extends Resource {
           return this.contains;
         }
 
+    // syntactic sugar
+        public ValueSetExpansionContainsComponent addContains() { 
+          ValueSetExpansionContainsComponent t = new ValueSetExpansionContainsComponent();
+          this.contains.add(t);
+          return t;
+        }
+
       public ValueSetExpansionComponent copy(ValueSet e) {
         ValueSetExpansionComponent dst = e.new ValueSetExpansionComponent();
         dst.timestamp = timestamp == null ? null : timestamp.copy();
@@ -689,6 +759,13 @@ public class ValueSet extends Resource {
           return this.contains;
         }
 
+    // syntactic sugar
+        public ValueSetExpansionContainsComponent addContains() { 
+          ValueSetExpansionContainsComponent t = new ValueSetExpansionContainsComponent();
+          this.contains.add(t);
+          return t;
+        }
+
       public ValueSetExpansionContainsComponent copy(ValueSet e) {
         ValueSetExpansionContainsComponent dst = e.new ValueSetExpansionContainsComponent();
         dst.system = system == null ? null : system.copy();
@@ -855,6 +932,13 @@ public class ValueSet extends Resource {
       return this.telecom;
     }
 
+    // syntactic sugar
+    public Contact addTelecom() { 
+      Contact t = new Contact();
+      this.telecom.add(t);
+      return t;
+    }
+
     public String_ getDescription() { 
       return this.description;
     }
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/utils/NarrativeGenerator.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/utils/NarrativeGenerator.java
index 2cd87ce..ae05f0a 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/utils/NarrativeGenerator.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/utils/NarrativeGenerator.java
@@ -1,6 +1,5 @@
 package org.hl7.fhir.instance.utils;
 
-import java.net.URI;
 import java.util.Map;
 
 import org.hl7.fhir.instance.model.AtomEntry;
@@ -12,22 +11,21 @@ import org.hl7.fhir.instance.model.Conformance.ConformanceRestComponent;
 import org.hl7.fhir.instance.model.Conformance.ConformanceRestResourceComponent;
 import org.hl7.fhir.instance.model.Conformance.ConformanceRestResourceOperationComponent;
 import org.hl7.fhir.instance.model.Conformance.RestfulOperation;
-import org.hl7.fhir.instance.model.Element;
 import org.hl7.fhir.instance.model.Extension;
 import org.hl7.fhir.instance.model.Narrative;
+import org.hl7.fhir.instance.model.Narrative.NarrativeStatus;
 import org.hl7.fhir.instance.model.OperationOutcome;
 import org.hl7.fhir.instance.model.OperationOutcome.IssueSeverity;
 import org.hl7.fhir.instance.model.OperationOutcome.OperationOutcomeIssueComponent;
+import org.hl7.fhir.instance.model.Resource;
 import org.hl7.fhir.instance.model.String_;
 import org.hl7.fhir.instance.model.Uri;
 import org.hl7.fhir.instance.model.ValueSet;
-import org.hl7.fhir.instance.model.Narrative.NarrativeStatus;
 import org.hl7.fhir.instance.model.ValueSet.ConceptSetComponent;
 import org.hl7.fhir.instance.model.ValueSet.ConceptSetFilterComponent;
 import org.hl7.fhir.instance.model.ValueSet.FilterOperator;
 import org.hl7.fhir.instance.model.ValueSet.ValueSetDefineConceptComponent;
 import org.hl7.fhir.utilities.Utilities;
-import org.hl7.fhir.utilities.tests.XhtmlParserTests;
 import org.hl7.fhir.utilities.xhtml.NodeType;
 import org.hl7.fhir.utilities.xhtml.XhtmlNode;
 
@@ -42,7 +40,7 @@ public class NarrativeGenerator {
    * @param codeSystems
    * @throws Exception
    */
-  public void generate(ValueSet vs, Map<String, AtomEntry> codeSystems, Map<String, AtomEntry> valueSets) throws Exception {
+  public void generate(ValueSet vs, Map<String, AtomEntry<? extends Resource>> codeSystems, Map<String, AtomEntry<? extends Resource>> valueSets) throws Exception {
     XhtmlNode x = new XhtmlNode();
     x.setNodeType(NodeType.Element);
     x.setName("div");
@@ -142,7 +140,7 @@ public class NarrativeGenerator {
   }
 
 
-  private void generateComposition(XhtmlNode x, ValueSet vs, Map<String, AtomEntry> codeSystems, Map<String, AtomEntry> valueSets) throws Exception {
+  private void generateComposition(XhtmlNode x, ValueSet vs, Map<String, AtomEntry<? extends Resource>> codeSystems, Map<String, AtomEntry<? extends Resource>> valueSets) throws Exception {
     if (vs.getDefine() == null) {
       XhtmlNode h = x.addTag("h2");
       h.addText(vs.getNameSimple());
@@ -172,8 +170,9 @@ public class NarrativeGenerator {
     }
   }
 
-  private void AddVsRef(String value, XhtmlNode li, Map<String, AtomEntry> codeSystems, Map<String, AtomEntry> valueSets) {
-    AtomEntry vs = valueSets.get(value);
+  private void AddVsRef(String value, XhtmlNode li, Map<String, AtomEntry<? extends Resource>> codeSystems, Map<String, AtomEntry<? extends Resource>> valueSets) {
+
+    AtomEntry<? extends Resource> vs = valueSets.get(value);
     if (vs == null) 
       vs = codeSystems.get(value); 
     if (vs == null)
@@ -186,10 +185,10 @@ public class NarrativeGenerator {
     }    
   }
 
-  private void genInclude(XhtmlNode ul, ConceptSetComponent inc, String type, Map<String, AtomEntry> codeSystems) throws Exception {
+  private  void genInclude(XhtmlNode ul, ConceptSetComponent inc, String type, Map<String, AtomEntry<? extends Resource>> codeSystems) throws Exception {
     XhtmlNode li;
     li = ul.addTag("li");
-    AtomEntry e = codeSystems.get(inc.getSystemSimple().toString());
+    AtomEntry<? extends Resource> e = codeSystems.get(inc.getSystemSimple().toString());
     
     if (inc.getCode().size() == 0 && inc.getFilter().size() == 0) { 
       li.addText(type+" all codes defined in ");
@@ -252,7 +251,7 @@ public class NarrativeGenerator {
     return null;
   }
 
-  private ValueSetDefineConceptComponent getConceptForCode(AtomEntry e, String code) {
+  private <T extends Resource> ValueSetDefineConceptComponent getConceptForCode(AtomEntry<T> e, String code) {
     if (e == null)
       return null;
     ValueSet vs = (ValueSet) e.getResource();
@@ -279,7 +278,7 @@ public class NarrativeGenerator {
     return null;
   }
 
-  private void addCsRef(ConceptSetComponent inc, XhtmlNode li, AtomEntry cs) {
+  private  <T extends Resource> void addCsRef(ConceptSetComponent inc, XhtmlNode li, AtomEntry<T> cs) {
     String ref = null;
     if (cs != null) {
       cs.getLinks().get("path");
@@ -294,14 +293,14 @@ public class NarrativeGenerator {
       li.addText(inc.getSystemSimple().toString());
   }
 
-  private String getCsRef(AtomEntry cs) {
+  private  <T extends Resource> String getCsRef(AtomEntry<T> cs) {
     String ref = cs.getLinks().get("path");
     if (Utilities.noString(ref))
       ref = cs.getLinks().get("self");
     return ref.replace("\\", "/");
   }
 
-  private boolean codeExistsInValueSet(AtomEntry cs, String code) {
+  private  <T extends Resource> boolean codeExistsInValueSet(AtomEntry<T> cs, String code) {
     ValueSet vs = (ValueSet) cs.getResource();
     for (ValueSetDefineConceptComponent c : vs.getDefine().getConcept()) {
       if (inConcept(code, c))
diff --git build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/utils/ValueSetExpanderSimple.java build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/utils/ValueSetExpanderSimple.java
index 78b4024..d9efe88 100644
--- build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/utils/ValueSetExpanderSimple.java
+++ build/tools/java/org.hl7.fhir.instance/src/org/hl7/fhir/instance/utils/ValueSetExpanderSimple.java
@@ -1,22 +1,18 @@
 package org.hl7.fhir.instance.utils;
 
-import java.net.URI;
 import java.util.ArrayList;
 import java.util.Calendar;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
-import org.hl7.fhir.instance.model.AtomEntry;
 import org.hl7.fhir.instance.model.Code;
-import org.hl7.fhir.instance.model.String_;
 import org.hl7.fhir.instance.model.Uri;
 import org.hl7.fhir.instance.model.ValueSet;
 import org.hl7.fhir.instance.model.ValueSet.ConceptSetComponent;
 import org.hl7.fhir.instance.model.ValueSet.ConceptSetFilterComponent;
 import org.hl7.fhir.instance.model.ValueSet.FilterOperator;
 import org.hl7.fhir.instance.model.ValueSet.ValueSetComposeComponent;
-import org.hl7.fhir.instance.model.ValueSet.ValueSetDefineComponent;
 import org.hl7.fhir.instance.model.ValueSet.ValueSetDefineConceptComponent;
 import org.hl7.fhir.instance.model.ValueSet.ValueSetExpansionContainsComponent;
 
diff --git build/tools/java/org.hl7.fhir.tools.core/bin/.gitignore build/tools/java/org.hl7.fhir.tools.core/bin/.gitignore
index e69de29..571ee51 100644
--- build/tools/java/org.hl7.fhir.tools.core/bin/.gitignore
+++ build/tools/java/org.hl7.fhir.tools.core/bin/.gitignore
@@ -0,0 +1 @@
+/org
diff --git build/tools/java/org.hl7.fhir.tools.core/src/org/hl7/fhir/definitions/validation/ResourceValidator.java build/tools/java/org.hl7.fhir.tools.core/src/org/hl7/fhir/definitions/validation/ResourceValidator.java
index c32557c..4e6ffe3 100644
--- build/tools/java/org.hl7.fhir.tools.core/src/org/hl7/fhir/definitions/validation/ResourceValidator.java
+++ build/tools/java/org.hl7.fhir.tools.core/src/org/hl7/fhir/definitions/validation/ResourceValidator.java
@@ -48,6 +48,7 @@ import org.hl7.fhir.definitions.model.ResourceDefn;
 import org.hl7.fhir.definitions.model.SearchParameter;
 import org.hl7.fhir.definitions.model.TypeRef;
 import org.hl7.fhir.instance.model.AtomEntry;
+import org.hl7.fhir.instance.model.Resource;
 import org.hl7.fhir.instance.validation.BaseValidator;
 import org.hl7.fhir.instance.validation.ValidationMessage;
 import org.hl7.fhir.instance.validation.ValidationMessage.Source;
@@ -73,16 +74,16 @@ public class ResourceValidator extends BaseValidator {
   private Definitions definitions;
 	private Map<String, Usage> usages = new HashMap<String, Usage>();
   private Element translations;
-  private Map<String, AtomEntry> codeSystems = new HashMap<String, AtomEntry>();
+  private Map<String, AtomEntry<? extends Resource>> codeSystems = new HashMap<String, AtomEntry<? extends Resource>>();
   
   
 
-	public ResourceValidator(Definitions definitions, Element translations, Map<String, AtomEntry> codeSystems) {
+	public ResourceValidator(Definitions definitions, Element translations, Map<String, AtomEntry<? extends Resource>> map) {
 		super();
     source = Source.ResourceValidator;
 		this.definitions = definitions;
 		this.translations = translations;
-		this.codeSystems = codeSystems;
+		this.codeSystems = map;
 	}
 
 	// public void setConceptDomains(List<ConceptDomain> conceptDomains) {
diff --git build/tools/java/org.hl7.fhir.tools.core/src/org/hl7/fhir/tools/publisher/PageProcessor.java build/tools/java/org.hl7.fhir.tools.core/src/org/hl7/fhir/tools/publisher/PageProcessor.java
index 6d8794d..02c9827 100644
--- build/tools/java/org.hl7.fhir.tools.core/src/org/hl7/fhir/tools/publisher/PageProcessor.java
+++ build/tools/java/org.hl7.fhir.tools.core/src/org/hl7/fhir/tools/publisher/PageProcessor.java
@@ -33,7 +33,6 @@ import java.io.FileOutputStream;
 import java.io.OutputStreamWriter;
 import java.lang.management.ManagementFactory;
 import java.lang.management.MemoryMXBean;
-import java.net.URI;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Calendar;
@@ -70,23 +69,16 @@ import org.hl7.fhir.definitions.model.ProfileDefn;
 import org.hl7.fhir.definitions.model.RegisteredProfile;
 import org.hl7.fhir.definitions.model.ResourceDefn;
 import org.hl7.fhir.definitions.model.SearchParameter;
-import org.hl7.fhir.definitions.model.SearchParameter.SearchType;
 import org.hl7.fhir.definitions.model.TypeRef;
 import org.hl7.fhir.definitions.parsers.TypeParser;
 import org.hl7.fhir.instance.formats.JsonComposer;
 import org.hl7.fhir.instance.formats.XmlComposer;
 import org.hl7.fhir.instance.model.AtomEntry;
 import org.hl7.fhir.instance.model.AtomFeed;
-import org.hl7.fhir.instance.model.Contact.ContactSystem;
-import org.hl7.fhir.instance.model.Factory;
-import org.hl7.fhir.instance.model.Narrative;
-import org.hl7.fhir.instance.model.Narrative.NarrativeStatus;
+import org.hl7.fhir.instance.model.Resource;
 import org.hl7.fhir.instance.model.Uri;
 import org.hl7.fhir.instance.model.ValueSet;
 import org.hl7.fhir.instance.model.ValueSet.ConceptSetComponent;
-import org.hl7.fhir.instance.model.ValueSet.ValueSetDefineComponent;
-import org.hl7.fhir.instance.model.ValueSet.ValueSetDefineConceptComponent;
-import org.hl7.fhir.instance.model.ValueSet.ValuesetStatus;
 import org.hl7.fhir.utilities.CSFile;
 import org.hl7.fhir.utilities.CSFileInputStream;
 import org.hl7.fhir.utilities.IniFile;
@@ -94,13 +86,10 @@ import org.hl7.fhir.utilities.Logger;
 import org.hl7.fhir.utilities.TextFile;
 import org.hl7.fhir.utilities.Utilities;
 import org.hl7.fhir.utilities.xhtml.XhtmlComposer;
-import org.hl7.fhir.utilities.xhtml.XhtmlParser;
 import org.hl7.fhir.utilities.xml.XMLUtil;
 import org.hl7.fhir.utilities.xml.XhtmlGenerator;
-import org.hl7.fhir.utilities.xml.XhtmlGeneratorAdorner.XhtmlGeneratorAdornerState;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
-import org.w3c.dom.Node;
 
 public class PageProcessor implements Logger  {
 
@@ -123,8 +112,8 @@ public class PageProcessor implements Logger  {
   private QaTracker qa = new QaTracker();
   private AtomFeed v3Valuesets;
   private AtomFeed v2Valuesets;
-  private Map<String, AtomEntry> codeSystems = new HashMap<String, AtomEntry>();
-  private Map<String, AtomEntry> valueSets = new HashMap<String, AtomEntry>();
+  private Map<String, AtomEntry<? extends Resource>> codeSystems = new HashMap<String, AtomEntry<? extends Resource>>();
+  private Map<String, AtomEntry<? extends Resource>> valueSets = new HashMap<String, AtomEntry<? extends Resource>>();
   private Map<String, String> svgs = new HashMap<String, String>();
   private BreadCrumbManager breadCrumbManager = new BreadCrumbManager();
   
@@ -2629,11 +2618,11 @@ public void log(String content) {
     atom.getEntryList().add(e);
   }
 
-  public Map<String, AtomEntry> getCodeSystems() {
+  public Map<String, AtomEntry<? extends Resource>> getCodeSystems() {
     return codeSystems;
   }
 
-  public Map<String, AtomEntry> getValueSets() {
+  public Map<String, AtomEntry<? extends Resource>> getValueSets() {
     return valueSets;
   }
 
diff --git build/tools/java/org.hl7.fhir.tools.tests/bin/.gitignore build/tools/java/org.hl7.fhir.tools.tests/bin/.gitignore
deleted file mode 100644
index e69de29..0000000
