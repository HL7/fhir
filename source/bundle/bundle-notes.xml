<div xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/1999/xhtml ../../schema/fhir-xhtml.xsd" xmlns="http://www.w3.org/1999/xhtml">

<a name="notes"> </a>
<h3>Notes about Bundle</h3>
<ul>
  <li>Conceptually, a bundle is a list of resources with some context (named links, and status on the entries)</li>
  <li>Since a Bundle is itself a <a href="resource.html">Resource</a> it has the same common metadata as all resources, including profile assertions, tags, and security labels. Note that the values in Bundle.meta.security will generally be influenced by the meta.security values of the entries within the Bundle; see http://hl7.org/fhir/security.html</li>
  <li>Although there are no extensions on the Bundle itself, <code>link</code>, <code>entry</code>, and <code>search</code>/<code>request</code>/<code>response</code> can all have extensions. See <a href="patient.html#match">Patient</a> and <a href="location.html#positional">Location</a> for examples on search</li>
  <li>Both Bundle.link and Bundle.entry.link are defined to support providing additional context when Bundles are used (e.g. <a href="http://en.wikipedia.org/wiki/HATEOAS">HATEOAS</a>). 
    Bundle.entry.link corresponds to links found in the HTTP header if the resource in the entry was <a href="http.html#read">read</a> directly.
    This specification defines some specific uses of Bundle.link for <a href="search.html#conformance">searching</a> and <a href="http.html#paging">paging</a>, but no specific uses for Bundle.entry.link, and no defined function in a transaction - meaning is implementation specific</li>
  <li>Bundles have both .id and .identifier - see <a href="resource.html#id">Resource Identities</a> for further information</li>  
</ul>

<a name="using"></a>

<h3>Using Bundles</h3>

<p>
The content and rules for using a Bundle depend on the <a href="bundle-definitions.html#Bundle.type">type</a> of the bundle. 
Note that all bundle types use resource identity resolution as described below.
</p>

<a name="document"></a>
<h4>Document</h4>

<p>
A document Bundle (type = "document") consists of a series of 
entries, the first of which is a <a href="composition.html">Composition</a>. 
Each entry element SHALL contain a resource. See <a href="documents.html">Documents</a>
for further information.
</p>

<p><a href="document-example-dischargesummary.html">Example</a></p>

<a name="message"></a>
<h4>Message</h4>

<p>
A message Bundle (type = "message") consists of a series of 
entries, the first of which is a <a href="messageheader.html">MessageHeader</a>. 
Each entry element SHALL contain a resource. See <a href="messaging.html">Messaging</a>
for further information.
</p>

<p>Example <a href="message-request-link.html">Request</a> and <a href="message-response-link.html">Response</a></p>

<a name="searchset"></a>
<h4>Search Results</h4>

<p>
A set of search results (type = "searchset") consists of a series of 
0 or more entries. Each entry element SHALL contain a resource. See <a href="http.html#search">Search</a>
for further information.
</p>
<p>
In addition, <a href="bundle-definitions.html#Bundle.total">Bundle.total</a> may be 
used to return the total number of resources that match the search, and that may be 
returned by following the "next" <a href="bundle-definitions.html#Bundle.link">link</a>.
This total MAY be an estimate.  Full iteration of the search set or using 
_total=accurate are the only mechanisms to reliably determine an exact count against 
an arbitrary system.
</p>
<p>
For each entry, a search set can also contain two specific pieces of search related
information:
</p>
<ul>
 <li><a href="bundle-definitions.html#Bundle.entry.search.mode">search.mode</a>: An indication of whether the resource is in the search set because it matched the search criteria or whether it is included because another resource refers to it (e.g. by the <a href="search.html#include">_include</a> parameter)</li>
 <li><a href="bundle-definitions.html#Bundle.entry.search.score">search.score</a>: The server's search ranking score for the entry. Servers are not required to return a ranking score, but if they do, 1 is most relevant, and 0 is least relevant. Note: often, search results are sorted by score, but the client may specify a different sort order (see <a href="search.html#score">Search Relevance</a>)</li>
</ul>

<p><a href="bundle-example.html">Example</a></p>

<a name="history"></a>
<h4>History</h4>

<p>
A change history (type = "history") consists of a series of 
0 or more entries. Each entry element SHALL contain a request element that describes the change
that was made and, if the method is a POST, PATCH, or PUT, a resource that represents the state of the 
resource at the conclusion of the operation. A response element SHALL also be present so that consumers
can access the <code>location</code> header. See <a href="http.html#history">History</a> for further information.
</p>
<p>
In addition, <a href="bundle-definitions.html#Bundle.total">Bundle.total</a> may be 
used to return the total number of resources that are included in the change history, 
including those that may be returned by following the "next" <a href="bundle-definitions.html#Bundle.link">link</a>.
</p>

<a name="transaction"></a>
<h4>Transaction / Batch</h4>

<p>
A transaction (type = "transaction") or batch (type = "batch") consists of a series of 0 or more entries. 
Each entry element SHALL contain a request element has the details of an HTTP operation that informs the system 
processing the transaction what to do with the entry. If the entry method is a 'PUT' or 
'POST', then the entry SHALL contain a resource that becomes the body of the HTTP operation. 
See <a href="http.html#transaction">Transactions</a> for further information. 
</p>

<p><a href="bundle-transaction.html">Example</a></p>

<a name="transaction-response"></a>
<h4>Transaction/Batch Response</h4>

<p>
A transaction response (type = "transaction-response") or batch response (type="batch-response") 
consists of a series of 0 or more entries: 1 for each entry in the transaction or batch it is in response to. 
Each entry element SHALL contain a <code>response</code> element which indicates 
the outcome of the HTTP operation that the server performed for the entry. 
</p>

<p><a href="bundle-response.html">Example</a></p>

<a name="collection"></a>
<h4>Collection</h4>

<p>
A collection (type = "collection") consists of a series of 
0 or more entries. No particular use with respect to the FHIR specification is associated with this Bundle.
Each entry element SHALL contain a resource.
</p>

<p><a href="diagnosticreport-examples.html">Example</a></p>

<a name="subscription-notification"></a>
<h4>Subscription Notification</h4>
[%StandardsStatus trial-use BundleType n/a%]
<p>
A subscription notification (type = "subscription-notification") consists of a series of 
1 or more entries, the first of which is a <a href="subscriptionstatus.html">SubscriptionStatus</a>. There 
may be additional contents, as specified by the subscription responsible for generating the notification. See 
<a href="subscription.html">Subscription</a> for further information.
</p>

<p><a href="subscriptionstatus-examples.html">Examples</a></p>


<a name="bundle-unique"></a>
<h2>Resource URL &amp; Uniqueness rules in a bundle</h2>

<p>
Except for transactions and batches, each entry in a <code>Bundle</code> SHALL have a <code>fullUrl</code> 
which is the identity of the resource in the entry. Note that this is not a versioned reference to the resource, but its 
identity. Where a resource is not assigned a persistent identity that can be used
in the Bundle, a UUID SHALL be used in fullUrl (urn:uuid:...).
</p>
<p>
For transactions and batches, entries MAY omit fullURLs when the entry.request.method = POST, 
and the resource has no identity. Note that even in this case, there may still be a fullURL in a 
transaction on a POST so that relationships between resources can be represented (see <a href="http.html#transaction">Transactions</a>).
</p>
<p>
A given version of a resource SHALL only appear once in each Bundle. There MAY, however, 
be multiple versions of a single resource present in a single bundle. This would be expected
in Bundles of type <code>history</code>, and also might be necessitated by closely tracking
Provenance. 
</p>
<p>
Note that the meaning of an unversioned reference to a resource that appears multiple times 
is potentially ambiguous, though processors may have additional information to help resolve 
this (e.g. change order in a history bundle).
</p>
<p>
When processing batches and transactions, it is at server discretion how to behave if multiple
versions of a single resource are present.
</p>


<a name="resolving"></a>
<a name="references"></a>
<h3>Resolving references in Bundles</h3>

<p>
The <code>Bundle</code> resource is a packaging construct that has one of more entries that 
are other kinds of resources. Those resources themselves have references to other resources - e.g. 
an Observation that refers to a Patient. The referenced resources may also be found
in the Bundle. For example, the system that constructed the Bundle may have included both
the Observation and the Patient. The content of the references between resources doesn't 
change because of the bundle.
</p>
<p>
This section documents a method that resolves references correctly within a bundle. Note
that this method does not define any new semantics; resolution is based on the way
resource identity and resource references work.
</p>
<p>
Applications reading a Bundle should always <a href="references.html#bundle-refs">look for a resource</a> 
by its identity in the bundle first before trying to access it by its URL externally.
</p>
<p>
Note that reference.value in entry resources can use any URI scheme (in addition to using
relative values like "Patient/123").</p>

<p>
How to resolve a reference in a Bundle:
</p>


  <p><b>Resolving urns.</b> If the reference.value is a URN (always absolute) (e.g.
    "urn:uuid:9d1714da-b7e6-455b-bfd2-69ce0ff5fb12")</p>
  <ul>
    <li>Look for an entry with a fullUrl that matches the reference.value</li>
    <li>If one is found, the resolution succeeds (and ends) here</li>
    <li>Otherwise, the resolution fails (and ends) here. The reference has no defined meaning within
      this specification.</li>
  </ul>
  <p><b>Resolving absolute references.</b> If the reference.value is an absolute URL (e.g.,
    "https://fhir.example.org/base/Patient/123",
    "https://fhir.example.org/base/Patient/123/_history/a"):</p>
  <ul>
    <li>If the reference.value is versionless (i.e. it has no "/_history/" path segment - e.g.
      "https://fhir.example.org/base/Patient/123"): <ul>
        <li>Look for an entry with a fullUrl that matches the reference.value</li>
        <li>If one is found, the resolution succeeds (and ends) here</li>
        <li>If more than one is found, the server MAY look for the most recent version (based on
          meta.lastUpdated). If it is able to find exactly one most recent this way, the resolution
          succeeds (and ends) here</li>
      </ul></li>
    <li>If the reference.value includes a "_history" path segment (e.g.
      "https://fhir.example.org/base/Patient/123/_history/a"), split the value into two parts: a
      versionless reference (e.g. "https://fhir.example.org/base/Patient/123" and a version id (e.g.
      "a") <ul>
        <li>Look for an entry with a fullUrl that matches the versionless reference and a
          resource.meta.versionId that matches the reference's version id.</li>
        <li>If a single record is found, the resolution succeeds (and ends) here.</li>
        <li>If multiple records are found, it is an error.</li>
      </ul></li>
    <li>Optionally, attempt to resolve the URI if possible (e.g. by issuing a FHIR [read] on an
      https URL if not version-specific or a [vread] it the URL is version-specific). <ul>
        <li>If found, the resolution succeeds (and ends) here.</li>
        <li>Otherwise, the resolution fails (and ends) here. The reference has no defined meaning
          within this specification.</li>
      </ul></li>
  </ul>
  <p><b>Resolving relative references against a RESTful base.</b> If the reference.value is of the
    form "[type]/[id]" (e.g., "Patient/123"):</p>
  <ul>
    <li>If the Bundle entry containing the reference has a fullUrl matching the RESTful URL regex
      (e.g., "https://fhir.example.org/Observation/456"): <ul>
        <li>Extract the [root] from the Bundle entry's fullUrl and append the relative reference to
          it (e.g., "https://fhir.example.org/" + "Patient/123" -->
          "https://fhir.example.org/Patient/123")</li>
        <li>Follow the steps for Resolving absolute references above</li>
      </ul></li>
    <li>If the Bundle entry containing the reference does not have a fullUrl that matches the
      [RESTful URL regex] and the Bundle is a batch or transaction and the entry.request.method is
      POST, PUT or PATCH <ul>
        <li>take the base URL of the server that is the target of the batch/transaction and append
          the relative reference to it (e.g., transaction is being posted to
          "https://fhir.somewhere.org", then the expanded reference would be
          "https://fhir.somewhere.org/Patient/123"</li>
        <li>Follow the steps for Resolving absolute references above</li>
      </ul>
    </li>
  </ul>
  <p>Resolving conditional references. If the reference occurs in a transaction Bundle and the
    reference.value is a conditional reference (e.g.
    "http://example.org/base/Patient?identifier=1234"):</p>
  <ul>
    <li>Perform the [search] specified in the conditional reference on the server. <ul>
      <li>If the search succeeds with a single resource, the resolution succeeds (and ends)
        here.</li>
      <li>If the search succeeds with multiple matching resources, resolution fails (and ends)
        here. An error SHOULD be raised.</li>
    </ul></li>
    <li>Otherwise the resolution fails (and ends) here.</li>
  </ul>
  <p><b>Resolving other references.</b> If the rules above do not apply, the resolution fails (and
    ends) here. The reference has no defined meaning within this specification.</p>
  <p>Note that the rules for resolving references in contained resources are the same as those for
    resolving references in the resource that contains the contained resource. I.e. the fullUrl of
    the containing resource is used when determining the base for relative references, etc.</p>
  <p>Several portions of this algorithm are dependent on on the presence of Bundle.entry.fullUrl. In
    instances where references might be resolved within a Bundle but entries do not have fullURLs,
    resolution expectations are undefined. For this reason, Bundles where cross-Bundle references
    are present SHOULD always populate Bundle.entry.fullUrl.</p>
  <p>If multiple matches are found (except where explicitly handled in the above algorithm), it is
    ambiguous which is correct. Applications MAY return an error or take some other action as they
    deem appropriate</p>
  
  
<p>
There is an <a href="bundle-references.html">example Bundle that demonstrates</a> these rules.
</p>



<a name="rest"></a>
<h3>Serving Bundles using the RESTful API</h3>

<p>
The Bundle resource type has an end-point like all most other resources. This 
end-point serves the <a href="http.html#interactions">usual interactions</a>.
Bundles are treated as static resources on the /Bundle end-point (i.e. when a
batch, transaction, or message is POSTed to /Bundle, it is stored as is, and 
the content is not processed as batch, transaction, or message - instead, they
are processed like normal resource, with indexing / auditing etc. Performing a 
GET /[base]/Bundle/[location] will return the same resource.
</p>
<p>
The Bundle end point does have two special search parameters - <code>composition</code> and <code>message</code>,
which allow for chained search into the first (special) entries in document and message resources.
</p>
  
<p>
  All elements in Bundle are marked as summary because Bundle resources need to be 
  fully populated when doing a search, and most use cases for retrieving summaries
  of documents or other types of bundles are not well suited by the standard isSummary
  mechanism and are better handles by operations or other mechanisms. 
</p>

[%stu-note dstu%]
If an element marked as 'summary' is itself a nested resource (i.e. type is Resource), 
then the expectation is that the conveyed resource will also be expressed in its summary form.  
The typical place this applies is Bundle.entry.resource. This statement is left as STU because 
there is not yet significant implementer experience on its ramifications.
[%end-note%]

<a name="signature"> </a>
<h3>Signatures</h3>

<p>
The Bundle resource includes a <i>signature</i> element (digital signature) which can be used for 
standards based integrity verification and non-repudiation purposes. The <a href="datatypes.html#Signature">Signature</a> datatype
provides details on use of the <i>signature</i> element. The Signature.type coded value of "Source" should be used
when the signature is for simply proving that the resource content is the same as it was when the resource
was updated or created.
</p>

</div>
