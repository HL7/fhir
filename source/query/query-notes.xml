<div xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/1999/xhtml ../../schema/xhtml1-strict.xsd" xmlns="http://www.w3.org/1999/xhtml">

<p>
Notes about the Query resource:
</p>
<ul>
 <li>The id is usually a UUID (urn:uuid:...). Its sole use is to match request and response logically</li>
 <li>The parameters defined for use with the query the resource are all those described above, with the
 addition of an optional _type parameter, which is the name of the Resource type to limit the search on. Without
 this parameter, the Query effectively becomes a system-wide search.</li>
 <li>The <a href="extensibility.html">extension</a> type is used for parameters. 
 The namespace "http://hl7.org/fhir/query" is used in the Extension.uri value for all the named parameters. 
 Other namespaces may be used for parameters that would/could not appear in the named parameter list in a query url.
 </li>
 <li>Search parameter name, modifiers and chained parameters are added to the Extension uri as a fragment identifier,
 e.g.
<pre>
  &lt;parameter url="http://hl7.org/fhir/query#subject:Patient.name"&gt;
    &lt;valueString value="odile"/&gt;
  &lt;/parameter&gt;
</pre>
</li>
 <li>Parameter names are mandatory, and values are optional. Parameters with missing values are ignored when processing the query</li>
 <li>Parameter names do not need to be unique. The interpretation of multiple search parameters is as described above</li>
 <li>There SHALL be at least one parameter provided with a search - a search request without any parameters cannot be processed</li>
 <li>The search engine SHALL return the parameters used to process the search so the client knows what search was performed</li>
 <li>The links to first, previous, next and last pages in the query result set are provided at the discretion of the server. 
 The client performs a new query using those parameters to retrieve the specified pages. If no parameters are returned, there is no link to follow</li>
 <li>The references to the result set are usually version specific references</li>
 <li>The query resource contains an outcome code. There is no way to represent the code "limited" in a RESTful query where there is no query resource</li>
</ul>

<a name="details"> </a>

<h3>Messaging based Queries</h3>
<p>
In order to initiate a message-based query, a sender sends a message consisting
of a <a href="messaging.html">Message</a> resource, and a <i>Query</i> resource.
The message header resource routes the message to the correct destination, and the 
query contains the parameters of the search that is requested. See 
<a href="query-examples.html">the examples</a> for an example query request 
message.
</p>
<p>
The receiver processes the message, and then returns a message with a message
header, a query with response details, and either an error in the query 
response, or a set of resources that meet the 
query criteria. See <a href="query-examples.html">the examples</a> for an 
example query response message.
</p>
<p>
If the sender wishes to retrieve additional pages from the original search, 
the sender constructs a new query with the parameters specified by the search
processing system, and the cycle starts again.
</p>
<h3>Asynchronous Queries on a REST framework</h3>
<p>
The query resource can be used on a RESTful interface. Multiple interactions patterns are possible. This is a matter of ongoing investigation during the DSTU period.
</p>

<!-- 
<p>
The RESTful framework provides a simple convenient synchronous search based on
request/response as described above. This works well as long it doesn't take 
very long to process a query. As the query processing time gets longer, the
synchronous search starts to take too long to manage in this kind of framework.
In particular, some queries may require human intervention to process correctly,
or may even by direct human-human queries. For these, some asynchronous approach
is required. The messaging solution discussed above can be used asynchronously, 
but it's also possible to implement asynchronous queries in a RESTful environment.
Here's how this would work:
</p>
<ol>
 <li>The requester constructs a <i>Query</i> resource, and performs a create operation to the /query endpoint, and gets the id of the query resource on the server</li>
 <li>The requester constructs an <a href="order.html">Order</a> resource that contains details as appropriate, and which has the query resource as its order detail, and creates that on the server</li>
 <li>A responder picks up the existence of the order resource (either the server acting directly, or a client that is subscribed to the order feed on the server)</li>
 <li>The responder retrieves the query, and then processes it, generating a new query resource that is the response, and then creates that on the server</li>
 <li>The responder constructs an <a href="orderresponse.html">Order Response</a> resource with a reference to the request from Step #2, a code of "complete", and a fulfillment that points to the query response from step #4</li>
 <li>The requester sees the existence of the order response (e.g. by subscribing - watching the updates to <i>Order Response</i> on the server), and retrieves the query response</li>
 <li>The requester retrieves the matching resources by iterating through the matching resources and retrieving them based on their reference.</li>
</ol>
<p>
This pattern is more complex than the other uses, so will be used less. There are 
several variations on this theme. For instance, the requester may choose to perform the
first two operations as a <a href="http.html#transaction">transaction</a>, or the responder may choose to 
inform the requester that processing as commenced with an order response code of "accepted".
</p>
<p>
Note that it's also possible to expose service end points in a SOA fashion
that use the query resource and/or definitions in other ways, though such
usages are not described in FHIR.
</p>
-->

<!--
<p>
The default search is always performed against a particular resource type. 
In the RESTful interface, the resource type is always implicit because the
search is performed on a particular type. When using the query resource,
the resource type is specified by the _resource parameter:
</p>
<pre class="xml">
  &lt;parameter&gt;
    &lt;name value=&quot;_resource&quot;/&gt;
    &lt;value value=&quot;Patient&quot;/&gt;
  &lt;/parameter&gt;
</pre>

-->
<h2>Searching the Searches</h2>
<p>
As a consequence of the general framework, it is possible to 
search on a set of stored queries, though there is no known 
particular use case for doing so.
</p>




</div>

