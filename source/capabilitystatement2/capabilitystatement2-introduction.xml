<div xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/1999/xhtml ../../schema/fhir-xhtml.xsd" xmlns="http://www.w3.org/1999/xhtml">

<div>
<a name="scope"></a>
<h2>Scope and Usage</h2>
<p>
The capability statement is a key part of the overall conformance framework in FHIR. 
It is used as a statement of the features of actual software, or of a set of 
rules for an application to provide. This statement connects to all the detailed 
statements of functionality, such as <a href="structuredefinition.html">StructureDefinitions</a> 
and <a href="valueset.html">ValueSets</a>. This composite statement of application 
capability may be used for system compatibility testing, code generation, or as 
the basis for a conformance assessment. For further information about Conformance 
testing, see <a href="conformance-rules.html">Conformance Rules</a> and 
<a href="profiling.html">Profiling FHIR</a>.
</p>
<p>
Specifically, capability statements are used in one of three ways:
</p>
<table class="grid">
 <tr><td><a href="#instance">Instance</a></td><td><code>implementation</code> must be present and <code>software</code> may be present</td></tr>
 <tr><td><a href="#capability">Capability</a></td><td><code>implementation</code> must be absent, <code>software</code> must be present</td></tr>
 <tr><td><a href="#requirements">Requirements</a></td><td><code>implementation</code> and <code>software</code> must be absent</td></tr>
</table>
<a name="instance"></a>
<h3>Instance: Describe an actual implementation</h3>
<p>
In this scenario, the capability statement describes the capabilities of a deployed 
and configured solution available at a particular access point or set of access points.  
The statement describes exactly how to interface with that deployed solution and thus 
provides for a degree of self-configuration of software solutions.
</p>
<p>
This is the type of 
statement that FHIR restful solutions are expected to make available on invocation of the 
<i>capabilities</i> operation.  It is also the type of statement that forms a basis for
the testing, certification or commissioning of specific software installations.
</p>

<a name="capability"></a>
<h3>Capability: Describe software solution capabilities</h3>
<p>
In this scenario, the capability statement describes generic capabilities of a 
software application or component solution.  The solution might be available for
purchase or other acquisition and might be deployed and configured at any number of
independent sites.  Because it is not dependent on any particular implementation, the
profile cannot provide specific details such as endpoint addresses.  It may also need
to document various configurations in which the application can be set up or describe
the degree of customizability associated with the solution.
</p>
<p>This type of statement may be used as a marketing tool by software and system
developers to formally describe their capabilities.  It can also be used as the basis
for conformance testing of software solutions independent of a particular installation.
</p>

<a name="requirements"></a>
<h3>Requirements: Describe a desired solution</h3>
<p>
In this scenario, the capability statement describes the capabilities of a desired
system.  It might be used as part of an architectural design process to document
needed system capabilities, or might be used as part of an RFP process to formally
document the requirements of a requested solution and to document the criteria by
which proposals will be evaluated.
</p>
<p>
These three types of profiles can be used together.  A requirements statement can 
be compared against the solution statements proffered by respondents to an RFP.  A 
solution statement for a software package forms the starting point for the implementation 
statement associated with a particular installation of that software package.
</p>
<p>
CapabilityStatement2s of type "requirement" describe what capabilities are potentially relevant;
additional documentation or extensions (see <a href="extension-capabilitystatement2-expectation.html">capabilitystatement2-expectation</a>) within the 
CapabilityStatement2 are expected to make more explicit statements of degree of expectation 
associated with each capability.
</p>
</div> 

<div>
<a name="bnc"></a>
<h2>Background and Context</h2>
<!-- 
todo
* add flag for accept unknown content
* Need to add back to the capability statement resource about how creates and ids work for a system
* Need to avoid imposing requirement to keep version history while still supporting versioning as much as possible
 -->
<p>
Capability Statements provide for a degree of automatic configuration and adaptation.
However, capturing absolutely every variation that could impact the interoperability of
two systems, let alone keeping that detailed information up-to-date as systems evolve 
through maintenance and upgrades, is rarely practical. Therefore, capability statements 
should be seen as an interim step.  They provide a degree of automation.  However, they 
also provide a great deal of human-readable content that can minimize the need for direct 
communication between the operators of the systems being configured to interoperate.
</p>

<a name="mixed"></a>
<h3>Supporting Multiple Versions</h3>
<p>
Applications may implement multiple versions. If they do, then a <code>CapabilityStatement2</code> 
describes the system's support for a particular version of FHIR, and the system will have multiple 
statements, one for each version it supports. For further information, see <a href="versioning.html">Managing  
Multiple Versions</a>, and the <a href="capabilitystatement2-operation-versions.html">$versions</a> operation.
</p>


<a name="mixed"></a>
<h3>Mixed Normative Content</h3>
<p>
While the core of the <code>CapabilityStatement2</code> resource is <a href="versions.html#std-process">Normative</a>, 
many of the flags that indicate exactly how the system operates are marked as <code>trial-use</code>. Roughly,
the portions of the resource that correspond to <a href="https://github.com/OAI/OpenAPI-Specification">OpenAPI document</a> elements
are normative. 
</p>
<p>
Applications looking for normative stability should only use the normative parts of the 
resource, and not populate or ignore the portions labelled trial-use. To assist with this, clients 
can ask for the server to return a 'Normative content only' CapabilityStatement2 using the <a href="http.html#capabilities">mode parameter
on <code>/metadata</code></a>.
</p>
<p>
Community discussion regarding more capable, efficient and computable representations of 
an applications capabilities may lead to change to the trial-use parts of this resource or the creation of new 
resources and/or functionality in future versions of this specification.
</p>

</div>



</div>
