<div xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/1999/xhtml ../../schema/fhir-xhtml.xsd" xmlns="http://www.w3.org/1999/xhtml">

<a name="notes"></a>
<h2>Notes</h2>
<ul>
 <li>The value of the <code>system</code>, <code>version</code> and <code>code</code> elements are the same as used by the <a href="datatypes.html#Coding">Coding</a> data type</li>
 <li>When a mapping relationship is characterized as "narrower", some explanation of the scope difference SHALL be provided in the comments</li>
 <li>The concept map is a statement of mapping in a single direction. The existence of a matching mapping in the reverse direction cannot be assumed to exist automatically, but only through human review.</li>
 <li>For simplicity, it is better if is only one <code>element</code> for each source concept. if there is more than one, then just as one <code>element</code> can have multiple targets, 
     multiple occurrences of <code>element</code> with the same <code>element.code</code> simply aggregate their <code>target</code> elements as if there was only one <code>element</code></li>
</ul>

<a name="groups"></a>
<h2>Grouping Mappings</h2>
<p>
The concept mappings in <code>element</code> are arranged into groups that share common source/target systems.
These groups have no semantic significance; they exist to make the representation more concise. Concept maps
may contain more than one group with the same source and target - this would be a less concise representation
but may be useful in order to maintain a fixed order for the concepts that are mapped.
</p>
<p>
Concepts that are labeled as 'unmatched' are considered to be unmatched in the target value set,
irrespective of whether they are contained in a group with a stated target system or not. Groups
that contain no target system may only contained 'unmatched' concepts. There is no difference in
the meaning of an <code>unmatched</code> target whether or not there is a stated target system.
</p>

<a name="dependencies"> </a>
<h2>Mapping Dependencies</h2>

<p>
In the simple case, a mapping is made from one code to another. E.g. from "home address" in one code system to "address - home" in another. 
But in other cases, the mapping is not a simple one to one mapping. A typical example might be mapping between 
a radiology imaging request that has 2 elements: modality, and body site, and another radiology imaging request that 
pre-coordinates both of these into a single code modality+body site. In this case, it is not possible to map from 
one code to another. Instead, the mapping might contain entries like this:
</p>
<table class="grid">
 <tr><td><b>Source Concept</b></td><td><b>DependsOn.property</b></td><td><b>DependsOn Concept</b></td><td><b>Target Concept</b></td></tr>
 <tr><td>X-Ray</td><td>Bodysite</td><td>Chest</td><td>Chest-XRay</td></tr>
</table>
<p>
When attempting to translate the source to the target, an application must also provide a value for the element 
identified in <code>dependsOn.property</code> so that the correct mapping can be performed. To support the reverse
operation, <code>product</code> is the converse, and works in reverse.
</p>
<p>
To see a real example of a mapping with dependencies, check the <a href="conceptmap-example-specimen-type.html">Specimen Type Mapping</a>.
</p>

<a name="unmapped"></a>
<h2>Handling Unmapped Codes</h2>
<p>
If there is no explicit mapping for a code - that is, the engine processing the <code>ConceptMap</code> finds
a group with a matching source system, but not matching element for the code it is translating, processing
proceeds to the <code>unmapped</code> element that specifies what should happen. 
</p>
<p>
The unmapped element can specify one of the following different actions to take if there is no mapping
for a concept:
</p>
<table class="grid">
  <tr><td style="white-space:nowrap">provided</td><td>Use the code source as provided in the <a href="conceptmap-operation-translate.html">$translate</a> request. This is especially useful for translations between versions of the same code system, where only a few codes have changed</td></tr>
  <tr><td style="white-space:nowrap">fixed</td><td>Use the code (and display) explicitly provided in the <code>group.unmapped</code>. This is useful when there's a fall back general code - especially for classifications</td></tr>
  <tr><td style="white-space:nowrap">other-map</td><td>Use the map identified by the canonical URL in <code>url</code>. This is useful when a published concept map needs to be varied for a few specific cases on an institutional bass - the
    institution can create a simple concept that expresses their special cases, and then refer to the general purpose mappings</td></tr>
</table>
<p>
Note that this element is <b>not used</b> when there is an element with a matching code value, and a
relationship value of <a href="codesystem-concept-map-relationship.html#concept-map-relationship-not-related-to">not-related-to</a>.
</p>

<a name="implicit"></a>
<h2>Implicit Code Systems</h2>

<p>
The ConceptMap resource is intended to map between concepts defined in a code system.
It can also be useful to use the ConceptMap resource to define relationships between
concepts defined in other kinds of resources. Here are some common kind of conceptual
maps:
</p>
<ul>
 <li>Between two elements in different <a href="structuredefinition.html">structure definitions</a> (e.g. between CDA and FHIR v2)</li>
 <li>Between a code system and a <a href="medication.html">Medication</a> resource</li>
</ul>
<p>
Though these resources are not explicitly defining code systems, they do define 'concept's that
can still usefully be treated as code systems for the sake of subsetting (e.g. <a href="valueset.html">ValueSet</a>)
and defining relationships (e.g. <code>ConceptMap</code>). See <a href="codesystem.html#implicit">Implicit Code Systems</a> for further information.
</p>
<p>
Note that this is different from <a href="structuremap.html">StructureMap</a> because 
that is intended to define an executional transform between structures, not a conceptual 
model.
</p>


</div>
