<div xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/1999/xhtml ../../schema/fhir-xhtml.xsd" xmlns="http://www.w3.org/1999/xhtml">


<a name="versioning"></a>
<h2>Versioning Code Systems</h2>
<p>
Most code systems evolve over time, due to corrections, clarifications, and changes to approach or underlying knowledge or reality.
If these changes lead to the meanings of existing codes changing significantly, then the interpretation of the code system becomes
version dependent. This significantly complicates implementation based on the code system, to the point where it is not clear that
safety can be assured, so changing the meaning of an existing code SHOULD be avoided whenever possible. It is preferable to assign a new identifier to a code system
when any concepts in it have a significant change in meaning (for example, the German diagnostic classification code system
ICD10GM2009 has a different <i>system</i> to ICD10GM2008), but this also can have substantial impact on implementation, so
is often not practical - for instance, <a href="snomedct.html">SNOMED CT</a> has a complex version release framework, which
may lead to variations in meaning of concepts, but there is only one identifier for SNOMED CT.
</p>
<p>
For this reason, a code system MAY provide a version identifier which can be specified in <code>CodeSystem.version</code>. The version specific identifier SHOULD be
provided whenever there are potentially significant changes in meaning across multiple releases of a code system.
There is no particular format requirement for the version identifier, though HL7 recommends a date-based approach.
</p>
<p>
When the <code>CodeSystem.versionNeeded</code> is 'true', then the version identifier SHALL be used in <a href="datatypes.html#coding">Coding</a> instances that refer to the code system.
</p>
<p>
Where the terminology does not clearly define what string should be used to identify code system versions, the recommendation is to use as the version string the date (expressed in FHIR date format) on which the version of the code system that is being used was officially published.
</p>

<a name="parts"></a>
<h2>Multi-part Code Systems</h2>

<p>
The simple case for a code system is that the entire code system - all the concepts and their codes, designations and properties 
are distributed in a single <code>CodeSystem</code> resource. However, for a variety of reasons, code systems may be distributed 
by the code system authority in a set of fragments, and other authorities may issue additional designations and properties
in supplements.
</p>

<a name="fragments"></a>
<h2>Code System Fragments</h2>
<p>
If the <code>CodeSystem.content</code> value is <code>fragment</code>, then the resource 
describes part of a code system. 
</p>
<p>
Code Systems may be distributed in fragments for the following reasons:
</p>
<ul>
 <li>Different IP distribution rules for different parts of the code system</li>
 <li>Special purpose modules for specific purposes</li>
 <li>Distribution of proposed content for evaluation</li>
</ul>
<p>
The following rules apply to code system fragments:
</p>
<ul>
 <li>All fragments SHALL have the same CodeSystem.url</li>
 <li>Fragments can only be published by the code system authority, or according to a process defined by the authority, if they have defined one</li>
 <li>Fragments cannot contain any codes, concepts or properties that would not be found in a complete representation of the code system, if one exists</li>
 <li>Publishing a code system in multiple fragments can create confusion for terminology servers and terminology service consumers. 
   Code System authorities that publish fragments should be careful and communicate their intent clearly</li>
</ul>

<a name="supplements"></a>
<h2>Code System Supplements</h2>
<p>
If the <code>CodeSystem.content</code> value is <code>supplement</code>, then the resource 
describes a code system supplement. The following rules apply to code system supplements:
</p>
<ul>
 <li>The <code>CodeSystem.supplements</code> element SHALL have a value, which is the URL of the code system being supplemented</li>
 <li>The <code>CodeSystem.url</code> for a supplement SHALL never appear in a <a href="datatypes.html#Coding">Coding.system</a></li>
 <li>The <code>CodeSystem.url</code> for a supplement must be under the control of the authority creating or publishing the supplement 
   (e.g. not in the same space as the code system being supplemented, unless the supplement is being issued by the same authority as the original code system</li>
 <li> A codesystem supplement cannot define any new CodeSystem.concept.code. i.e.: all CodeSystem.concept.code in the supplement must be a code from the "supplemented" code system</li>
</ul>
<p>
If a supplement needs to define new concepts/codes to use as property values, it can be paired with a new (possibly contained)
Code System and use the <code>Coding</code> type for the property values.
</p> 
<div class="warning"><blockquote><p>
The impact of Code System supplements on <a href="valueset-operation-expand.html">value set expansion</a> - and therefore <a href="valueset-operation-validate-code.html">value set validation</a> - is 
subject to ongoing experimentation and implementation testing, and further clarification and additional
rules might be proposed in future versions of this specification.
</p></blockquote></div>

<a name="designations"></a>
<h2>Display, Definition and Designations</h2>
<p>
Concepts have both a <code>display</code> and a <code>definition</code>. The display is a short text that represents the meaning
of the concept to human users, while the definition is a more formal statement of the meaning of the concept, which 
is often longer. All concepts SHOULD have a <code>display</code> and a <code>definition</code>, though it is not 
mandatory because there are many cases where no such properties are provided, in spite of their utility and importance
for clear and safe communication.
</p>
<p>
In addition to the display and definition, a concept can have one or more <code>designation</code> elements. 
The display is equivalent to a special designation with an implied <code>designation.use</code> meaning "primary code/designation" 
and a language equal to the <a href="resource.html#language">Resource Language</a>. The designations can provide additional displays
for other language, as well as designations for other purposes. 
When using concepts, applications use the <code>display</code> and <code>designation</code> unless the language or usage in context provides a reason
to use one of the designations.
</p>

<a name="properties"></a>
<h2>Properties</h2>
<p>
Each code system can define one or more concept properties. Each concept defined by the code system
may have one or more values for each concept property defined by the code system. Typical uses for
properties include:
</p>
<ul>
 <li>Tracking administrative status (inactive, deprecation date)</li>
 <li>Providing additional statements about the meaning of the concept</li>
 <li>Defining structured relationships with other concepts in the code system</li>
 <li>Assigning scoring values to the concepts</li>
</ul>
<p>
Properties are identified by their master URI (<code>CodeSystem.property.uri</code>), and then, by their
code (<code>CodeSystem.property.code</code>), which is used both internally within the
code system resource (<code>CodeSystem.concept.property.code</code>) and also externally, in the following
places:
</p>
<ul>
 <li><a href="conceptmap-definitions.html#ConceptMap.group.element.target.dependsOn.property">ConceptMap</a>: <code>ConceptMap.element.target.dependsOn.property</code> and <code>ConceptMap.element.target.product.property</code></li>
 <li><a href="valueset-definitions.html#ValueSet.compose.include.filter.property">ValueSet</a>: <code>ValueSet.compose.include.filter.property</code> can refer to any defined code system property</li>
 <li><a href="codesystem-operations.html#lookup">$lookup operation</a>: In <code>Parameters.parameter.name</code> when returning information about a code</li>
 <li><a href="conceptmap-operations.html#translate">$translate operation</a>: In <code>Parameters.parameter.part.name</code> for dependencies and products</li>
 <li><a href="codesystem-operations.html#compose">$find-matches operation</a>: In <code>Parameters.parameter.name</code> when providing codes, and in <code>Parameters.parameter.name</code> when asking for codes</li>
</ul>
<p>
Properties are defined using the following elements:
</p>
<table class="grid">
 <tr>
  <td><b>Name</b></td>
  <td><b>Details</b></td>
  <td><b>Description</b></td>
 </tr>
 <tr>
  <td>code</td>
  <td><a href="datatypes.html#code">code</a></td>
  <td>Used to identify the property, in the places shown in the list immediately above this table</td>
 </tr>
 <tr>
  <td>uri</td>
  <td>optional <a href="datatypes.html#code">uri</a></td>
  <td>Reference to the formal meaning of the property. One possible source of meaning is the <a href="codesystem-concept-properties.html">Concept Properties</a> code system.
    This part of the definition is optional, but is recommended to provide an additional level of definitional consistency</td>
 </tr>
 <tr>
  <td>description</td>
  <td>optional <a href="datatypes.html#code">string</a></td>
  <td>A description of the property- why it is defined, and how its value might be used</td>
 </tr>
 <tr>
  <td>type</td>
  <td>code | Coding | string | integer | boolean | dateTime</td>
  <td>The type of the property value. Properties of type "code" contain a code defined by the code system (e.g. a reference to another defined concept)</td>
 </tr>
</table>
<p>
Note that properties provide a common view of concept relationships that is common across all code systems.
Some code systems define properties with more sophistication, such as groups of properties, or subsumption
relationships between properties (e.g. SNOMED CT). Servers providing support for these code systems will need
to know full details about the underlying relationships in order to provide the correct information about
concepts and their properties, but this information does not surface in the resources or operations defined
by the FHIR specification.
</p>


<a name="status"></a>
<h2>Concept Status</h2>

<p>
Many Code Systems have a 'status' associated with the concept. This may categorize the concept
as:
</p>
<ul>
  <li>Experimental - provided for trial, but may be removed in the future</li>
  <li>Active - in normal use</li>
  <li>Deprecated - planned to be removed from use</li>
  <li>Retired - still present for historical reasons, but no longer allowed to be used</li>
</ul>
<p>
There is wide variation in the life cycles supported by the different code systems, the words
they use to describe the various status values they use, and some code systems have additional
status values. HL7 uses Active and Retired. In addition to these status codes, concepts may also 
be labeled as "Abstract' (not to be used in some circumstances), and have dates associated
with their retirement or deprecation. All this information is represented as properties of
the concepts. In order to assist with consistency between code systems, the following
basic property URIs are defined:
</p>
<table class="grid">
 <tr><td>http://hl7.org/fhir/concept-properties#status : code</td><td>A property that indicates the status of the concept. If the property is identified by this URL, then it SHALL use at least these status values (where appropriate):
     <ul>
      <li>active - the concept is for normal use</li>
      <li>experimental - provided for trial, but may be removed in the future</li>
      <li>deprecated - planned to be removed from use</li>
      <li>retired - still present for historical reasons, but no longer allowed to be used</li>
     </ul>
     The HL7 defined code systems (whether defined by the FHIR project, the V3 framework, or the V2 standard) 
     all use this property to define their status. HL7 uses "active" (and considers this the default status), and deprecated and retired (= inactive)
   </td></tr>
 <tr><td>http://hl7.org/fhir/concept-properties#retirementDate : date</td><td>Date Concept was retired</td></tr>
 <tr><td>http://hl7.org/fhir/concept-properties#deprecationDate : date</td><td>Date Concept was deprecated</td></tr>
 <tr><td>http://hl7.org/fhir/concept-properties#parent : code</td><td>An immediate parent of the concept in the hierarchy</td></tr>
 <tr><td>http://hl7.org/fhir/concept-properties#child : code</td><td>An immediate child of the concept in the hierarchy</td></tr>
 <tr><td>http://hl7.org/fhir/concept-properties#notSelectable : boolean</td><td>This concept is a grouping concept and not intended to be used in
   the normal use of the code system (though may be used for filters etc.). This is also known as 'Abstract'</td></tr>
</table>
<p>
The parent and child properties are used when performing concept lookup (using the <a href="codesystem-operations.html#lookup">$lookup</a> operation),
and when using properties to indicate parent/child relationships (see below).
</p>

<a name="hierarchy"></a>
<h2>Concept Hierarchy</h2>
<p>
Code systems may be presented hierarchically, using nested <code>concept</code> elements, where the 
hierarchy has a defined meaning specified in <a href="codesystem-definitions.html#CodeSystem.hierarchyMeaning"><code>hierarchyMeaning</code></a>.
The code system hierarchy is a single tree, where concepts have only one parent. 
</p>
<p>
Some code systems define concepts that have multiple parents.
If a code system has concepts like this (typically, concepts that are subsumed by 
more than one other concept), the code system SHOULD NOT be represented using the hierarchy structure in 
the Code System resource, and the relationships between concepts should be defined using <a href="#properties">properties</a>. 
If the hierarchy is used, implementers SHALL use a property to indicate 
additional parents that are not represented in the structural (nested concepts) hierarchy. 
</p>
<p>
Operations based on the codeSystem resource SHALL have the same result whether or not the 
relationships are represented explicitly as properties or implicitly using the CodeSystem 
resource hierarchy.
</p>

<a name="subsumption"></a>
<h2>Subsumption Testing</h2>
<p>
The words 'subsume', 'subsumes', 'subsumed' and 'subsumption' are defined in relation to the type of hierarchy  (i.e. the value of <a href="codesystem-definitions.html#CodeSystem.hierarchyMeaning">CodeSystem.hierarchyMeaning</a>) identified for the code system that is being represented by the CodeSystem resource.
Concept A is considered to be subsumed by Concept B if it comes under Concept B in the hierarchy, or if a parent/child relationship is declared in the properties, and the hierarchyMeaning is "is-a").
</p>
<p>
Where a CodeSystem does not declare its hierarchy meaning directly, then the code system documentation must be consulted manually to determine how subsumption is determined. If there is no definition, none of the subsumption based features can be used with the code system.
</p>
<p>
Subsumption based logic arises explicitly or implicitly in the following places in the FHIR specification:
</p>
<ul>
 <li><a href="codesystem-operations.html#subsumes">CodeSystem $subsumes operation</a></li>
 <li><a href="codesystem-operations.html#lookup">CodeSystem $lookup operation</a></li>
 <li><a href="conceptmap-operations.html#closure">ConceptMap $closure operation</a></li>
 <li><a href="search.html#subsumption">Search by subsumption</a></li>
 <li><a href="valueset-operations.html#expand">ValueSet $expand operation</a></li>
 <li><a href="valueset-operations.html#validate-code">ValueSet $validate-code operation</a></li>
</ul>

<a name="filters"></a>
<h2>Filters</h2>

<p>
The following filters are defined for all code systems:
</p>
<table class="grid">
 <tr>
   <th>Property Name</th>
   <th>Operation</th>
   <th>Value</th>
   <th>Definition</th>
   <th>Notes</th>
 </tr>
 <tr>
   <td>[property]</td>
   <td>=</td>
   <td>[string]</td>
   <td>Includes all codes that have a property value equal to the specified string, where [property] is the code for any <a href="#properties">defined property</a></td>
   <td></td>
 </tr>
 <tr>
   <td>[property]</td>
   <td>in</td>
   <td>[string,string...]</td>
   <td>Includes all codes that have a property value equal to one of the specified strings, where [property] is the code for any <a href="#properties">defined property</a></td>
   <td>The values cannot include ",", since it is being used as a delimiter</td>
 </tr>
</table>

<div class="draft-content">
<p>
This <a href="versions.html#std-process" title="Draft Content" class="draft-flag">draft section</a> about the relationships between rich terminologies and structured content is still undergoing review.
</p>

<a name="implicit"></a>
<a name="detailed-metadata"></a>
<h2>Implicit Code Systems</h2>
<p>
Some other parts of the FHIR infrastructure define set of concepts that may also be treated 
as code systems. This is most useful when mapping between systems using <a href="conceptmap.html">Concept Maps</a>,
but might also be useful for other code system related functionality (e.g. subsetting use <a href="valueset.html">Value Sets</a>). 
This table summarizes how to treat these items as a terminology:
</p>
<table class="grid">
 <tr>
  <td><a href="structuredefinition.html">StructureDefinition</a></td>
  <td>The <code>StructureDefinition.url</code> (canonical URL) is the <code>system</code>. Each <code>.snapshot.element.id</code> in the snapshot is a code in the code system</td>
 </tr>
 <tr>
  <td><a href="questionnaire.html">Questionnaire</a></td>
  <td>The <code>Questionnaire.url</code> (canonical URL) is the <code>system</code>. Each <code>.item.linkId</code> in the snapshot is a code in the code system. Items with no linkId cannot be addressed</td>
 </tr>
 <tr>
  <td><a href="medication.html">Medication</a></td>
  <td>Medication resources are a bit different, since they don't have a canonical URL, and
    there are not multiple items in a resource. So to refer to a medication resource, the system
    is [base]/Medication, where base is the server address. The <a href="resource.html#id">Logical Id</a> of the resource is the code</td>
 </tr>
</table>
<p>
The use of these implicit code systems is not yet well tested, so this section remains
informative.
</p>

<p>
For medications, the relationship between the code system and the medication resource
is complex. Many medication related code systems (e.g. RxNorm, DM+D, AMT, etc.) represent 
more complex information than just code, display name and code system.  These often 
contain information about the content of the medication
A similar principle applies to observation definitions, which overlap significantly
with LOINC and other related code systems, which contain a set of observation 
definitions, that contain methods, units, etc. Other similar arrangements exist
for <a href="location.html">Location</a> and many other kinds of resource.
</p>
<p>
In FHIR, these are handled by splitting the concept into two distinct parts - the
Terminology, (<b>Code System</b> &amp; <code>ValueSet</code> resources) is used to
manage the codes, display names and relationships.  A separate "detail"
resource (e.g., <a href="medication.html">Medication resource instances</a> for RxNorm code details,
<a href="observationdefinition.html">ObservationDefinition</a> instances for LOINC code details, or 
<a href="location.html">Location</a>, etc.) is used to convey detailed
information (dose form &amp; strength, allowed data type or permitted values, address &amp;
hours of operation, etc.).  One "detail" resource instance is created for each code.
</p>
<p>
This division accomplishes several things:
</p>
<ul>
<li>It allows generic systems that support terminology management to perform standard
terminology operations on code systems dealing with complex structures - code lookup,
validation, subsumption testing, mapping and translation.</li>
<li>It allows information to be exchanged about individual medications, data elements
and locations.  Codes can't be retrieved individually in FHIR - it is necessary to
retrieve the entire resource.  By packaging the detailed information in separate
resources, independent retrieval and update is possible.</li>
<li>It supports use-cases for sharing medication, location, observation type and
similar information in circumstances where the code may be unknown, unavailable or
occasionally non-existent (e.g., custom compounds, non-registered locations).  Having
a distinct resource supports these capabilities, which would not be possible using
<code>CodeSystem</code>/<code>ValueSet</code>.</li>
</ul>
<p>
Note that this division in FHIR does not imply that a similar division is required in
the internal representation used by systems exposing a FHIR interface.  Similarly, some
systems may choose to only expose or maintain one aspect of such information types (i.e.
only the discrete resource instances or only the value set).
</p>
<p>
The linkage between the "detail" resource and the Terminology resources is accomplished via the
<code>code</code> element (or equivalent) on the detail resource.  As well, the "name" or
"title" on the detail resource generally corresponds with the display name on the matching
code.  Most detail resources will also have an "identifier" element.  This <i>can</i> be
set to the same value and namespace as the code, but if the only identifier a resource has
is its defining code, it may be better to omit the identifier entirely. .
</p>
</div>

</div>
