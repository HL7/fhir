<div xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/1999/xhtml ../../schema/fhir-xhtml.xsd" xmlns="http://www.w3.org/1999/xhtml">

<a name="renaming"></a>
<a name="code"></a>
<h3>OperationDefinition Code</h3>

<p>
Operations are invoked by their code, not their name. The name is descriptive, for code generation, 
e.g. <code>ValueSetExpansion</code>, while the code is what is used in a URL e.g. 
<code>http://example.org/fhir/ValueSet/$expand</code>. When defining operations, 
for maximum compatibility, use only lowercase ASCII characters. 
See <a href="https://confluence.hl7.org/display/FHIR/Guide+to+Designing+Resources#GuidetoDesigningResources-NamingRules&amp;Guidelines">Naming Rules &amp; Guidelines</a> 
for the internal HL7 rules around codes, which are useful additional advice for all implementers.
</p>
<p>
It is possible for two different organizations to create different operation definitions with the same code or, perhaps more likely, to define equivalent operations that have the 
same code but incompatible approaches in their parameter lists. Note that HL7 will never define multiple operations with the same code. 
</p>
<p>
It is also possible, though unlikely, that a server will be required to support both of 
these operations. If this is the case, the server is able to do this by giving one of them
a new code and referring to it by definition in the capability statement. To illustrate
this, assume that two different organizations, "orgA" and "orgB", both define an operation 
with a code <code>dothis</code>, and the definitions are incompatible. OrgA publishes its operation
definition at http://orga.com/fhir/dothis.xml, and OrgB publishes its operation at 
http://fhir.orgb.com/meta/OperationDefinition/dothis. The server is able to implement
both. Its capability statement will say:
</p>
<pre class="xml">
&lt;CapabilityStatement xmlns=&quot;http://hl7.org/fhir&quot;&gt;
  &lt;!-- snip --&gt;
  &lt;rest&gt;
    &lt;!-- snip --&gt;
    &lt;operation&gt;
      &lt;name value=&quot;dothis&quot;/&gt;
      &lt;definition&gt;
        &lt;reference value=&quot;http://orga.com/fhir/dothis.xml&quot;/&gt;
      &lt;/definition&gt;
    &lt;/operation&gt;
    &lt;operation&gt;
      &lt;name value=&quot;dothis2&quot;/&gt;
      &lt;definition&gt;
        &lt;reference value=&quot;http://fhir.orgb.com/meta/OperationDefinition/dothis&quot;/&gt;
      &lt;/definition&gt;
    &lt;/operation&gt;
    &lt;!-- snip --&gt;
  &lt;/rest&gt;
  &lt;!-- snip --&gt;
&lt;/CapabilityStatement&gt;
</pre>
<p>
If a general purpose cross server client is looking for the implementation of the 
http://fhir.orgb.com/meta/OperationDefinition/dothis operation and wants to be
robust against this name clash problem, instead of simply executing the $dothis
operation, it can look at the server's <a href="capabilitystatement.html">CapabilityStatement</a> for the underlying
definition URI and then execute with the name given in the capability statement.
</p>
<p>
Note to implementers: it would be more consistent if CapabilityStatement.rest.operation.name was 
actually called "code", since it relates to OperationDefinition.code, but the confusion this 
can cause wasn't appreciated until the resource was normative. 
</p>

<a name="desc"></a>
<h3>Describing Operation Parameters</h3>

<p>
There are 2 ways to describe the input and output parameters for
an operation:
</p>
<ul>
  <li>Using <code>OperationDefinition.parameter</code> to describe the parameters</li>
  <li>Using <code>OperationDefinition.inputProfile</code> and <code>OperationDefinition.outputProfile</code></li>
</ul>
<p>
The parameters is a simple list of possible parameters, along with cardinalities and types.
The profiles allow a rich set of validation rules etc. to be provided. OperationDefinitions SHALL
always define the parameters using <code>OperationDefinition.parameter</code> in the resource,
and MAY also provide profiles for the parameters. If present, the profiles SHALL NOT disagree
with the parameters defined for the operation.
</p>
<p>
As an example, consider an operation that defines 3 parameters, 2 in and 1 out:
</p>
<table class="grid">
<tr><td colspan="6"><b>In Parameters:</b></td></tr>
<tr><td><b>Name</b></td><td><b>Cardinality</b></td><td><b>Type</b></td><td><b>Binding</b></td><td><b>Profile</b></td><td><b>Documentation</b></td></tr>
<tr><td>a</td><td>0..1</td><td><a href="datatypes.html#integer">integer</a></td><td></td><td></td><td><p>An integer parameter</p></td></tr>
<tr><td>b</td><td>0..1</td><td><a href="patient.html">Patient</a></td><td></td><td></td><td><p>A patient parameter</p></td></tr>
<tr><td colspan="6"><b>Out Parameters:</b></td></tr>
<tr><td><b>Name</b></td><td><b>Cardinality</b></td><td><b>Type</b></td><td><b>Binding</b></td><td><b>Profile</b></td><td><b>Documentation</b></td></tr>
<tr><td>c</td><td>1..1</td><td><a href="datatypes.html#decimal">decimal</a></td><td></td><td></td><td><p>A result parameter</p></td></tr>
</table>
<p>
In addition to specifying the operation parameters directly, an operation definition can also provide a profile:
</p>
<pre class="json">
 "inputProfile" : "http://example.org/StructureDefinition/op.x.in.profile"
</pre>
<p>
This profile would describe a parameters resource with 2 parameters (using slicing), with the same details as the table above.
The operation definition would still list the parameters directly to save applications consuming the definition (e.g. to produce
an <a href="https://github.com/OAI/OpenAPI-Specification">OpenAPI document</a>) from parsing and interpreting the profile.
</p>

<a name="exec"></a>
<h3>Executing Operations</h3>
<p>
OperationDefinitions with <code>kind = operation</code> are executed as defined in the <a href="operations.html">Operations Framework</a>.
</p>

<a name="equeries"></a>
<h3>Executing Named Queries</h3>

<p>
Named queries (OperationDefinitions with <code>kind = query</code>) are executed by performing a <a href="search.html">search</a> 
with the value of the search parameter "_query" set to the name provided in the definition. 
</p>
<p>
If the named query is to be performed over the RESTful API, all the parameters must be simple search parameters,
so that they can be represented directly in the URL without tricky encoding issues. Named queries always 
return a bundle containing a set of resources, so all the out parameters must be 
resources, not data types.
</p>
 
<p>
For named queries, all the standard search parameters are automatically in scope (though servers do not need to support them unless explicitly documented).
</p>

<a name="passing"></a>
<h3>Passing Resources to Operations</h3> 

<p>
There are two ways to pass resources to an operation: directly or by reference.
The definition of an operation distinguishes between these two, since they have very different behaviors and consequences.
</p>
<p>
As an example, take the <a href="valueset-operation-expand.html">ValueSet.$expand operation</a>.  
This operation takes a valueset as a direct parameter. The type of the parameter is 
defined as 'ValueSet'. In a <a href="parameters.html">Parameters</a> resource, it would be represented like this:
</p>
<pre class="xml">
  &lt;parameter&gt;
    &lt;name value=&quot;valueset&quot;/&gt;
    &lt;resource&gt;
      &lt;ValueSet&gt;
        &lt;!-- Valueset contents --&gt;
      &lt;/ValueSet&gt;
    &lt;/resource&gt;
  &lt;/parameter&gt; 
</pre>
<p>
or, in JSON:
</p>
<pre>
 "parameter": [
    {
      "name": "valueset",
      "resource": {
        "resourceType": "ValueSet",
        // Valueset contents 
      }
    }
  ]
</pre>

<p>
Other parameters are passed by reference. For example, the <a href="chargeitemdefinition-operation-apply.html">ChargeItemDefinition.$apply operation</a> 
takes two parameters of type Reference - one to the chargeItem and the other to the account.  The type of the 
parameters is <code>Reference(Charge)</code> and <code>Reference(Account)</code>, respectively.  The expectation is that the server performing the 
operation will resolve those references as part of the operation execution.
In a parameters resource, the chargeItem parameter would be represented like this: 
</p>
<pre class="xml">
  &lt;parameter&gt;
    &lt;name value=&quot;chargeItem&quot;/&gt;
    &lt;valueReference&gt;
      &lt;reference value="ChargeItem/123"/&gt;
    &lt;/valueReference&gt;
  &lt;/parameter&gt; 
</pre>
<p>
or, in JSON:
</p>
<pre>
 "parameter": [
    {
      "name": "chargeItem",
      "valueReference" : {
        "reference" : "ChargeItem/123"
      }
    }
  ]
</pre>

<p>
Some operations can take either form; in that case, two distinct parameters
must be defined: one for a resource as a direct parameter, and one for a reference.
</p>

<a name="system"></a>
<h3>Determining System Compatibility</h3>

<p>
A client can determine the compatibility of the server by processing its capability
statement and ensuring that the server implements the specific operation definitions and parameters required by the client. The client can then report a useful error to the user rather than allowing mystifying operational errors to occur.
</p>
<p>
However, there are fundamental limitations to this approach because 
there are many aspects of these operations that are not (or cannot be) defined 
in a formal fashion using OperationDefinition, for example, co-occurrence constraints among parameters.
</p>
<p>
In the same sense, a 3rd party tool can examine a server's CapabilityStatement and a client's definition of an acceptable server to determine whether
those two system are interoperable or not.
</p>

<a name="forms"></a>
<h3>Dynamically Generating Forms</h3>

<p>
Finally, it is possible to generate user interface forms automatically from 
the OperationDefinition. The documentation in the <code>OperationDefinition.description</code> 
and <code>OperationDefinition.parameter.documentation</code> should be sufficient to allow
moderately technical users to guess at the correct content of the form.
For this reason, highly technical documentation should go in <code>OperationDefinition.comment</code>.
</p>
<p>
It is anticipated that this would be used to automate development processes, rather than to generate end-user forms: such users will usually need more support than can be offered in a generated form.
</p>

<a name="defined"></a>
<h3>Operations defined as part of this Specification</h3>

<%operationslist%>


</div>
