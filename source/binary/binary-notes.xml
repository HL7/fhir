<div xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/1999/xhtml ../../schema/fhir-xhtml.xsd" xmlns="http://www.w3.org/1999/xhtml">

<a name="content"></a>
<h3>Content Optionality</h3>
<p>
<code>Binary.data</code> is optional because it is excluded when 
a summary view of the Binary resource is requested (this can be useful
when the binary resource is part of a wider request e.g. a search 
_include). 
</p>
<p>
Otherwise, the data is not optional; a binary resource without
any specified content it not useful.
</p>

<a name="rest"></a>
<h3>Serving Binary Resources using the RESTful API</h3>
<p>
Binary resources behave slightly differently from all other resources on the RESTful API:
</p>
<ul>
 <li>When a read request is made with a FHIR type in the Accept header (e.g. "<code>application/fhir+xml</code>" or 
   "<code>application/fhir+json</code>") the Binary resource is returned in the requested FHIR format. 
   This applies even when the binary data itself has a FHIR mime type</li>
 <li>The Binary resource is always represented in the native FHIR format when wrapped in a <a href="bundle.html">Bundle</a></li>
 <li>The <a href="http.html#format">_format</a> overrides the accept header and SHALL be interpreted as using the standard FHIR mime types, even if the more generic mime types are given as a value.</li>	 
<li>When the read request has some other type in the <code>Accept</code> header, then the content should be returned with the content type stated in the resource in the <code>Content-Type</code> header. 
  E.g. if the content type in the resource is "application/pdf", then the content should be returned as a PDF directly. The _summary parameter does not apply in this case.
</li>
<li>due to the way the web infrastructure works, it is not possible to make blanket
rules about the relationship between the "Accept" field in the HTTP request, and the 
return type, which is why there is no hard rule about this. However, the intent is that
unless specifically requested, the FHIR XML/JSON representation is not returned
</li>
<li> 
When binary data is written to the server (<a href="http.html#create">create</a>/<a href="http.html#update">update</a> - POST or PUT),
the data is accepted as is and treated as the content of a <code>Binary</code>, including when the content type is "application/fhir+xml" or "application/fhir+json",
except for the special case where the content is actually a <code>Binary</code> resource.
</li>
<li> 
Note that when client requests a Binary resource using a generic mime type (application/xml, text/xml, or application/json),
the server SHOULD return the content directly if the content-type format matches the 
requested mime type (e.g. if the Accept header is application/json, and the <code>contentType</code>
is vnd.xacml+json). However, servers might not always be able to interpret mime types correctly,
and clients SHOULD be prepared to receive either format.
</li>
</ul>

<p>
Note that in the native binary representation, the normal resource <a href="resource.html#meta">metadata</a> 
is not available directly, though some of it is replicated in the HTTP response headers. Specifically, the
following elements of the resource have matching HTTP Headers:
</p>
<ul>
 <li><b>Binary.meta.lastUpdated</b>: <code>Last-Modified</code></li>
 <li><b>Binary.meta.versionId</b>: <code>ETag header</code></li>
 <li><b>Binary.contentType</b>: <code>Content-Type</code></li>
 <li><b>Binary.securityContext</b>: <code>X-Security-Context</code> - this is a FHIR specific extension, primarily intended to 
 allow the security context for a Binary resource to be specified when it is posted in native form. The content of the header 
 is <code>Binary.securityContext.reference</code></li>
</ul>
<p>
</p>

<a name="rest"></a>
<h3>Security Considerations</h3>
<p>
Binary resources are not constrained to any list of safe content types (content types without active elements such as scripting or executable code), 
and therefore can be of any content type and encoding. Therefore, extra care needs to be taken to validate the content of the Binary resource against 
malicious or malformed content. For more details see <a href="security.html#narrative">Security of Narrative</a>, since the security issues are similar.
</p>
<p>
Very often, the content of a <code>Binary</code> resource is sensitive, and the server should apply 
appropriate access control to the content. When the server itself generates the content, 
it implicitly knows what access control to apply. When the client provides the binary to 
the server itself, it uses the <code>securityContext</code> element (or the matching 
<code>X-Security-Context</code> HTTP header) to inform the server that the Binary resource 
should be treated as if it was the other resource. Typically, the other resource is a 
DocumentReference or similar resource that refers directly to the Binary resource, but 
that is not mandatory.
</p>

<a name="read"></a>
<h3>Read</h3>

<p>
This specification makes no rules concerning advanced read functionality for 
the Binary resource, such as:
</p>
<ul>
 <li>retrieving byte ranges</li>
 <li>Finding the size of the content before retrieving it (though this can be achieved using a <a href="http.html#head">HEAD request</a>)</li>
 <li>Stream content from Binary? </li>
 <li>generating content dynamically on the fly</li>
</ul>
<p>
Servers are free to support these features, but they are not required.
</p>


<a name="search"></a>
<h3>Search</h3>

<p>
This specification does not support searching on Binary resources.
</p>

<a name="patch"></a>
<h3>Patch</h3>

<p>
The semantics of a PATCH operation on a Binary resource are not currently specified.
</p>

</div>
