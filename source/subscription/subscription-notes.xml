<div xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/1999/xhtml ../../schema/fhir-xhtml.xsd" xmlns="http://www.w3.org/1999/xhtml">

<a name="safety"></a>
<h2>Safety and Security</h2>
<p>
Executing each of the channels documented below involves the server
sending a communication that will reveal information about the
client and server relationship, and, if the entire resource is
sent, administrative or clinical information that may be quite
sensitive and/or protected under law. Servers are responsible
for ensuring appropriate security is employed for each channel.
The subscription resource does not address these concerns
directly - it is assumed that these are administered by other
configuration processes. For instance, a server might maintain a whitelist
of acceptable servers for the rest-create/rest-update methods.
</p>
<p>
Emails should generally be secured using some technique such as
<a href="http://directproject.org/">Direct</a>.
</p>

<a name="errors"></a>
<h2>Managing Subscriptions and Errors</h2>
<p>
A subscription is defined by creating the Subscription resource on the server.
When the subscription is created by the client, it sets the status
to "requested". After POSTing the subscription, the client parses
the Location header and saves the new Subscription's logical id for
use in subsequent operations.
</p>
<p>
When the server receives a subscription, it SHOULD check that it is prepared
to accept/process the subscription. If it is, it sets the subscription
to <code>active</code>, and then process it like a normal
<a href="http.html#create">create</a>. If it isn't, it SHOULD return an
error with an <a href="operationoutcome.html">OperationOutcome</a>
instead of processing the <code>create</code>.
</p>
<p>
The criteria are subject to the same limitations as the client that
created it, such as access to patient compartments etc. Note that the
subscription remains active after the client access tokens expire.
</p>
<p>
Once the server has activated the subscription, it sets the status
to "active" (note: the server can do this as it accepts the resource
if it wants).
</p>
<p>
An appropriately authorized client can use search and/or history operations
to see what subscriptions are currently active on the server.
Once the subscription is no longer desired, the client deletes the
subscription from the server.
</p>
<p>
The server may retry the notification a fixed number of times and/or
refer errors to its own alert logs. If the notification fails, the
server should set the status to 'error' and mark the error in the
resource. If the notification succeeds, the server should update
the status to "active again. If a subscription fails consistently
a server may choose set the subscription status to off and stop
trying to send notifications.
</p>
<p>
If a subscription nominates a fixed end date, the server automatically
deletes it at the specified time.
</p>

<a name="tracking"></a>
<h2>Tracking Subscription Notifications</h2>

<p>
Applications that wish to track whether notifications have been sent
for particular resources (or versions of resources) can look at the
AuditEvent resources. For example:
</p>
<pre>
GET [base]/AuditEvent?entity=Patient/103
</pre>
<p>
This search will return all the AuditEvent resources that are about
<a href="patient.html">Patient</a> <code>103</code>. At this time
there is no deterministic way to tell say which of those AuditEvent
resources come from the subscription sub-system that actually handles
notifications. This is planned to be resolved in a future version
of this specification. In the mean time, servers are encouraged to
create AuditEvent records when performing notifications and document
how clients can identify the relevant records when searching.
</p>
<p>
In addition, servers might also create <a href="communication.html">Communication</a>
resources for some of the notifications that are sent in response to a
subscription, such as when sending emails.
</p>
<pre>
GET [base]/Communication?based-on=Subscription/103
</pre>
<p>
This returns a list of communications sent by a subscription. TODO:
search on payload....
</p>

<a name="channels"></a>
<h2>Channels</h2>

<h3>REST Hook</h3>

<p>
This uses an empty POST message to alert the subscriber that new results
are available - POST to [base]/Subscription:
</p>
<pre class="json" fragment="Subscription">
{
  "resourceType": "Subscription",
  "topic": {
   "reference": "Topic/admission"
 },
 "filterBy": [
   {
     "name": "patient",
     "value": "Patient/123"
   }
 ],
  "channel": {
    "type": "rest-hook",
    "endpoint": "https://biliwatch.com/customers/mount-auburn-miu/on-result",
    "header": "Authorization: Bearer secret-token-abc-123"
  }
}
</pre>
<p>
When a topic meets the criteria, the server
sends a POST request with no body to the nominated URL.
</p>
<p>
When the subscriber receives a POST to <code>https://biliwatch.com/customers/mount-auburn-miu/on-result</code>,
it queries the server, appending <code>&amp;_since=:last</code> (where :last is
replaced by the time at which the client last checked). In this way it can fetch all new
relevant <a href="observation.html">Observations</a>.
</p>
<p>
Since  is missing, the data in the resources is only available through
the REST API, which helps consolidate authorization and authentication logic. The
server must append the headers, if any are given, to the POST request that it
makes to the client.
</p>
<p>
Alternatively, the server can be asked to send the entire
resource to a nominated FHIR end-point. This is usually appropriate
for defining routing rules within a managed eco-system such
as a healthcare institution.
</p>

<pre class="json" fragment="Subscription">
{  
   "channel":{
      "type":"rest-hook",
      "endpoint":"https://internal.acme.com/research/saturn",
      "payload":{
         "contentType":"application/fhir+json",
         "content":"full-resource"
      }
   }
}
</pre>

<p>
This requests that a server forward a copy of any
matching resource in JSON format to the nominated server as an <a href="http.html#update">Update
operation</a> using the nominated URL as the <a href="http.html#root">service base</a>.
In order to execute this channel, the server must know how
to authenticate appropriately with the destination
server. This can be done by the subscription resource providing
an authentication header for the server to use, or
alternatively, the server may be specifically configured to be able to use
the nominated server.
</p>



<h3>WebSockets</h3>

<p>
Subscriptions are created exclusively via the FHIR REST API. But notifications need not
occur via REST. Indeed, some subscribers may be unable to expose an outward-facing HTTP
server to receive triggered notifications. For example, a pure client-side Web app or
mobile app may want to subscribe to a data feed without polling using the /history
operation. This can be accomplished using a websocket notification channel.
</p>

<p>
A client can declare its intention to listen via Web Sockets:
</p>

<pre class="json" fragment="Subscription">
{
  "channel": {
    "type": "websocket"
  }
}
</pre>

<p>
The subscriber would then initiate a Web Socket connection to the server, at a URL advertised
in the FHIR server's Capability statement (subscriptions/webSocketUrl (todo)). A simple
protocol is used to listen for notifications:
</p>
<ul>
 <li>Client connects a secure Web Socket to the server's webSocketUrl (see <a href="extension-capabilitystatement-websocket.html">websocket extension</a> in the server's <a href="capabilitystatement.html">CapabilityStatement</a>).</li>
 <li>Client authenticates to server using a server-specified Web socket protocol (e.g. OAuth bearer token presentation).</li>
 <li>Client sends a bind :id message over the socket (using the logical id of the subscription). For example, the client might issue: bind 123).</li>
 <li>Server responds with a "bound :id" message to acknowledge.</li>
 <li>Server sends a "ping :id" message to notify the client each time a new result is available</li>
</ul>

<h3>Email/SMS</h3>

<p>
A client can register for its user to receive notifications by
email:
</p>

<pre class="json" fragment="Subscription">
{
  "channel": {
    "type": "email",
    "endpoint": "mailto:mt-auburn-results@direct.biliwatch.com",
    "header": "A new bilirubin result has arrived!"
  }
}
</pre>

<p>
The server would send a new message for each matching resource.
The body of the email may be empty, or it may contain a reference
to the search or the matching resource. It is at the discretion
of the server as to how much information to provide.
<code>Subscription.channel.header</code> sets the subject of the
email. The email should be secured appropriately, such as using Direct, as specified
by the rules of the applicable jurisdictions.
</p>


<p>SMS works very similarly:</p>

<pre class="json" fragment="Subscription">
{
  "channel": {
    "type": "sms",
    "endpoint": "tel:+1555-345-5555"
  }
}
</pre>

<p>
Note: SMS messages are extremely limited in size, so <code>channel.payload</code> will
usually be omitted (signifying that no payload is to be sent). The recipient may be
human, but this is not always the case. Irrespective of size, most servers will refuse
to send payloads in SMS for security reasons, and may refuse to send emails unless
encrypted.
</p>
<p>
A mime/type of text/plain can be useful for email and sms along with some extension
describing how to convert resources to a text representation. This specification
may provide supporting infrastructure for this in the future.
</p>

<h3>Messaging</h3>

<p>
A client can register for its user to receive notifications by <a href="messaging.html">messaging</a>:
</p>

<pre class="json" fragment="Subscription">
{
  "channel": {
    "type": "message",
    "endpoint": "http://ehr.example.org/fhir/$process-message"
  }
}
</pre>
<p>
For each matching resource, a server will send a message to the
nominated end-point. Most servers will require that the end-point
is white-listed prior to allowing these kinds of subscriptions.
</p>
<a name="dstu"></a>
<blockquote class="stu-note"><p><b>STU Note:</b>
The details of the message - mainly the event code - are
still to be resolved during the trial use period.
</p>
<p>
Feedback is welcome <a href="http://hl7.org/fhir-issues">here</a>.
</p></blockquote>


</div>
