<div xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/1999/xhtml ../../schema/fhir-xhtml.xsd" xmlns="http://www.w3.org/1999/xhtml">


<!--
Grahame's OAuth extensions:
<extension url="http://www.healthintersections.com.au/fhir/extensions#oauth-reference">
  <extension url="http://www.healthintersections.com.au/fhir/extensions#oauth-name">
    <valueUri value="Google+"/>
  </extension>
  <extension url="http://www.healthintersections.com.au/fhir/extensions#oauth-img-src">
    <valueUri value="https://developers.google.com/accounts/images/sign-in-with-google.png"/>
  </extension>
  <extension url="http://www.healthintersections.com.au/fhir/extensions#oauth-link">
    <valueUri value="https://accounts.google.com/o/oauth2/auth?client_id=..."/>
  </extension>
</extension>
-->
<a name="oo"></a>

<a name="using"></a>
<h2>Using Operation Outcome Resources</h2>
<p>
On the RESTful interface, operation outcome resources are only relevant when a level of computable detail is required that is more granular than that provided by the HTTP response codes.
This granularity could include:
</p>
<ul>
<li>more detail about the location of an issue</li>
<li>the ability to identify multiple distinct issues</li>
<li>provision of finer error codes that connect to known business failure states</li>
</ul>
<p>
Operation outcomes returned SHOULD be in alignment with the HTTP response code.  For example, if the HTTP code indicates a failure (300+), at least
one of the issues should have a severity of "error", indicating the reason for the failure.
</p>
<p>
Operation outcomes must include at least one issue. See the <a href="operationoutcome-example-allok.html">All OK </a> example for a template for an operation that returns no errors.
</p>
<a name="loc"></a>
<h2>Using the Expression</h2>
<p>
Each issue in an operation outcome SHOULD have an expression that
reports a location for the issue. A correctly populated expression can 
allow client systems to:
</p>
<ul>
 <li>Connect return errors with the appropriate UI widget</li>
 <li>Route errors to the correct application or system log</li>
 <li>Develop more intelligent testing applications</li>
</ul>

<p>
In order to support these kinds of usages, applications
need to use the <code>expression</code> element consistently. Applications
can use the <code>expression</code> element to refer to a location inside
a resource, or some location in the HTTP request (when appropriate). 
</p>

<p>
Error locations are always reported using a <a href="fhirpath.html#simple">simplified FHIRPath</a>
statement in the <code>expression</code> element. In addition to the simplified FHIRPath restrictions, the expression
SHALL NOT contain a .resolve() function. These examples are legal:
</p>
<pre class="xml">
 &lt;expression value=&quot;Patient.identifier&quot;/&gt;
</pre>
<pre class="json">
  "expression" : "Patient.identifier[2].value"
</pre>
<p>
but this is not:
</p>
<pre class="json">
  "expression" : "Patient.identifier.where(system.value='http://example.com/mrn').value"
</pre>

<a name="reporting"></a>
<h3>Reporting Errors in the HTTP Headers</h3>
<p>
Servers may also need to report errors in the HTTP headers - especially 
query parameters when processing searches. Errors are reported using 
a case sensitive expression that has two parts, a fixed "http" and 
the header or query parameter name separated by a ".". Some
examples:
</p>
<table class="grid">
 <tr>
   <td><b>Expresson</b></td>
   <td><b>Description</b></td>
 </tr>
 <tr>
   <td>http.code</td>
   <td>A reference to the search parameter "code"</td>
 </tr>
 <tr>
   <td>http."name:exact"</td>
   <td>A reference to the search parameter "name" with the modifier ":exact"</td>
 </tr>
 <tr>
   <td>http.Authorization</td>
   <td>A reference to the Authorization header - perhaps to indicate that it is missing, and some form of authentication is required.</td>
 </tr>
</table>
<p>
This specification follows the convention that HTTP headers start with an uppercase
character, and URL parameters start with a lowercase character. Implementations 
are encouraged to follow this convention, so that no name collisions occur.
</p>

</div>
