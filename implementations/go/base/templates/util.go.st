package models

// This file is generated by the FHIR golang generator.  This file should not be manually modified.

import (
	"encoding/json"
	"reflect"
)

func GetResourceID(resource interface{}) (id string, ok bool) {
	if value := reflect.ValueOf(resource).Elem().FieldByName("Id"); value.CanInterface() {
		id, ok = value.Interface().(string)
	}
	return
}

func GetResourceMeta(resource interface{}) (meta *Meta, ok bool) {
	if value := reflect.ValueOf(resource).Elem().FieldByName("Meta"); value.CanInterface() {
		meta, ok = value.Interface().(*Meta)
	}
	return
}

/* When FHIR JSON is unmarshalled, types that are interface{} just get unmarshaled to map[string]interface{}.
   This function converts that unmarshaled map to a specific resource type. */
func MapToResource(resourceMap interface{}, asPointer bool) interface{} {
	b, _ := json.Marshal(&resourceMap)
	m := resourceMap.(map[string]interface{})
	t := m["resourceType"]
	switch t {
	<Resources:{r |
case "<r>":
	x := <r>{\}
	json.Unmarshal(b, &x)
	if asPointer {
		return &x
	\} else {
		return x
	\}
}>
	}
	return nil
}